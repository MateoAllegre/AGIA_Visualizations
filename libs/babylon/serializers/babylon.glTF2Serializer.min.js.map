{"version":3,"file":"babylon.glTF2Serializer.min.js","mappings":"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","sources":["webpack://SERIALIZERS/webpack/universalModuleDefinition","webpack://SERIALIZERS/external umd {\"root\":\"BABYLON\",\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\"}","webpack://SERIALIZERS/webpack/bootstrap","webpack://SERIALIZERS/webpack/runtime/define property getters","webpack://SERIALIZERS/webpack/runtime/global","webpack://SERIALIZERS/webpack/runtime/hasOwnProperty shorthand","webpack://SERIALIZERS/webpack/runtime/make namespace object","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/glTFFileExporter.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFData.ts","webpack://SERIALIZERS/../../../../node_modules/tslib/tslib.es6.mjs","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFMaterialExporter.ts","webpack://SERIALIZERS/../../../dev/serializers/src/exportUtils.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFUtilities.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/dataWriter.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/bufferManager.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFAnimation.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFMorphTargetsUtilities.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFExporter.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/glTFSerializer.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/EXT_mesh_gpu_instancing.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_draco_mesh_compression.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_lights_punctual.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_anisotropy.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_clearcoat.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_diffuse_transmission.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_dispersion.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_emissive_strength.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_ior.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_iridescence.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_sheen.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_specular.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_transmission.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_unlit.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_materials_volume.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/EXT_materials_diffuse_roughness.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_texture_transform.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/KHR_texture_basisu.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/EXT_texture_webp.ts","webpack://SERIALIZERS/../../../dev/serializers/src/glTF/2.0/Extensions/EXT_texture_avif.ts","webpack://SERIALIZERS/../../../lts/serializers/src/legacy/legacy-glTF2Serializer.ts","webpack://SERIALIZERS/./src/glTF2.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"babylonjs-serializers\", [\"babylonjs\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"babylonjs-serializers\"] = factory(require(\"babylonjs\"));\n\telse\n\t\troot[\"SERIALIZERS\"] = factory(root[\"BABYLON\"]);\n})((typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : this), (__WEBPACK_EXTERNAL_MODULE__597__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__597__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** @internal */\r\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\r\nexport var __IGLTFExporterExtension = 0; // I am here to allow dts to be created\r\n\r\n/**\r\n * Interface for extending the exporter\r\n * @internal\r\n */\r\nexport interface IGLTFExporterExtension {\r\n    /**\r\n     * The name of this extension\r\n     */\r\n    readonly name: string;\r\n    /**\r\n     * Defines whether this extension is enabled\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Defines whether this extension is required\r\n     */\r\n    required: boolean;\r\n}\r\n","import { GetMimeType } from \"core/Misc/fileTools\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Class for holding and downloading glTF file data\r\n */\r\nexport class GLTFData {\r\n    /**\r\n     * Object which contains the file name as the key and its data as the value\r\n     */\r\n    public readonly files: { [fileName: string]: string | Blob } = {};\r\n\r\n    /**\r\n     * @deprecated Use files instead\r\n     */\r\n    public get glTFFiles() {\r\n        return this.files;\r\n    }\r\n\r\n    /**\r\n     * Downloads the glTF data as files based on their names and data\r\n     */\r\n    public downloadFiles(): void {\r\n        for (const key in this.files) {\r\n            const value = this.files[key];\r\n            const blob = new Blob([value], { type: GetMimeType(key) });\r\n            Tools.Download(blob, key);\r\n        }\r\n    }\r\n}\r\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","/* eslint-disable @typescript-eslint/prefer-promise-reject-errors */\r\n/* eslint-disable github/no-then */\r\n/* eslint-disable babylonjs/available */\r\n\r\nimport type { ITextureInfo, IMaterial, IMaterialPbrMetallicRoughness, IMaterialOcclusionTextureInfo, ISampler, IImage } from \"babylonjs-gltf2interface\";\r\nimport { ImageMimeType, MaterialAlphaMode, TextureMagFilter, TextureMinFilter, TextureWrapMode } from \"babylonjs-gltf2interface\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { GetTextureDataAsync, TextureTools } from \"core/Misc/textureTools\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { RawTexture } from \"core/Materials/Textures/rawTexture\";\r\n\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport type { GLTFExporter } from \"./glTFExporter\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { DumpTools } from \"core/Misc/dumpTools\";\r\n\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport type { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport { SpecularPowerToRoughness } from \"core/Helpers/materialConversionHelper\";\r\nimport { InternalTextureSource } from \"core/Materials/Textures/internalTexture\";\r\nimport { GetMimeType } from \"core/Misc/fileTools\";\r\n\r\nconst Epsilon = 1e-6;\r\nconst DielectricSpecular = new Color3(0.04, 0.04, 0.04);\r\nconst MaxSpecularPower = 1024;\r\nconst White = Color3.White();\r\nconst Black = Color3.Black();\r\n\r\n/**\r\n * Interface for storing specular glossiness factors\r\n * @internal\r\n */\r\ninterface IPBRSpecularGlossiness {\r\n    /**\r\n     * Represents the linear diffuse factors of the material\r\n     */\r\n    diffuseColor: Color3;\r\n    specularColor: Color3;\r\n    glossiness: number;\r\n}\r\n\r\ninterface IPBRMetallicRoughness {\r\n    baseColor: Color3;\r\n    metallic: Nullable<number>;\r\n    roughness: Nullable<number>;\r\n    metallicRoughnessTextureData?: Nullable<ArrayBuffer>;\r\n    baseColorTextureData?: Nullable<ArrayBuffer>;\r\n}\r\n\r\nfunction GetFileExtensionFromMimeType(mimeType: ImageMimeType): string {\r\n    switch (mimeType) {\r\n        case ImageMimeType.JPEG:\r\n            return \".jpg\";\r\n        case ImageMimeType.PNG:\r\n            return \".png\";\r\n        case ImageMimeType.WEBP:\r\n            return \".webp\";\r\n        case ImageMimeType.AVIF:\r\n            return \".avif\";\r\n        case ImageMimeType.KTX2:\r\n            return \".ktx2\";\r\n    }\r\n}\r\n\r\n/**\r\n * Gets cached image from a texture, if available.\r\n * @param babylonTexture texture to check for cached image\r\n * @returns image data if found and directly usable; null otherwise\r\n */\r\nasync function GetCachedImageAsync(babylonTexture: BaseTexture): Promise<Nullable<{ data: ArrayBuffer; mimeType: string }>> {\r\n    const internalTexture = babylonTexture.getInternalTexture();\r\n    if (!internalTexture || internalTexture.source !== InternalTextureSource.Url) {\r\n        return null;\r\n    }\r\n    if (internalTexture.invertY) {\r\n        return null;\r\n    }\r\n\r\n    const buffer = internalTexture._buffer;\r\n\r\n    let data;\r\n    let mimeType = (babylonTexture as Texture).mimeType;\r\n\r\n    if (!buffer) {\r\n        data = await Tools.LoadFileAsync(internalTexture.url);\r\n        mimeType = GetMimeType(internalTexture.url) || mimeType;\r\n    } else if (ArrayBuffer.isView(buffer)) {\r\n        data = buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength) as ArrayBuffer;\r\n    } else if (buffer instanceof ArrayBuffer) {\r\n        data = buffer;\r\n    } else if (buffer instanceof Blob) {\r\n        data = await buffer.arrayBuffer();\r\n        mimeType = buffer.type || mimeType;\r\n    } else if (typeof buffer === \"string\") {\r\n        data = await Tools.LoadFileAsync(buffer);\r\n        mimeType = GetMimeType(buffer) || mimeType;\r\n    } else if (typeof HTMLImageElement !== \"undefined\" && buffer instanceof HTMLImageElement) {\r\n        data = await Tools.LoadFileAsync(buffer.src);\r\n        mimeType = GetMimeType(buffer.src) || mimeType;\r\n    }\r\n\r\n    if (data && mimeType) {\r\n        return { data, mimeType };\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Computes the metallic factor from specular glossiness values.\r\n * @param diffuse diffused value\r\n * @param specular specular value\r\n * @param oneMinusSpecularStrength one minus the specular strength\r\n * @returns metallic value\r\n * @internal\r\n */\r\nexport function _SolveMetallic(diffuse: number, specular: number, oneMinusSpecularStrength: number): number {\r\n    if (specular < DielectricSpecular.r) {\r\n        DielectricSpecular;\r\n        return 0;\r\n    }\r\n\r\n    const a = DielectricSpecular.r;\r\n    const b = (diffuse * oneMinusSpecularStrength) / (1.0 - DielectricSpecular.r) + specular - 2.0 * DielectricSpecular.r;\r\n    const c = DielectricSpecular.r - specular;\r\n    const d = b * b - 4.0 * a * c;\r\n    return Scalar.Clamp((-b + Math.sqrt(d)) / (2.0 * a), 0, 1);\r\n}\r\n\r\n/**\r\n * Computes the metallic/roughness factors from a Standard Material.\r\n * @internal\r\n */\r\nexport function _ConvertToGLTFPBRMetallicRoughness(babylonStandardMaterial: StandardMaterial): IMaterialPbrMetallicRoughness {\r\n    const diffuse = babylonStandardMaterial.diffuseColor.toLinearSpace(babylonStandardMaterial.getScene().getEngine().useExactSrgbConversions).scale(0.5);\r\n    const opacity = babylonStandardMaterial.alpha;\r\n    const specularPower = Scalar.Clamp(babylonStandardMaterial.specularPower, 0, MaxSpecularPower);\r\n\r\n    const roughness = SpecularPowerToRoughness(specularPower);\r\n\r\n    const glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness = {\r\n        baseColorFactor: [diffuse.r, diffuse.g, diffuse.b, opacity],\r\n        metallicFactor: 0,\r\n        roughnessFactor: roughness,\r\n    };\r\n\r\n    return glTFPbrMetallicRoughness;\r\n}\r\n\r\n/**\r\n * Sets the glTF alpha mode to a glTF material from the Babylon Material\r\n * @param glTFMaterial glTF material\r\n * @param babylonMaterial Babylon material\r\n */\r\nfunction SetAlphaMode(glTFMaterial: IMaterial, babylonMaterial: Material & { alphaCutOff?: number }): void {\r\n    if (babylonMaterial.needAlphaBlending()) {\r\n        glTFMaterial.alphaMode = MaterialAlphaMode.BLEND;\r\n    } else if (babylonMaterial.needAlphaTesting()) {\r\n        glTFMaterial.alphaMode = MaterialAlphaMode.MASK;\r\n        glTFMaterial.alphaCutoff = babylonMaterial.alphaCutOff;\r\n    }\r\n}\r\n\r\nfunction CreateWhiteTexture(width: number, height: number, scene: Scene): Texture {\r\n    const data = new Uint8Array(width * height * 4);\r\n\r\n    for (let i = 0; i < data.length; i = i + 4) {\r\n        data[i] = data[i + 1] = data[i + 2] = data[i + 3] = 0xff;\r\n    }\r\n\r\n    const rawTexture = RawTexture.CreateRGBATexture(data, width, height, scene);\r\n\r\n    return rawTexture;\r\n}\r\n\r\nfunction ConvertPixelArrayToFloat32(pixels: ArrayBufferView): Float32Array {\r\n    if (pixels instanceof Uint8Array) {\r\n        const length = pixels.length;\r\n        const buffer = new Float32Array(pixels.length);\r\n        for (let i = 0; i < length; ++i) {\r\n            buffer[i] = pixels[i] / 255;\r\n        }\r\n        return buffer;\r\n    } else if (pixels instanceof Float32Array) {\r\n        return pixels;\r\n    } else {\r\n        throw new Error(\"Unsupported pixel format!\");\r\n    }\r\n}\r\n\r\n/**\r\n * Utility methods for working with glTF material conversion properties.\r\n * @internal\r\n */\r\nexport class GLTFMaterialExporter {\r\n    // Mapping to store textures\r\n    private _textureMap = new Map<BaseTexture, ITextureInfo>();\r\n\r\n    // Mapping of internal textures to images to avoid exporting duplicate images\r\n    private _internalTextureToImage: { [uniqueId: number]: { [mimeType: string]: Promise<number> } } = {};\r\n\r\n    constructor(private readonly _exporter: GLTFExporter) {}\r\n\r\n    public getTextureInfo(babylonTexture: Nullable<BaseTexture>): Nullable<ITextureInfo> {\r\n        return babylonTexture ? (this._textureMap.get(babylonTexture) ?? null) : null;\r\n    }\r\n\r\n    public async exportStandardMaterialAsync(babylonStandardMaterial: StandardMaterial, hasUVs: boolean): Promise<number> {\r\n        const pbrMetallicRoughness = _ConvertToGLTFPBRMetallicRoughness(babylonStandardMaterial);\r\n\r\n        const material: IMaterial = { name: babylonStandardMaterial.name };\r\n        if (babylonStandardMaterial.backFaceCulling != null && !babylonStandardMaterial.backFaceCulling) {\r\n            if (!babylonStandardMaterial.twoSidedLighting) {\r\n                Tools.Warn(babylonStandardMaterial.name + \": Back-face culling disabled and two-sided lighting disabled is not supported in glTF.\");\r\n            }\r\n            material.doubleSided = true;\r\n        }\r\n\r\n        if (hasUVs) {\r\n            const promises: Promise<void>[] = [];\r\n\r\n            const diffuseTexture = babylonStandardMaterial.diffuseTexture;\r\n            if (diffuseTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(diffuseTexture).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            pbrMetallicRoughness.baseColorTexture = textureInfo;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            const bumpTexture = babylonStandardMaterial.bumpTexture;\r\n            if (bumpTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(bumpTexture).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            material.normalTexture = textureInfo;\r\n                            if (bumpTexture.level !== 1) {\r\n                                material.normalTexture.scale = bumpTexture.level;\r\n                            }\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            const emissiveTexture = babylonStandardMaterial.emissiveTexture;\r\n            if (emissiveTexture) {\r\n                material.emissiveFactor = [1.0, 1.0, 1.0];\r\n\r\n                promises.push(\r\n                    this.exportTextureAsync(emissiveTexture).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            material.emissiveTexture = textureInfo;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            const ambientTexture = babylonStandardMaterial.ambientTexture;\r\n            if (ambientTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(ambientTexture).then((textureInfo) => {\r\n                        if (textureInfo) {\r\n                            const occlusionTexture: IMaterialOcclusionTextureInfo = {\r\n                                index: textureInfo.index,\r\n                            };\r\n                            material.occlusionTexture = occlusionTexture;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (promises.length > 0) {\r\n                this._exporter._materialNeedsUVsSet.add(babylonStandardMaterial);\r\n                await Promise.all(promises);\r\n            }\r\n        }\r\n\r\n        if (babylonStandardMaterial.alpha < 1.0 || babylonStandardMaterial.opacityTexture) {\r\n            if (babylonStandardMaterial.alphaMode === Constants.ALPHA_COMBINE) {\r\n                material.alphaMode = MaterialAlphaMode.BLEND;\r\n            } else {\r\n                Tools.Warn(babylonStandardMaterial.name + \": glTF 2.0 does not support alpha mode: \" + babylonStandardMaterial.alphaMode.toString());\r\n            }\r\n        }\r\n\r\n        if (babylonStandardMaterial.emissiveColor && !babylonStandardMaterial.emissiveColor.equalsWithEpsilon(Black, Epsilon)) {\r\n            material.emissiveFactor = babylonStandardMaterial.emissiveColor.asArray();\r\n        }\r\n\r\n        material.pbrMetallicRoughness = pbrMetallicRoughness;\r\n        SetAlphaMode(material, babylonStandardMaterial);\r\n\r\n        await this._finishMaterialAsync(material, babylonStandardMaterial);\r\n\r\n        const materials = this._exporter._materials;\r\n        materials.push(material);\r\n        return materials.length - 1;\r\n    }\r\n\r\n    private async _finishMaterialAsync(glTFMaterial: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        const textures = this._exporter._extensionsPostExportMaterialAdditionalTextures(\"exportMaterial\", glTFMaterial, babylonMaterial);\r\n\r\n        const promises: Array<Promise<Nullable<ITextureInfo>>> = [];\r\n\r\n        for (const texture of textures) {\r\n            promises.push(this.exportTextureAsync(texture));\r\n        }\r\n\r\n        await Promise.all(promises);\r\n\r\n        await this._exporter._extensionsPostExportMaterialAsync(\"exportMaterial\", glTFMaterial, babylonMaterial);\r\n    }\r\n\r\n    private async _getImageDataAsync(buffer: Uint8Array, width: number, height: number, mimeType: ImageMimeType): Promise<ArrayBuffer> {\r\n        return await DumpTools.DumpDataAsync(width, height, buffer, mimeType, undefined, false, true);\r\n    }\r\n\r\n    /**\r\n     * Resizes the two source textures to the same dimensions.  If a texture is null, a default white texture is generated.  If both textures are null, returns null\r\n     * @param texture1 first texture to resize\r\n     * @param texture2 second texture to resize\r\n     * @param scene babylonjs scene\r\n     * @returns resized textures or null\r\n     */\r\n    private _resizeTexturesToSameDimensions(texture1: Nullable<BaseTexture>, texture2: Nullable<BaseTexture>, scene: Scene): { texture1: BaseTexture; texture2: BaseTexture } {\r\n        const texture1Size = texture1 ? texture1.getSize() : { width: 0, height: 0 };\r\n        const texture2Size = texture2 ? texture2.getSize() : { width: 0, height: 0 };\r\n        let resizedTexture1: BaseTexture;\r\n        let resizedTexture2: BaseTexture;\r\n\r\n        if (texture1Size.width < texture2Size.width) {\r\n            if (texture1 && texture1 instanceof Texture) {\r\n                resizedTexture1 = TextureTools.CreateResizedCopy(texture1, texture2Size.width, texture2Size.height, true);\r\n            } else {\r\n                resizedTexture1 = CreateWhiteTexture(texture2Size.width, texture2Size.height, scene);\r\n            }\r\n            resizedTexture2 = texture2!;\r\n        } else if (texture1Size.width > texture2Size.width) {\r\n            if (texture2 && texture2 instanceof Texture) {\r\n                resizedTexture2 = TextureTools.CreateResizedCopy(texture2, texture1Size.width, texture1Size.height, true);\r\n            } else {\r\n                resizedTexture2 = CreateWhiteTexture(texture1Size.width, texture1Size.height, scene);\r\n            }\r\n            resizedTexture1 = texture1!;\r\n        } else {\r\n            resizedTexture1 = texture1!;\r\n            resizedTexture2 = texture2!;\r\n        }\r\n\r\n        return {\r\n            texture1: resizedTexture1!,\r\n            texture2: resizedTexture2!,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Convert Specular Glossiness Textures to Metallic Roughness\r\n     * See link below for info on the material conversions from PBR Metallic/Roughness and Specular/Glossiness\r\n     * @see https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/examples/convert-between-workflows-bjs/js/babylon.pbrUtilities.js\r\n     * @param diffuseTexture texture used to store diffuse information\r\n     * @param specularGlossinessTexture texture used to store specular and glossiness information\r\n     * @param factors specular glossiness material factors\r\n     * @param mimeType the mime type to use for the texture\r\n     * @returns pbr metallic roughness interface or null\r\n     */\r\n    private async _convertSpecularGlossinessTexturesToMetallicRoughnessAsync(\r\n        diffuseTexture: Nullable<BaseTexture>,\r\n        specularGlossinessTexture: Nullable<BaseTexture>,\r\n        factors: IPBRSpecularGlossiness,\r\n        mimeType: ImageMimeType\r\n    ): Promise<IPBRMetallicRoughness> {\r\n        const promises = new Array<Promise<void>>();\r\n        if (!(diffuseTexture || specularGlossinessTexture)) {\r\n            return await Promise.reject(\"diffuse and specular glossiness textures are not defined!\");\r\n        }\r\n\r\n        const scene: Nullable<Scene> = diffuseTexture ? diffuseTexture.getScene() : specularGlossinessTexture ? specularGlossinessTexture.getScene() : null;\r\n        if (scene) {\r\n            const resizedTextures = this._resizeTexturesToSameDimensions(diffuseTexture, specularGlossinessTexture, scene);\r\n\r\n            const diffuseSize = resizedTextures.texture1?.getSize();\r\n\r\n            let diffuseBuffer: Float32Array;\r\n            let specularGlossinessBuffer: Float32Array;\r\n\r\n            const width = diffuseSize.width;\r\n            const height = diffuseSize.height;\r\n\r\n            const diffusePixels = await resizedTextures.texture1.readPixels();\r\n            const specularPixels = await resizedTextures.texture2.readPixels();\r\n\r\n            if (diffusePixels) {\r\n                diffuseBuffer = ConvertPixelArrayToFloat32(diffusePixels);\r\n            } else {\r\n                return await Promise.reject(\"Failed to retrieve pixels from diffuse texture!\");\r\n            }\r\n            if (specularPixels) {\r\n                specularGlossinessBuffer = ConvertPixelArrayToFloat32(specularPixels);\r\n            } else {\r\n                return await Promise.reject(\"Failed to retrieve pixels from specular glossiness texture!\");\r\n            }\r\n\r\n            const byteLength = specularGlossinessBuffer.byteLength;\r\n\r\n            const metallicRoughnessBuffer = new Uint8Array(byteLength);\r\n            const baseColorBuffer = new Uint8Array(byteLength);\r\n\r\n            const strideSize = 4;\r\n            const maxBaseColor = Black;\r\n            let maxMetallic = 0;\r\n            let maxRoughness = 0;\r\n\r\n            for (let h = 0; h < height; ++h) {\r\n                for (let w = 0; w < width; ++w) {\r\n                    const offset = (width * h + w) * strideSize;\r\n\r\n                    const diffuseColor = new Color3(diffuseBuffer[offset], diffuseBuffer[offset + 1], diffuseBuffer[offset + 2])\r\n                        .toLinearSpace(scene.getEngine().useExactSrgbConversions)\r\n                        .multiply(factors.diffuseColor);\r\n                    const specularColor = new Color3(specularGlossinessBuffer[offset], specularGlossinessBuffer[offset + 1], specularGlossinessBuffer[offset + 2])\r\n                        .toLinearSpace(scene.getEngine().useExactSrgbConversions)\r\n                        .multiply(factors.specularColor);\r\n                    const glossiness = specularGlossinessBuffer[offset + 3] * factors.glossiness;\r\n\r\n                    const specularGlossiness: IPBRSpecularGlossiness = {\r\n                        diffuseColor: diffuseColor,\r\n                        specularColor: specularColor,\r\n                        glossiness: glossiness,\r\n                    };\r\n\r\n                    const metallicRoughness = this._convertSpecularGlossinessToMetallicRoughness(specularGlossiness);\r\n                    maxBaseColor.r = Math.max(maxBaseColor.r, metallicRoughness.baseColor.r);\r\n                    maxBaseColor.g = Math.max(maxBaseColor.g, metallicRoughness.baseColor.g);\r\n                    maxBaseColor.b = Math.max(maxBaseColor.b, metallicRoughness.baseColor.b);\r\n                    maxMetallic = Math.max(maxMetallic, metallicRoughness.metallic!);\r\n                    maxRoughness = Math.max(maxRoughness, metallicRoughness.roughness!);\r\n\r\n                    baseColorBuffer[offset] = metallicRoughness.baseColor.r * 255;\r\n                    baseColorBuffer[offset + 1] = metallicRoughness.baseColor.g * 255;\r\n                    baseColorBuffer[offset + 2] = metallicRoughness.baseColor.b * 255;\r\n                    baseColorBuffer[offset + 3] = resizedTextures.texture1.hasAlpha ? diffuseBuffer[offset + 3] * 255 : 255;\r\n\r\n                    metallicRoughnessBuffer[offset] = 0;\r\n                    metallicRoughnessBuffer[offset + 1] = metallicRoughness.roughness! * 255;\r\n                    metallicRoughnessBuffer[offset + 2] = metallicRoughness.metallic! * 255;\r\n                    metallicRoughnessBuffer[offset + 3] = 255;\r\n                }\r\n            }\r\n\r\n            // Retrieves the metallic roughness factors from the maximum texture values.\r\n            const metallicRoughnessFactors: IPBRMetallicRoughness = {\r\n                baseColor: maxBaseColor,\r\n                metallic: maxMetallic,\r\n                roughness: maxRoughness,\r\n            };\r\n\r\n            let writeOutMetallicRoughnessTexture = false;\r\n            let writeOutBaseColorTexture = false;\r\n\r\n            for (let h = 0; h < height; ++h) {\r\n                for (let w = 0; w < width; ++w) {\r\n                    const destinationOffset = (width * h + w) * strideSize;\r\n\r\n                    baseColorBuffer[destinationOffset] /= metallicRoughnessFactors.baseColor.r > Epsilon ? metallicRoughnessFactors.baseColor.r : 1;\r\n                    baseColorBuffer[destinationOffset + 1] /= metallicRoughnessFactors.baseColor.g > Epsilon ? metallicRoughnessFactors.baseColor.g : 1;\r\n                    baseColorBuffer[destinationOffset + 2] /= metallicRoughnessFactors.baseColor.b > Epsilon ? metallicRoughnessFactors.baseColor.b : 1;\r\n\r\n                    const linearBaseColorPixel = Color3.FromInts(\r\n                        baseColorBuffer[destinationOffset],\r\n                        baseColorBuffer[destinationOffset + 1],\r\n                        baseColorBuffer[destinationOffset + 2]\r\n                    );\r\n                    const sRGBBaseColorPixel = linearBaseColorPixel.toGammaSpace(scene.getEngine().useExactSrgbConversions);\r\n                    baseColorBuffer[destinationOffset] = sRGBBaseColorPixel.r * 255;\r\n                    baseColorBuffer[destinationOffset + 1] = sRGBBaseColorPixel.g * 255;\r\n                    baseColorBuffer[destinationOffset + 2] = sRGBBaseColorPixel.b * 255;\r\n\r\n                    if (!sRGBBaseColorPixel.equalsWithEpsilon(White, Epsilon)) {\r\n                        writeOutBaseColorTexture = true;\r\n                    }\r\n\r\n                    metallicRoughnessBuffer[destinationOffset + 1] /= metallicRoughnessFactors.roughness! > Epsilon ? metallicRoughnessFactors.roughness! : 1;\r\n                    metallicRoughnessBuffer[destinationOffset + 2] /= metallicRoughnessFactors.metallic! > Epsilon ? metallicRoughnessFactors.metallic! : 1;\r\n\r\n                    const metallicRoughnessPixel = Color3.FromInts(255, metallicRoughnessBuffer[destinationOffset + 1], metallicRoughnessBuffer[destinationOffset + 2]);\r\n\r\n                    if (!metallicRoughnessPixel.equalsWithEpsilon(White, Epsilon)) {\r\n                        writeOutMetallicRoughnessTexture = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (writeOutMetallicRoughnessTexture) {\r\n                promises.push(\r\n                    this._getImageDataAsync(metallicRoughnessBuffer, width, height, mimeType).then((data) => {\r\n                        metallicRoughnessFactors.metallicRoughnessTextureData = data;\r\n                    })\r\n                );\r\n            }\r\n            if (writeOutBaseColorTexture) {\r\n                promises.push(\r\n                    this._getImageDataAsync(baseColorBuffer, width, height, mimeType).then((data) => {\r\n                        metallicRoughnessFactors.baseColorTextureData = data;\r\n                    })\r\n                );\r\n            }\r\n\r\n            return await Promise.all(promises).then(() => {\r\n                return metallicRoughnessFactors;\r\n            });\r\n        } else {\r\n            return await Promise.reject(\"_ConvertSpecularGlossinessTexturesToMetallicRoughness: Scene from textures is missing!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts specular glossiness material properties to metallic roughness\r\n     * @param specularGlossiness interface with specular glossiness material properties\r\n     * @returns interface with metallic roughness material properties\r\n     */\r\n    private _convertSpecularGlossinessToMetallicRoughness(specularGlossiness: IPBRSpecularGlossiness): IPBRMetallicRoughness {\r\n        const diffusePerceivedBrightness = this._getPerceivedBrightness(specularGlossiness.diffuseColor);\r\n        const specularPerceivedBrightness = this._getPerceivedBrightness(specularGlossiness.specularColor);\r\n        const oneMinusSpecularStrength = 1 - this._getMaxComponent(specularGlossiness.specularColor);\r\n        const metallic = _SolveMetallic(diffusePerceivedBrightness, specularPerceivedBrightness, oneMinusSpecularStrength);\r\n        const baseColorFromDiffuse = specularGlossiness.diffuseColor.scale(oneMinusSpecularStrength / (1.0 - DielectricSpecular.r) / Math.max(1 - metallic));\r\n        const baseColorFromSpecular = specularGlossiness.specularColor.subtract(DielectricSpecular.scale(1 - metallic)).scale(1 / Math.max(metallic));\r\n        let baseColor = Color3.Lerp(baseColorFromDiffuse, baseColorFromSpecular, metallic * metallic);\r\n        baseColor = baseColor.clampToRef(0, 1, baseColor);\r\n\r\n        const metallicRoughness: IPBRMetallicRoughness = {\r\n            baseColor: baseColor,\r\n            metallic: metallic,\r\n            roughness: 1 - specularGlossiness.glossiness,\r\n        };\r\n\r\n        return metallicRoughness;\r\n    }\r\n\r\n    /**\r\n     * Calculates the surface reflectance, independent of lighting conditions\r\n     * @param color Color source to calculate brightness from\r\n     * @returns number representing the perceived brightness, or zero if color is undefined\r\n     */\r\n    private _getPerceivedBrightness(color: Color3): number {\r\n        if (color) {\r\n            return Math.sqrt(0.299 * color.r * color.r + 0.587 * color.g * color.g + 0.114 * color.b * color.b);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum color component value\r\n     * @param color\r\n     * @returns maximum color component value, or zero if color is null or undefined\r\n     */\r\n    private _getMaxComponent(color: Color3): number {\r\n        if (color) {\r\n            return Math.max(color.r, Math.max(color.g, color.b));\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Convert a PBRMaterial (Metallic/Roughness) to Metallic Roughness factors\r\n     * @param babylonPBRMaterial BJS PBR Metallic Roughness Material\r\n     * @param glTFPbrMetallicRoughness glTF PBR Metallic Roughness interface\r\n     * @param hasUVs specifies if texture coordinates are present on the submesh to determine if textures should be applied\r\n     * @returns glTF PBR Metallic Roughness factors\r\n     */\r\n    private async _convertMetalRoughFactorsToMetallicRoughnessAsync(\r\n        babylonPBRMaterial: PBRBaseMaterial,\r\n        glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness,\r\n        hasUVs: boolean\r\n    ): Promise<IPBRMetallicRoughness> {\r\n        const promises: Promise<void>[] = [];\r\n\r\n        const metallicRoughness: IPBRMetallicRoughness = {\r\n            baseColor: babylonPBRMaterial._albedoColor,\r\n            metallic: babylonPBRMaterial._metallic,\r\n            roughness: babylonPBRMaterial._roughness,\r\n        };\r\n\r\n        if (hasUVs) {\r\n            const albedoTexture = babylonPBRMaterial._albedoTexture;\r\n            if (albedoTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(albedoTexture).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFPbrMetallicRoughness.baseColorTexture = glTFTexture;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n            const metallicTexture = babylonPBRMaterial._metallicTexture;\r\n            if (metallicTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(metallicTexture).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFPbrMetallicRoughness.metallicRoughnessTexture = glTFTexture;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        if (promises.length > 0) {\r\n            this._exporter._materialNeedsUVsSet.add(babylonPBRMaterial);\r\n            await Promise.all(promises);\r\n        }\r\n\r\n        return metallicRoughness;\r\n    }\r\n\r\n    private _getTextureSampler(texture: Nullable<BaseTexture>): ISampler {\r\n        const sampler: ISampler = {};\r\n        if (!texture || !(texture instanceof Texture)) {\r\n            return sampler;\r\n        }\r\n\r\n        const wrapS = this._getGLTFTextureWrapMode(texture.wrapU);\r\n        if (wrapS !== TextureWrapMode.REPEAT) {\r\n            sampler.wrapS = wrapS;\r\n        }\r\n\r\n        const wrapT = this._getGLTFTextureWrapMode(texture.wrapV);\r\n        if (wrapT !== TextureWrapMode.REPEAT) {\r\n            sampler.wrapT = wrapT;\r\n        }\r\n\r\n        switch (texture.samplingMode) {\r\n            case Texture.LINEAR_LINEAR: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.LINEAR;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_NEAREST: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.NEAREST;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_LINEAR: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.LINEAR;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_LINEAR_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_NEAREST: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.NEAREST;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_LINEAR_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_NEAREST_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_NEAREST_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_NEAREST_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_LINEAR_MIPLINEAR: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_LINEAR;\r\n                break;\r\n            }\r\n            case Texture.LINEAR_LINEAR_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.LINEAR;\r\n                sampler.minFilter = TextureMinFilter.LINEAR_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n            case Texture.NEAREST_NEAREST_MIPNEAREST: {\r\n                sampler.magFilter = TextureMagFilter.NEAREST;\r\n                sampler.minFilter = TextureMinFilter.NEAREST_MIPMAP_NEAREST;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return sampler;\r\n    }\r\n\r\n    private _getGLTFTextureWrapMode(wrapMode: number): TextureWrapMode {\r\n        switch (wrapMode) {\r\n            case Texture.WRAP_ADDRESSMODE: {\r\n                return TextureWrapMode.REPEAT;\r\n            }\r\n            case Texture.CLAMP_ADDRESSMODE: {\r\n                return TextureWrapMode.CLAMP_TO_EDGE;\r\n            }\r\n            case Texture.MIRROR_ADDRESSMODE: {\r\n                return TextureWrapMode.MIRRORED_REPEAT;\r\n            }\r\n            default: {\r\n                Tools.Error(`Unsupported Texture Wrap Mode ${wrapMode}!`);\r\n                return TextureWrapMode.REPEAT;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert a PBRMaterial (Specular/Glossiness) to Metallic Roughness factors\r\n     * @param babylonPBRMaterial BJS PBR Metallic Roughness Material\r\n     * @param pbrMetallicRoughness glTF PBR Metallic Roughness interface\r\n     * @param hasUVs specifies if texture coordinates are present on the submesh to determine if textures should be applied\r\n     * @returns glTF PBR Metallic Roughness factors\r\n     */\r\n    private async _convertSpecGlossFactorsToMetallicRoughnessAsync(\r\n        babylonPBRMaterial: PBRBaseMaterial,\r\n        pbrMetallicRoughness: IMaterialPbrMetallicRoughness,\r\n        hasUVs: boolean\r\n    ): Promise<IPBRMetallicRoughness> {\r\n        const mimeType = ImageMimeType.PNG;\r\n        const specGloss: IPBRSpecularGlossiness = {\r\n            diffuseColor: babylonPBRMaterial._albedoColor,\r\n            specularColor: babylonPBRMaterial._reflectivityColor,\r\n            glossiness: babylonPBRMaterial._microSurface,\r\n        };\r\n\r\n        const albedoTexture = babylonPBRMaterial._albedoTexture;\r\n        const reflectivityTexture = babylonPBRMaterial._reflectivityTexture;\r\n        const useMicrosurfaceFromReflectivityMapAlpha = babylonPBRMaterial._useMicroSurfaceFromReflectivityMapAlpha;\r\n        if (reflectivityTexture && !useMicrosurfaceFromReflectivityMapAlpha) {\r\n            return await Promise.reject(\"_ConvertPBRMaterial: Glossiness values not included in the reflectivity texture are currently not supported\");\r\n        }\r\n\r\n        if ((albedoTexture || reflectivityTexture) && hasUVs) {\r\n            this._exporter._materialNeedsUVsSet.add(babylonPBRMaterial);\r\n\r\n            const samplerIndex = this._exportTextureSampler(albedoTexture || reflectivityTexture);\r\n            const metallicRoughnessFactors = await this._convertSpecularGlossinessTexturesToMetallicRoughnessAsync(albedoTexture, reflectivityTexture, specGloss, mimeType);\r\n\r\n            const textures = this._exporter._textures;\r\n\r\n            if (metallicRoughnessFactors.baseColorTextureData) {\r\n                const imageIndex = this._exportImage(`baseColor${textures.length}`, mimeType, metallicRoughnessFactors.baseColorTextureData);\r\n                pbrMetallicRoughness.baseColorTexture = this._exportTextureInfo(imageIndex, samplerIndex, albedoTexture?.coordinatesIndex);\r\n            }\r\n\r\n            if (metallicRoughnessFactors.metallicRoughnessTextureData) {\r\n                const imageIndex = this._exportImage(`metallicRoughness${textures.length}`, mimeType, metallicRoughnessFactors.metallicRoughnessTextureData);\r\n                pbrMetallicRoughness.metallicRoughnessTexture = this._exportTextureInfo(imageIndex, samplerIndex, reflectivityTexture?.coordinatesIndex);\r\n            }\r\n\r\n            return metallicRoughnessFactors;\r\n        } else {\r\n            return this._convertSpecularGlossinessToMetallicRoughness(specGloss);\r\n        }\r\n    }\r\n\r\n    public async exportPBRMaterialAsync(babylonPBRMaterial: PBRBaseMaterial, hasUVs: boolean): Promise<number> {\r\n        const glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness = {};\r\n\r\n        const glTFMaterial: IMaterial = {\r\n            name: babylonPBRMaterial.name,\r\n        };\r\n\r\n        const useMetallicRoughness = babylonPBRMaterial.isMetallicWorkflow();\r\n\r\n        if (useMetallicRoughness) {\r\n            const albedoColor = babylonPBRMaterial._albedoColor;\r\n            const alpha = babylonPBRMaterial.alpha;\r\n            if (albedoColor) {\r\n                glTFPbrMetallicRoughness.baseColorFactor = [albedoColor.r, albedoColor.g, albedoColor.b, alpha];\r\n            }\r\n        }\r\n\r\n        const metallicRoughness = useMetallicRoughness\r\n            ? await this._convertMetalRoughFactorsToMetallicRoughnessAsync(babylonPBRMaterial, glTFPbrMetallicRoughness, hasUVs)\r\n            : await this._convertSpecGlossFactorsToMetallicRoughnessAsync(babylonPBRMaterial, glTFPbrMetallicRoughness, hasUVs);\r\n\r\n        await this._setMetallicRoughnessPbrMaterialAsync(metallicRoughness, babylonPBRMaterial, glTFMaterial, glTFPbrMetallicRoughness, hasUVs);\r\n        await this._finishMaterialAsync(glTFMaterial, babylonPBRMaterial);\r\n\r\n        const materials = this._exporter._materials;\r\n        materials.push(glTFMaterial);\r\n        return materials.length - 1;\r\n    }\r\n\r\n    private async _setMetallicRoughnessPbrMaterialAsync(\r\n        metallicRoughness: IPBRMetallicRoughness,\r\n        babylonPBRMaterial: PBRBaseMaterial,\r\n        glTFMaterial: IMaterial,\r\n        glTFPbrMetallicRoughness: IMaterialPbrMetallicRoughness,\r\n        hasUVs: boolean\r\n    ): Promise<void> {\r\n        SetAlphaMode(glTFMaterial, babylonPBRMaterial);\r\n\r\n        if (!metallicRoughness.baseColor.equalsWithEpsilon(White, Epsilon) || !Scalar.WithinEpsilon(babylonPBRMaterial.alpha, 1, Epsilon)) {\r\n            glTFPbrMetallicRoughness.baseColorFactor = [metallicRoughness.baseColor.r, metallicRoughness.baseColor.g, metallicRoughness.baseColor.b, babylonPBRMaterial.alpha];\r\n        }\r\n\r\n        if (metallicRoughness.metallic != null && metallicRoughness.metallic !== 1) {\r\n            glTFPbrMetallicRoughness.metallicFactor = metallicRoughness.metallic;\r\n        }\r\n        if (metallicRoughness.roughness != null && metallicRoughness.roughness !== 1) {\r\n            glTFPbrMetallicRoughness.roughnessFactor = metallicRoughness.roughness;\r\n        }\r\n\r\n        if (babylonPBRMaterial.backFaceCulling != null && !babylonPBRMaterial.backFaceCulling) {\r\n            if (!babylonPBRMaterial._twoSidedLighting) {\r\n                Tools.Warn(babylonPBRMaterial.name + \": Back-face culling disabled and two-sided lighting disabled is not supported in glTF.\");\r\n            }\r\n            glTFMaterial.doubleSided = true;\r\n        }\r\n\r\n        if (hasUVs) {\r\n            const promises: Promise<void>[] = [];\r\n\r\n            const bumpTexture = babylonPBRMaterial._bumpTexture;\r\n            if (bumpTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(bumpTexture).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFMaterial.normalTexture = glTFTexture;\r\n                            if (bumpTexture.level !== 1) {\r\n                                glTFMaterial.normalTexture.scale = bumpTexture.level;\r\n                            }\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            const ambientTexture = babylonPBRMaterial._ambientTexture;\r\n            if (ambientTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(ambientTexture).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            const occlusionTexture: IMaterialOcclusionTextureInfo = {\r\n                                index: glTFTexture.index,\r\n                                texCoord: glTFTexture.texCoord,\r\n                                extensions: glTFTexture.extensions,\r\n                            };\r\n\r\n                            glTFMaterial.occlusionTexture = occlusionTexture;\r\n                            const ambientTextureStrength = babylonPBRMaterial._ambientTextureStrength;\r\n                            if (ambientTextureStrength) {\r\n                                occlusionTexture.strength = ambientTextureStrength;\r\n                            }\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            const emissiveTexture = babylonPBRMaterial._emissiveTexture;\r\n            if (emissiveTexture) {\r\n                promises.push(\r\n                    this.exportTextureAsync(emissiveTexture).then((glTFTexture) => {\r\n                        if (glTFTexture) {\r\n                            glTFMaterial.emissiveTexture = glTFTexture;\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (promises.length > 0) {\r\n                this._exporter._materialNeedsUVsSet.add(babylonPBRMaterial);\r\n                await Promise.all(promises);\r\n            }\r\n        }\r\n\r\n        const emissiveColor = babylonPBRMaterial._emissiveColor;\r\n        if (!emissiveColor.equalsWithEpsilon(Black, Epsilon)) {\r\n            glTFMaterial.emissiveFactor = emissiveColor.asArray();\r\n        }\r\n\r\n        glTFMaterial.pbrMetallicRoughness = glTFPbrMetallicRoughness;\r\n    }\r\n\r\n    public async exportTextureAsync(babylonTexture: BaseTexture): Promise<Nullable<ITextureInfo>> {\r\n        let textureInfo = this._textureMap.get(babylonTexture);\r\n        if (textureInfo) {\r\n            return textureInfo;\r\n        }\r\n\r\n        const samplerIndex = this._exportTextureSampler(babylonTexture);\r\n        const imageIndex = await this._exportTextureImageAsync(babylonTexture);\r\n\r\n        textureInfo = this._exportTextureInfo(imageIndex, samplerIndex, babylonTexture.coordinatesIndex);\r\n        this._textureMap.set(babylonTexture, textureInfo);\r\n\r\n        this._exporter._extensionsPostExportTextures(\"exporter\", textureInfo, babylonTexture);\r\n        return textureInfo;\r\n    }\r\n\r\n    private async _exportTextureImageAsync(babylonTexture: BaseTexture): Promise<number> {\r\n        const requestedMimeType = (babylonTexture as Texture).mimeType ?? \"none\";\r\n        // TODO: Add an official way for users to export using a different mime type\r\n        // than the one they loaded with (which is denoted by Texture.mimeType)\r\n\r\n        const internalTextureToImage = this._internalTextureToImage;\r\n        const internalTextureUniqueId = babylonTexture.getInternalTexture()!.uniqueId;\r\n        internalTextureToImage[internalTextureUniqueId] = internalTextureToImage[internalTextureUniqueId] || {};\r\n        let imageIndexPromise = internalTextureToImage[internalTextureUniqueId][requestedMimeType];\r\n\r\n        if (imageIndexPromise === undefined) {\r\n            imageIndexPromise = (async () => {\r\n                // Try to get the image from memory first, if applicable\r\n                const cache = await GetCachedImageAsync(babylonTexture);\r\n                if (cache && (requestedMimeType === \"none\" || cache.mimeType === requestedMimeType)) {\r\n                    return this._exportImage(babylonTexture.name, cache.mimeType as ImageMimeType, cache.data);\r\n                }\r\n\r\n                // Preserve texture mime type if defined\r\n                let mimeType = ImageMimeType.PNG;\r\n                if (requestedMimeType !== \"none\") {\r\n                    switch (requestedMimeType) {\r\n                        case ImageMimeType.JPEG:\r\n                        case ImageMimeType.PNG:\r\n                        case ImageMimeType.WEBP:\r\n                            mimeType = requestedMimeType;\r\n                            break;\r\n                        default:\r\n                            Tools.Warn(`Unsupported media type: ${requestedMimeType}. Exporting texture as PNG.`);\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                const size = babylonTexture.getSize();\r\n                const pixels = await GetTextureDataAsync(babylonTexture);\r\n                const data = await this._getImageDataAsync(pixels, size.width, size.height, mimeType);\r\n\r\n                return this._exportImage(babylonTexture.name, mimeType, data);\r\n            })();\r\n\r\n            internalTextureToImage[internalTextureUniqueId][requestedMimeType] = imageIndexPromise;\r\n        }\r\n\r\n        return await imageIndexPromise;\r\n    }\r\n\r\n    private _exportImage(name: string, mimeType: ImageMimeType, data: ArrayBuffer): number {\r\n        const images = this._exporter._images;\r\n\r\n        let image: IImage;\r\n        if (this._exporter._shouldUseGlb) {\r\n            image = {\r\n                name: name,\r\n                mimeType: mimeType,\r\n                bufferView: undefined, // Will be updated later by BufferManager\r\n            };\r\n            const bufferView = this._exporter._bufferManager.createBufferView(new Uint8Array(data));\r\n            this._exporter._bufferManager.setBufferView(image, bufferView);\r\n        } else {\r\n            // Build a unique URI\r\n            const baseName = name.replace(/\\.\\/|\\/|\\.\\\\|\\\\/g, \"_\");\r\n            const extension = GetFileExtensionFromMimeType(mimeType);\r\n            let fileName = baseName + extension;\r\n            if (images.some((image) => image.uri === fileName)) {\r\n                fileName = `${baseName}_${Tools.RandomId()}${extension}`;\r\n            }\r\n\r\n            image = {\r\n                name: name,\r\n                uri: fileName,\r\n            };\r\n            this._exporter._imageData[fileName] = { data: data, mimeType: mimeType }; // Save image data to be written to file later\r\n        }\r\n\r\n        images.push(image);\r\n\r\n        return images.length - 1;\r\n    }\r\n\r\n    private _exportTextureInfo(imageIndex: number, samplerIndex: number, coordinatesIndex?: number): ITextureInfo {\r\n        const textures = this._exporter._textures;\r\n        let textureIndex = textures.findIndex((t) => t.sampler == samplerIndex && t.source === imageIndex);\r\n        if (textureIndex === -1) {\r\n            textureIndex = textures.length;\r\n            textures.push({\r\n                source: imageIndex,\r\n                sampler: samplerIndex,\r\n            });\r\n        }\r\n\r\n        const textureInfo: ITextureInfo = { index: textureIndex };\r\n        if (coordinatesIndex) {\r\n            textureInfo.texCoord = coordinatesIndex;\r\n        }\r\n        return textureInfo;\r\n    }\r\n\r\n    private _exportTextureSampler(texture: Nullable<BaseTexture>): number {\r\n        const sampler = this._getTextureSampler(texture);\r\n\r\n        // if a pre-existing sampler with identical parameters exists, then reuse the previous sampler\r\n        const samplers = this._exporter._samplers;\r\n        const samplerIndex = samplers.findIndex(\r\n            (s) => s.minFilter === sampler.minFilter && s.magFilter === sampler.magFilter && s.wrapS === sampler.wrapS && s.wrapT === sampler.wrapT\r\n        );\r\n        if (samplerIndex !== -1) {\r\n            return samplerIndex;\r\n        }\r\n\r\n        samplers.push(sampler);\r\n        return samplers.length - 1;\r\n    }\r\n}\r\n","import { Matrix, Quaternion, TmpVectors, Vector3 } from \"core/Maths/math.vector\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Node } from \"core/node\";\r\n\r\n/**\r\n * Matrix that converts handedness on the X-axis. Used to convert from LH to RH and vice versa.\r\n * @internal\r\n */\r\nexport const ConvertHandednessMatrix = Matrix.Compose(new Vector3(-1, 1, 1), Quaternion.Identity(), Vector3.Zero());\r\n\r\n/**\r\n * Checks if a node is a \"noop\" transform node, usually inserted by the glTF loader to correct handedness.\r\n * @internal\r\n */\r\nexport function IsNoopNode(node: Node, useRightHandedSystem: boolean): boolean {\r\n    if (!(node instanceof TransformNode)) {\r\n        return false;\r\n    }\r\n\r\n    // Transform\r\n    if (useRightHandedSystem) {\r\n        const matrix = node.getWorldMatrix();\r\n        if (!matrix.equalsWithEpsilon(Matrix.IdentityReadOnly, Epsilon)) {\r\n            return false;\r\n        }\r\n    } else {\r\n        const matrix = node.getWorldMatrix().multiplyToRef(ConvertHandednessMatrix, TmpVectors.Matrix[0]);\r\n        if (!matrix.equalsWithEpsilon(Matrix.IdentityReadOnly, Epsilon)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Geometry\r\n    if (node instanceof AbstractMesh && node.geometry) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n","/* eslint-disable jsdoc/require-jsdoc */\r\nimport type { INode } from \"babylonjs-gltf2interface\";\r\nimport { AccessorType, MeshPrimitiveMode } from \"babylonjs-gltf2interface\";\r\nimport type { FloatArray, DataArray, IndicesArray } from \"core/types\";\r\nimport type { Vector4 } from \"core/Maths/math.vector\";\r\nimport { Quaternion, TmpVectors, Matrix, Vector3 } from \"core/Maths/math.vector\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { EnumerateFloatValues } from \"core/Buffers/bufferUtils\";\r\nimport type { Node } from \"core/node\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { TargetCamera } from \"core/Cameras/targetCamera\";\r\nimport type { ShadowLight } from \"core/Lights/shadowLight\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { ConvertHandednessMatrix } from \"../../exportUtils\";\r\n\r\n// Default values for comparison.\r\nexport const DefaultTranslation = Vector3.Zero();\r\nexport const DefaultRotation = Quaternion.Identity();\r\nexport const DefaultScale = Vector3.One();\r\nconst DefaultLoaderCameraParentScaleLh = new Vector3(-1, 1, 1);\r\n\r\n/**\r\n * Get the information necessary for enumerating a vertex buffer.\r\n * @param vertexBuffer the vertex buffer to enumerate\r\n * @param meshes the meshes that use the vertex buffer\r\n * @returns the information necessary to enumerate the vertex buffer\r\n */\r\nexport function GetVertexBufferInfo(vertexBuffer: VertexBuffer, meshes: AbstractMesh[]) {\r\n    const { byteOffset, byteStride, type, normalized } = vertexBuffer;\r\n    const componentCount = vertexBuffer.getSize();\r\n    const totalVertices = meshes.reduce((max, current) => {\r\n        return current.getTotalVertices() > max ? current.getTotalVertices() : max;\r\n    }, -Number.MAX_VALUE); // Get the max total vertices count, to ensure we capture the full range of vertex data used by the meshes.\r\n    const count = totalVertices * componentCount;\r\n    const kind = vertexBuffer.getKind();\r\n\r\n    return { byteOffset, byteStride, componentCount, type, count, normalized, totalVertices, kind };\r\n}\r\n\r\nexport function GetAccessorElementCount(accessorType: AccessorType): number {\r\n    switch (accessorType) {\r\n        case AccessorType.MAT2:\r\n            return 4;\r\n        case AccessorType.MAT3:\r\n            return 9;\r\n        case AccessorType.MAT4:\r\n            return 16;\r\n        case AccessorType.SCALAR:\r\n            return 1;\r\n        case AccessorType.VEC2:\r\n            return 2;\r\n        case AccessorType.VEC3:\r\n            return 3;\r\n        case AccessorType.VEC4:\r\n            return 4;\r\n    }\r\n}\r\n\r\nexport function FloatsNeed16BitInteger(floatArray: FloatArray): boolean {\r\n    return floatArray.some((value) => value >= 256);\r\n}\r\n\r\nexport function IsStandardVertexAttribute(type: string): boolean {\r\n    switch (type) {\r\n        case VertexBuffer.PositionKind:\r\n        case VertexBuffer.NormalKind:\r\n        case VertexBuffer.TangentKind:\r\n        case VertexBuffer.ColorKind:\r\n        case VertexBuffer.MatricesIndicesKind:\r\n        case VertexBuffer.MatricesIndicesExtraKind:\r\n        case VertexBuffer.MatricesWeightsKind:\r\n        case VertexBuffer.MatricesWeightsExtraKind:\r\n        case VertexBuffer.UVKind:\r\n        case VertexBuffer.UV2Kind:\r\n        case VertexBuffer.UV3Kind:\r\n        case VertexBuffer.UV4Kind:\r\n        case VertexBuffer.UV5Kind:\r\n        case VertexBuffer.UV6Kind:\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function GetAccessorType(kind: string, hasVertexColorAlpha: boolean): AccessorType {\r\n    if (kind == VertexBuffer.ColorKind) {\r\n        return hasVertexColorAlpha ? AccessorType.VEC4 : AccessorType.VEC3;\r\n    }\r\n\r\n    switch (kind) {\r\n        case VertexBuffer.PositionKind:\r\n        case VertexBuffer.NormalKind:\r\n            return AccessorType.VEC3;\r\n        case VertexBuffer.TangentKind:\r\n        case VertexBuffer.MatricesIndicesKind:\r\n        case VertexBuffer.MatricesIndicesExtraKind:\r\n        case VertexBuffer.MatricesWeightsKind:\r\n        case VertexBuffer.MatricesWeightsExtraKind:\r\n            return AccessorType.VEC4;\r\n        case VertexBuffer.UVKind:\r\n        case VertexBuffer.UV2Kind:\r\n        case VertexBuffer.UV3Kind:\r\n        case VertexBuffer.UV4Kind:\r\n        case VertexBuffer.UV5Kind:\r\n        case VertexBuffer.UV6Kind:\r\n            return AccessorType.VEC2;\r\n    }\r\n\r\n    throw new Error(`Unknown kind ${kind}`);\r\n}\r\n\r\nexport function GetAttributeType(kind: string): string {\r\n    switch (kind) {\r\n        case VertexBuffer.PositionKind:\r\n            return \"POSITION\";\r\n        case VertexBuffer.NormalKind:\r\n            return \"NORMAL\";\r\n        case VertexBuffer.TangentKind:\r\n            return \"TANGENT\";\r\n        case VertexBuffer.ColorKind:\r\n            return \"COLOR_0\";\r\n        case VertexBuffer.UVKind:\r\n            return \"TEXCOORD_0\";\r\n        case VertexBuffer.UV2Kind:\r\n            return \"TEXCOORD_1\";\r\n        case VertexBuffer.UV3Kind:\r\n            return \"TEXCOORD_2\";\r\n        case VertexBuffer.UV4Kind:\r\n            return \"TEXCOORD_3\";\r\n        case VertexBuffer.UV5Kind:\r\n            return \"TEXCOORD_4\";\r\n        case VertexBuffer.UV6Kind:\r\n            return \"TEXCOORD_5\";\r\n        case VertexBuffer.MatricesIndicesKind:\r\n            return \"JOINTS_0\";\r\n        case VertexBuffer.MatricesIndicesExtraKind:\r\n            return \"JOINTS_1\";\r\n        case VertexBuffer.MatricesWeightsKind:\r\n            return \"WEIGHTS_0\";\r\n        case VertexBuffer.MatricesWeightsExtraKind:\r\n            return \"WEIGHTS_1\";\r\n    }\r\n\r\n    throw new Error(`Unknown kind: ${kind}`);\r\n}\r\n\r\nexport function GetPrimitiveMode(fillMode: number): MeshPrimitiveMode {\r\n    switch (fillMode) {\r\n        case Material.TriangleFillMode:\r\n            return MeshPrimitiveMode.TRIANGLES;\r\n        case Material.TriangleStripDrawMode:\r\n            return MeshPrimitiveMode.TRIANGLE_STRIP;\r\n        case Material.TriangleFanDrawMode:\r\n            return MeshPrimitiveMode.TRIANGLE_FAN;\r\n        case Material.PointListDrawMode:\r\n        case Material.PointFillMode:\r\n            return MeshPrimitiveMode.POINTS;\r\n        case Material.LineLoopDrawMode:\r\n            return MeshPrimitiveMode.LINE_LOOP;\r\n        case Material.LineListDrawMode:\r\n            return MeshPrimitiveMode.LINES;\r\n        case Material.LineStripDrawMode:\r\n            return MeshPrimitiveMode.LINE_STRIP;\r\n    }\r\n\r\n    throw new Error(`Unknown fill mode: ${fillMode}`);\r\n}\r\n\r\nexport function IsTriangleFillMode(fillMode: number): boolean {\r\n    switch (fillMode) {\r\n        case Material.TriangleFillMode:\r\n        case Material.TriangleStripDrawMode:\r\n        case Material.TriangleFanDrawMode:\r\n            return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function NormalizeTangent(tangent: Vector4 | Vector3) {\r\n    const length = Math.sqrt(tangent.x * tangent.x + tangent.y * tangent.y + tangent.z * tangent.z);\r\n    if (length > 0) {\r\n        tangent.x /= length;\r\n        tangent.y /= length;\r\n        tangent.z /= length;\r\n    }\r\n}\r\n\r\nexport function ConvertToRightHandedPosition(value: Vector3): Vector3 {\r\n    value.x *= -1;\r\n    return value;\r\n}\r\n\r\n/** @internal */\r\nexport function ConvertToRightHandedTransformMatrix(matrix: Matrix): Matrix {\r\n    ConvertHandednessMatrix.invertToRef(TmpVectors.Matrix[0]).multiplyToRef(matrix, matrix).multiplyToRef(ConvertHandednessMatrix, matrix);\r\n    return matrix;\r\n}\r\n\r\n/**\r\n * Converts, in-place, a left-handed quaternion to a right-handed quaternion via a change of basis.\r\n * @param value the unit quaternion to convert\r\n * @returns the converted quaternion\r\n */\r\nexport function ConvertToRightHandedRotation(value: Quaternion): Quaternion {\r\n    /**\r\n     * This is the simplified version of the following equation:\r\n     *    q' = to_quaternion(M * to_matrix(q) * M^-1)\r\n     * where M is the conversion matrix `convertHandednessMatrix`,\r\n     * q is the input quaternion, and q' is the converted quaternion.\r\n     * Reference: https://d3cw3dd2w32x2b.cloudfront.net/wp-content/uploads/2015/01/matrix-to-quat.pdf\r\n     */\r\n    if (value.x * value.x + value.y * value.y > 0.5) {\r\n        const absX = Math.abs(value.x);\r\n        const absY = Math.abs(value.y);\r\n        if (absX > absY) {\r\n            const sign = Math.sign(value.x);\r\n            value.x = absX;\r\n            value.y *= -sign;\r\n            value.z *= -sign;\r\n            value.w *= sign;\r\n        } else {\r\n            const sign = Math.sign(value.y);\r\n            value.x *= -sign;\r\n            value.y = absY;\r\n            value.z *= sign;\r\n            value.w *= -sign;\r\n        }\r\n    } else {\r\n        const absZ = Math.abs(value.z);\r\n        const absW = Math.abs(value.w);\r\n        if (absZ > absW) {\r\n            const sign = Math.sign(value.z);\r\n            value.x *= -sign;\r\n            value.y *= sign;\r\n            value.z = absZ;\r\n            value.w *= -sign;\r\n        } else {\r\n            const sign = Math.sign(value.w);\r\n            value.x *= sign;\r\n            value.y *= -sign;\r\n            value.z *= -sign;\r\n            value.w = absW;\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/**\r\n * Pre-multiplies a 180-degree Y rotation to the quaternion, in order to match glTF's flipped forward direction for cameras.\r\n * @param rotation Target camera rotation.\r\n */\r\nexport function Rotate180Y(rotation: Quaternion): void {\r\n    // Simplified from: rotation * (0, 1, 0, 0).\r\n    rotation.copyFromFloats(-rotation.z, rotation.w, rotation.x, -rotation.y);\r\n}\r\n\r\n/**\r\n * Collapses GLTF parent and node into a single node, ignoring scaling.\r\n * This is useful for removing nodes that were added by the GLTF importer.\r\n * @param node Original GLTF node (Light or Camera).\r\n * @param parentNode Target parent node.\r\n */\r\nexport function CollapseChildIntoParent(node: INode, parentNode: INode): void {\r\n    const parentTranslation = Vector3.FromArrayToRef(parentNode.translation || [0, 0, 0], 0, TmpVectors.Vector3[0]);\r\n    const parentRotation = Quaternion.FromArrayToRef(parentNode.rotation || [0, 0, 0, 1], 0, TmpVectors.Quaternion[0]);\r\n    const parentMatrix = Matrix.ComposeToRef(DefaultScale, parentRotation, parentTranslation, TmpVectors.Matrix[0]);\r\n\r\n    const translation = Vector3.FromArrayToRef(node.translation || [0, 0, 0], 0, TmpVectors.Vector3[2]);\r\n    const rotation = Quaternion.FromArrayToRef(node.rotation || [0, 0, 0, 1], 0, TmpVectors.Quaternion[1]);\r\n    const matrix = Matrix.ComposeToRef(DefaultScale, rotation, translation, TmpVectors.Matrix[1]);\r\n\r\n    parentMatrix.multiplyToRef(matrix, matrix);\r\n    matrix.decompose(undefined, parentRotation, parentTranslation);\r\n\r\n    if (parentTranslation.equalsWithEpsilon(DefaultTranslation, Epsilon)) {\r\n        delete parentNode.translation;\r\n    } else {\r\n        parentNode.translation = parentTranslation.asArray();\r\n    }\r\n\r\n    if (parentRotation.equalsWithEpsilon(DefaultRotation, Epsilon)) {\r\n        delete parentNode.rotation;\r\n    } else {\r\n        parentNode.rotation = parentRotation.asArray();\r\n    }\r\n\r\n    if (parentNode.scale) {\r\n        delete parentNode.scale;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks whether a camera or light node is candidate for collapsing with its parent node.\r\n * This is useful for roundtrips, as the glTF Importer parents a new node to\r\n * lights and cameras to store their original transformation information.\r\n * @param babylonNode Babylon light or camera node.\r\n * @param parentBabylonNode Target Babylon parent node.\r\n * @returns True if the two nodes can be merged, false otherwise.\r\n */\r\nexport function IsChildCollapsible(babylonNode: ShadowLight | TargetCamera, parentBabylonNode: Node): boolean {\r\n    if (!(parentBabylonNode instanceof TransformNode)) {\r\n        return false;\r\n    }\r\n\r\n    // Verify child is the only descendant\r\n    const isOnlyDescendant = parentBabylonNode.getChildren().length === 1 && babylonNode.getChildren().length === 0 && babylonNode.parent === parentBabylonNode;\r\n    if (!isOnlyDescendant) {\r\n        return false;\r\n    }\r\n\r\n    // Verify parent has the expected scaling, determined by the node type and scene's coordinate system.\r\n    const scene = babylonNode.getScene();\r\n    const expectedScale = babylonNode instanceof TargetCamera && !scene.useRightHandedSystem ? DefaultLoaderCameraParentScaleLh : DefaultScale;\r\n\r\n    if (!parentBabylonNode.scaling.equalsWithEpsilon(expectedScale, Epsilon)) {\r\n        Logger.Warn(`Cannot collapse node ${babylonNode.name} into parent node ${parentBabylonNode.name} with modified scaling.`);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Converts an IndicesArray into either Uint32Array or Uint16Array, only copying if the data is number[].\r\n * @param indices input array to be converted\r\n * @param start starting index to copy from\r\n * @param count number of indices to copy\r\n * @returns a Uint32Array or Uint16Array\r\n * @internal\r\n */\r\nexport function IndicesArrayToTypedArray(indices: IndicesArray, start: number, count: number, is32Bits: boolean): Uint32Array | Uint16Array {\r\n    if (indices instanceof Uint16Array || indices instanceof Uint32Array) {\r\n        return indices;\r\n    }\r\n\r\n    // If Int32Array, cast the indices (which are all positive) to Uint32Array\r\n    if (indices instanceof Int32Array) {\r\n        return new Uint32Array(indices.buffer, indices.byteOffset, indices.length);\r\n    }\r\n\r\n    const subarray = indices.slice(start, start + count);\r\n    return is32Bits ? new Uint32Array(subarray) : new Uint16Array(subarray);\r\n}\r\n\r\nexport function DataArrayToUint8Array(data: DataArray): Uint8Array {\r\n    if (data instanceof Array) {\r\n        const floatData = new Float32Array(data);\r\n        return new Uint8Array(floatData.buffer, floatData.byteOffset, floatData.byteLength);\r\n    }\r\n\r\n    return ArrayBuffer.isView(data) ? new Uint8Array(data.buffer, data.byteOffset, data.byteLength) : new Uint8Array(data);\r\n}\r\n\r\nexport function GetMinMax(data: DataArray, vertexBuffer: VertexBuffer, start: number, count: number): { min: number[]; max: number[] } {\r\n    const { byteOffset, byteStride, type, normalized } = vertexBuffer;\r\n    const size = vertexBuffer.getSize();\r\n    const min = new Array<number>(size).fill(Infinity);\r\n    const max = new Array<number>(size).fill(-Infinity);\r\n    EnumerateFloatValues(data, byteOffset + start * byteStride, byteStride, size, type, count * size, normalized, (values) => {\r\n        for (let i = 0; i < size; i++) {\r\n            min[i] = Math.min(min[i], values[i]);\r\n            max[i] = Math.max(max[i], values[i]);\r\n        }\r\n    });\r\n\r\n    return { min, max };\r\n}\r\n\r\n/**\r\n * Removes, in-place, object properties which have the same value as the default value.\r\n * Useful for avoiding unnecessary properties in the glTF JSON.\r\n * @param object the object to omit default values from\r\n * @param defaultValues a partial object with default values\r\n * @returns object with default values omitted\r\n */\r\nexport function OmitDefaultValues<T extends object>(object: T, defaultValues: Partial<T>): T {\r\n    for (const [key, value] of Object.entries(object)) {\r\n        const defaultValue = defaultValues[key as keyof T];\r\n        if ((Array.isArray(value) && Array.isArray(defaultValue) && AreArraysEqual(value, defaultValue)) || value === defaultValue) {\r\n            delete object[key as keyof T];\r\n        }\r\n    }\r\n    return object;\r\n}\r\n\r\nfunction AreArraysEqual(array1: unknown[], array2: unknown[]): boolean {\r\n    return array1.length === array2.length && array1.every((val, i) => val === array2[i]);\r\n}\r\n","/* eslint-disable @typescript-eslint/naming-convention */\r\n/* eslint-disable babylonjs/available */\r\nimport type { TypedArray } from \"core/types\";\r\n\r\nconst TypedArrayToWriteMethod = new Map<Function, (dataView: DataView, byteOffset: number, value: number) => void>([\r\n    [Int8Array, (d, b, v) => d.setInt8(b, v)],\r\n    [Uint8Array, (dv, bo, v) => dv.setUint8(bo, v)],\r\n    [Uint8ClampedArray, (dv, bo, v) => dv.setUint8(bo, v)],\r\n    [Int16Array, (dv, bo, v) => dv.setInt16(bo, v, true)],\r\n    [Uint16Array, (dv, bo, v) => dv.setUint16(bo, v, true)],\r\n    [Int32Array, (dv, bo, v) => dv.setInt32(bo, v, true)],\r\n    [Uint32Array, (dv, bo, v) => dv.setUint32(bo, v, true)],\r\n    [Float32Array, (dv, bo, v) => dv.setFloat32(bo, v, true)],\r\n    [Float64Array, (dv, bo, v) => dv.setFloat64(bo, v, true)],\r\n]);\r\n\r\n/** @internal */\r\nexport class DataWriter {\r\n    private _data: Uint8Array;\r\n    private _dataView: DataView;\r\n    private _byteOffset: number;\r\n\r\n    public writeTypedArray(value: Exclude<TypedArray, BigInt64Array | BigUint64Array>): void {\r\n        this._checkGrowBuffer(value.byteLength);\r\n        const setMethod = TypedArrayToWriteMethod.get(value.constructor)!;\r\n        for (let i = 0; i < value.length; i++) {\r\n            setMethod(this._dataView, this._byteOffset, value[i]);\r\n            this._byteOffset += value.BYTES_PER_ELEMENT;\r\n        }\r\n    }\r\n\r\n    public constructor(byteLength: number) {\r\n        this._data = new Uint8Array(byteLength);\r\n        this._dataView = new DataView(this._data.buffer);\r\n        this._byteOffset = 0;\r\n    }\r\n\r\n    public get byteOffset(): number {\r\n        return this._byteOffset;\r\n    }\r\n\r\n    public getOutputData(): Uint8Array {\r\n        return new Uint8Array(this._data.buffer, 0, this._byteOffset);\r\n    }\r\n\r\n    public writeUInt8(value: number): void {\r\n        this._checkGrowBuffer(1);\r\n        this._dataView.setUint8(this._byteOffset, value);\r\n        this._byteOffset++;\r\n    }\r\n\r\n    public writeInt8(value: number): void {\r\n        this._checkGrowBuffer(1);\r\n        this._dataView.setInt8(this._byteOffset, value);\r\n        this._byteOffset++;\r\n    }\r\n\r\n    public writeInt16(entry: number): void {\r\n        this._checkGrowBuffer(2);\r\n        this._dataView.setInt16(this._byteOffset, entry, true);\r\n        this._byteOffset += 2;\r\n    }\r\n\r\n    public writeUInt16(value: number): void {\r\n        this._checkGrowBuffer(2);\r\n        this._dataView.setUint16(this._byteOffset, value, true);\r\n        this._byteOffset += 2;\r\n    }\r\n\r\n    public writeInt32(entry: number): void {\r\n        this._checkGrowBuffer(4);\r\n        this._dataView.setInt32(this._byteOffset, entry, true);\r\n        this._byteOffset += 4;\r\n    }\r\n\r\n    public writeUInt32(value: number): void {\r\n        this._checkGrowBuffer(4);\r\n        this._dataView.setUint32(this._byteOffset, value, true);\r\n        this._byteOffset += 4;\r\n    }\r\n\r\n    public writeFloat32(value: number): void {\r\n        this._checkGrowBuffer(4);\r\n        this._dataView.setFloat32(this._byteOffset, value, true);\r\n        this._byteOffset += 4;\r\n    }\r\n\r\n    public writeFloat64(value: number): void {\r\n        this._checkGrowBuffer(8);\r\n        this._dataView.setFloat64(this._byteOffset, value, true);\r\n        this._byteOffset += 8;\r\n    }\r\n\r\n    private _checkGrowBuffer(byteLength: number): void {\r\n        const newByteLength = this.byteOffset + byteLength;\r\n        if (newByteLength > this._data.byteLength) {\r\n            const newData = new Uint8Array(newByteLength * 2);\r\n            newData.set(this._data);\r\n            this._data = newData;\r\n            this._dataView = new DataView(this._data.buffer);\r\n        }\r\n    }\r\n}\r\n","import type { TypedArray } from \"core/types\";\nimport type { AccessorComponentType, AccessorType, IAccessor, IBufferView } from \"babylonjs-gltf2interface\";\nimport { DataWriter } from \"./dataWriter\";\n\ntype TypedArrayForglTF = Exclude<TypedArray, Float64Array | BigInt64Array | BigUint64Array>;\n\ninterface IPropertyWithBufferView {\n    bufferView?: number;\n}\n\nfunction GetHighestByteAlignment(byteLength: number): number {\n    if (byteLength % 4 === 0) {\n        return 4;\n    }\n    if (byteLength % 2 === 0) {\n        return 2;\n    }\n    return 1;\n}\n\n/**\n * Utility class to centralize the management of binary data, bufferViews, and the objects that reference them.\n * @internal\n */\nexport class BufferManager {\n    /**\n     * Maps a bufferView to its data\n     */\n    private _bufferViewToData: Map<IBufferView, TypedArrayForglTF> = new Map<IBufferView, TypedArrayForglTF>();\n\n    /**\n     * Maps a bufferView to glTF objects that reference it via a \"bufferView\" property (e.g. accessors, images)\n     */\n    private _bufferViewToProperties: Map<IBufferView, IPropertyWithBufferView[]> = new Map<IBufferView, IPropertyWithBufferView[]>();\n\n    /**\n     * Maps an accessor to its bufferView\n     */\n    private _accessorToBufferView: Map<IAccessor, IBufferView> = new Map<IAccessor, IBufferView>();\n\n    /**\n     * Generates a binary buffer from the stored bufferViews. Also populates the bufferViews list.\n     * @param bufferViews The list of bufferViews to be populated while writing the binary\n     * @returns The binary buffer\n     */\n    public generateBinary(bufferViews: IBufferView[]): Uint8Array {\n        // Construct a DataWriter with the total byte length to prevent resizing\n        let totalByteLength = 0;\n        this._bufferViewToData.forEach((data) => {\n            totalByteLength += data.byteLength;\n        });\n        const dataWriter = new DataWriter(totalByteLength);\n\n        // Order the bufferViews in descending order of their alignment requirements\n        const orderedBufferViews = Array.from(this._bufferViewToData.keys()).sort((a, b) => GetHighestByteAlignment(b.byteLength) - GetHighestByteAlignment(a.byteLength));\n\n        // Fill in the bufferViews list and missing bufferView index references while writing the binary\n        for (const bufferView of orderedBufferViews) {\n            bufferView.byteOffset = dataWriter.byteOffset;\n            bufferViews.push(bufferView);\n\n            const bufferViewIndex = bufferViews.length - 1;\n            const properties = this.getPropertiesWithBufferView(bufferView);\n            for (const object of properties) {\n                object.bufferView = bufferViewIndex;\n            }\n\n            dataWriter.writeTypedArray(this._bufferViewToData.get(bufferView)!);\n\n            this._bufferViewToData.delete(bufferView); // Try to free up memory ASAP\n        }\n\n        return dataWriter.getOutputData();\n    }\n\n    /**\n     * Creates a buffer view based on the supplied arguments\n     * @param data a TypedArray to create the bufferView for\n     * @param byteStride byte distance between consecutive elements\n     * @returns bufferView for glTF\n     */\n    public createBufferView(data: TypedArrayForglTF, byteStride?: number): IBufferView {\n        const bufferView: IBufferView = {\n            buffer: 0,\n            byteOffset: undefined, // byteOffset will be set later, when we write the binary and decide bufferView ordering\n            byteLength: data.byteLength,\n            byteStride: byteStride,\n        };\n        this._bufferViewToData.set(bufferView, data);\n        return bufferView;\n    }\n\n    /**\n     * Creates an accessor based on the supplied arguments and assigns it to the bufferView\n     * @param bufferView The glTF bufferView referenced by this accessor\n     * @param type The type of the accessor\n     * @param componentType The datatype of components in the attribute\n     * @param count The number of attributes referenced by this accessor\n     * @param byteOffset The offset relative to the start of the bufferView in bytes\n     * @param minMax Minimum and maximum value of each component in this attribute\n     * @param normalized Specifies whether integer data values are normalized before usage\n     * @returns accessor for glTF\n     */\n    public createAccessor(\n        bufferView: IBufferView,\n        type: AccessorType,\n        componentType: AccessorComponentType,\n        count: number,\n        byteOffset?: number,\n        minMax?: { min: number[]; max: number[] },\n        normalized?: boolean\n    ): IAccessor {\n        this._verifyBufferView(bufferView);\n        const accessor: IAccessor = {\n            bufferView: undefined, // bufferView will be set to a real index later, once we write the binary and decide bufferView ordering\n            componentType: componentType,\n            count: count,\n            type: type,\n            min: minMax?.min,\n            max: minMax?.max,\n            normalized: normalized,\n            byteOffset: byteOffset,\n        };\n        this.setBufferView(accessor, bufferView);\n        this._accessorToBufferView.set(accessor, bufferView);\n        return accessor;\n    }\n\n    /**\n     * Assigns a bufferView to a glTF object that references it\n     * @param object The glTF object\n     * @param bufferView The bufferView to assign\n     */\n    public setBufferView(object: IPropertyWithBufferView, bufferView: IBufferView) {\n        this._verifyBufferView(bufferView);\n        const properties = this.getPropertiesWithBufferView(bufferView);\n        properties.push(object);\n    }\n\n    /**\n     * Removes buffer view from the binary data, as well as from all its known references\n     * @param bufferView the bufferView to remove\n     */\n    public removeBufferView(bufferView: IBufferView): void {\n        const properties = this.getPropertiesWithBufferView(bufferView);\n        for (const object of properties) {\n            if (object.bufferView !== undefined) {\n                delete object.bufferView;\n            }\n        }\n\n        this._bufferViewToData.delete(bufferView);\n        this._bufferViewToProperties.delete(bufferView);\n        this._accessorToBufferView.forEach((bv, accessor) => {\n            if (bv === bufferView) {\n                // Additionally, remove byteOffset from accessor referencing this bufferView\n                if (accessor.byteOffset !== undefined) {\n                    delete accessor.byteOffset;\n                }\n                this._accessorToBufferView.delete(accessor);\n            }\n        });\n    }\n\n    public getBufferView(accessor: IAccessor): IBufferView {\n        const bufferView = this._accessorToBufferView.get(accessor);\n        this._verifyBufferView(bufferView);\n        return bufferView!;\n    }\n\n    public getPropertiesWithBufferView(bufferView: IBufferView): IPropertyWithBufferView[] {\n        this._verifyBufferView(bufferView);\n        this._bufferViewToProperties.set(bufferView, this._bufferViewToProperties.get(bufferView) ?? []);\n        return this._bufferViewToProperties.get(bufferView)!;\n    }\n\n    public getData(bufferView: IBufferView): TypedArrayForglTF {\n        this._verifyBufferView(bufferView);\n        return this._bufferViewToData.get(bufferView)!;\n    }\n\n    private _verifyBufferView(bufferView?: IBufferView): void {\n        if (bufferView === undefined || !this._bufferViewToData.has(bufferView)) {\n            throw new Error(`BufferView ${bufferView} not found in BufferManager.`);\n        }\n    }\n}\n","import type { IAnimation, INode, IBufferView, IAccessor, IAnimationSampler, IAnimationChannel } from \"babylonjs-gltf2interface\";\r\nimport { AnimationSamplerInterpolation, AnimationChannelTargetPath, AccessorType, AccessorComponentType } from \"babylonjs-gltf2interface\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3, Quaternion } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport type { IAnimationKey } from \"core/Animations/animationKey\";\r\nimport { AnimationKeyInterpolation } from \"core/Animations/animationKey\";\r\n\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { BufferManager } from \"./bufferManager\";\r\nimport { GetAccessorElementCount, ConvertToRightHandedPosition, Rotate180Y, ConvertToRightHandedRotation } from \"./glTFUtilities\";\r\n\r\n/**\r\n * @internal\r\n * Interface to store animation data.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _IAnimationData {\r\n    /**\r\n     * Keyframe data.\r\n     */\r\n    inputs: number[];\r\n    /**\r\n     * Value data.\r\n     */\r\n    outputs: number[][];\r\n    /**\r\n     * Animation interpolation data.\r\n     */\r\n    samplerInterpolation: AnimationSamplerInterpolation;\r\n    /**\r\n     * Minimum keyframe value.\r\n     */\r\n    inputsMin: number;\r\n    /**\r\n     * Maximum keyframe value.\r\n     */\r\n    inputsMax: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _IAnimationInfo {\r\n    /**\r\n     * The target channel for the animation\r\n     */\r\n    animationChannelTargetPath: AnimationChannelTargetPath;\r\n    /**\r\n     * The glTF accessor type for the data.\r\n     */\r\n    dataAccessorType: AccessorType.VEC3 | AccessorType.VEC4 | AccessorType.SCALAR;\r\n    /**\r\n     * Specifies if quaternions should be used.\r\n     */\r\n    useQuaternion: boolean;\r\n}\r\n\r\n/**\r\n * @internal\r\n * Enum for handling in tangent and out tangent.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nenum _TangentType {\r\n    /**\r\n     * Specifies that input tangents are used.\r\n     */\r\n    INTANGENT,\r\n    /**\r\n     * Specifies that output tangents are used.\r\n     */\r\n    OUTTANGENT,\r\n}\r\n\r\n/**\r\n * @internal\r\n * Utility class for generating glTF animation data from BabylonJS.\r\n */\r\nexport class _GLTFAnimation {\r\n    /**\r\n     * Determine if a node is transformable - ie has properties it should be part of animation of transformation.\r\n     * @param babylonNode the node to test\r\n     * @returns true if can be animated, false otherwise. False if the parameter is null or undefined.\r\n     */\r\n    private static _IsTransformable(babylonNode: Node): boolean {\r\n        return babylonNode && (babylonNode instanceof TransformNode || babylonNode instanceof Camera || babylonNode instanceof Light);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     *\r\n     * Creates glTF channel animation from BabylonJS animation.\r\n     * @param babylonTransformNode - BabylonJS mesh.\r\n     * @param animation - animation.\r\n     * @param animationChannelTargetPath - The target animation channel.\r\n     * @param useQuaternion - Specifies if quaternions are used.\r\n     * @returns nullable IAnimationData\r\n     */\r\n    public static _CreateNodeAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        useQuaternion: boolean,\r\n        animationSampleRate: number\r\n    ): Nullable<_IAnimationData> {\r\n        if (this._IsTransformable(babylonTransformNode)) {\r\n            const inputs: number[] = [];\r\n            const outputs: number[][] = [];\r\n            const keyFrames = animation.getKeys();\r\n            const minMaxKeyFrames = _GLTFAnimation._CalculateMinMaxKeyFrames(keyFrames);\r\n            const interpolationOrBake = _GLTFAnimation._DeduceInterpolation(keyFrames, animationChannelTargetPath, useQuaternion);\r\n\r\n            const interpolation = interpolationOrBake.interpolationType;\r\n            const shouldBakeAnimation = interpolationOrBake.shouldBakeAnimation;\r\n\r\n            if (shouldBakeAnimation) {\r\n                _GLTFAnimation._CreateBakedAnimation(\r\n                    babylonTransformNode,\r\n                    animation,\r\n                    animationChannelTargetPath,\r\n                    minMaxKeyFrames.min,\r\n                    minMaxKeyFrames.max,\r\n                    animation.framePerSecond,\r\n                    animationSampleRate,\r\n                    inputs,\r\n                    outputs,\r\n                    minMaxKeyFrames,\r\n                    useQuaternion\r\n                );\r\n            } else {\r\n                if (interpolation === AnimationSamplerInterpolation.LINEAR || interpolation === AnimationSamplerInterpolation.STEP) {\r\n                    _GLTFAnimation._CreateLinearOrStepAnimation(babylonTransformNode, animation, animationChannelTargetPath, inputs, outputs, useQuaternion);\r\n                } else if (interpolation === AnimationSamplerInterpolation.CUBICSPLINE) {\r\n                    _GLTFAnimation._CreateCubicSplineAnimation(babylonTransformNode, animation, animationChannelTargetPath, inputs, outputs, useQuaternion);\r\n                } else {\r\n                    _GLTFAnimation._CreateBakedAnimation(\r\n                        babylonTransformNode,\r\n                        animation,\r\n                        animationChannelTargetPath,\r\n                        minMaxKeyFrames.min,\r\n                        minMaxKeyFrames.max,\r\n                        animation.framePerSecond,\r\n                        animationSampleRate,\r\n                        inputs,\r\n                        outputs,\r\n                        minMaxKeyFrames,\r\n                        useQuaternion\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (inputs.length && outputs.length) {\r\n                const result: _IAnimationData = {\r\n                    inputs: inputs,\r\n                    outputs: outputs,\r\n                    samplerInterpolation: interpolation,\r\n                    inputsMin: shouldBakeAnimation ? minMaxKeyFrames.min : Tools.FloatRound(minMaxKeyFrames.min / animation.framePerSecond),\r\n                    inputsMax: shouldBakeAnimation ? minMaxKeyFrames.max : Tools.FloatRound(minMaxKeyFrames.max / animation.framePerSecond),\r\n                };\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private static _DeduceAnimationInfo(animation: Animation): Nullable<_IAnimationInfo> {\r\n        let animationChannelTargetPath: Nullable<AnimationChannelTargetPath> = null;\r\n        let dataAccessorType = AccessorType.VEC3;\r\n        let useQuaternion: boolean = false;\r\n        const property = animation.targetProperty.split(\".\");\r\n        switch (property[0]) {\r\n            case \"scaling\": {\r\n                animationChannelTargetPath = AnimationChannelTargetPath.SCALE;\r\n                break;\r\n            }\r\n            case \"position\": {\r\n                animationChannelTargetPath = AnimationChannelTargetPath.TRANSLATION;\r\n                break;\r\n            }\r\n            case \"rotation\": {\r\n                dataAccessorType = AccessorType.VEC4;\r\n                animationChannelTargetPath = AnimationChannelTargetPath.ROTATION;\r\n                break;\r\n            }\r\n            case \"rotationQuaternion\": {\r\n                dataAccessorType = AccessorType.VEC4;\r\n                useQuaternion = true;\r\n                animationChannelTargetPath = AnimationChannelTargetPath.ROTATION;\r\n                break;\r\n            }\r\n            case \"influence\": {\r\n                dataAccessorType = AccessorType.SCALAR;\r\n                animationChannelTargetPath = AnimationChannelTargetPath.WEIGHTS;\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Error(`Unsupported animatable property ${property[0]}`);\r\n            }\r\n        }\r\n        if (animationChannelTargetPath) {\r\n            return { animationChannelTargetPath: animationChannelTargetPath, dataAccessorType: dataAccessorType, useQuaternion: useQuaternion };\r\n        } else {\r\n            Tools.Error(\"animation channel target path and data accessor type could be deduced\");\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * Create node animations from the transform node animations\r\n     * @param babylonNode\r\n     * @param runtimeGLTFAnimation\r\n     * @param idleGLTFAnimations\r\n     * @param nodeMap\r\n     * @param nodes\r\n     * @param bufferManager\r\n     * @param bufferViews\r\n     * @param accessors\r\n     * @param animationSampleRate\r\n     */\r\n    public static _CreateNodeAnimationFromNodeAnimations(\r\n        babylonNode: Node,\r\n        runtimeGLTFAnimation: IAnimation,\r\n        idleGLTFAnimations: IAnimation[],\r\n        nodeMap: Map<Node, number>,\r\n        nodes: INode[],\r\n        bufferManager: BufferManager,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        animationSampleRate: number,\r\n        useRightHanded: boolean,\r\n        shouldExportAnimation?: (animation: Animation) => boolean\r\n    ) {\r\n        let glTFAnimation: IAnimation;\r\n        if (_GLTFAnimation._IsTransformable(babylonNode)) {\r\n            if (babylonNode.animations) {\r\n                for (const animation of babylonNode.animations) {\r\n                    if (shouldExportAnimation && !shouldExportAnimation(animation)) {\r\n                        continue;\r\n                    }\r\n                    const animationInfo = _GLTFAnimation._DeduceAnimationInfo(animation);\r\n                    if (animationInfo) {\r\n                        glTFAnimation = {\r\n                            name: animation.name,\r\n                            samplers: [],\r\n                            channels: [],\r\n                        };\r\n                        _GLTFAnimation._AddAnimation(\r\n                            `${animation.name}`,\r\n                            animation.hasRunningRuntimeAnimations ? runtimeGLTFAnimation : glTFAnimation,\r\n                            babylonNode,\r\n                            animation,\r\n                            animationInfo.dataAccessorType,\r\n                            animationInfo.animationChannelTargetPath,\r\n                            nodeMap,\r\n                            bufferManager,\r\n                            bufferViews,\r\n                            accessors,\r\n                            animationInfo.useQuaternion,\r\n                            animationSampleRate,\r\n                            useRightHanded\r\n                        );\r\n                        if (glTFAnimation.samplers.length && glTFAnimation.channels.length) {\r\n                            idleGLTFAnimations.push(glTFAnimation);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * Create individual morph animations from the mesh's morph target animation tracks\r\n     * @param babylonNode\r\n     * @param runtimeGLTFAnimation\r\n     * @param idleGLTFAnimations\r\n     * @param nodeMap\r\n     * @param nodes\r\n     * @param bufferManager\r\n     * @param bufferViews\r\n     * @param accessors\r\n     * @param animationSampleRate\r\n     */\r\n    public static _CreateMorphTargetAnimationFromMorphTargetAnimations(\r\n        babylonNode: Node,\r\n        runtimeGLTFAnimation: IAnimation,\r\n        idleGLTFAnimations: IAnimation[],\r\n        nodeMap: Map<Node, number>,\r\n        nodes: INode[],\r\n        bufferManager: BufferManager,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        animationSampleRate: number,\r\n        useRightHanded: boolean,\r\n        shouldExportAnimation?: (animation: Animation) => boolean\r\n    ) {\r\n        let glTFAnimation: IAnimation;\r\n        if (babylonNode instanceof Mesh) {\r\n            const morphTargetManager = babylonNode.morphTargetManager;\r\n            if (morphTargetManager) {\r\n                for (let i = 0; i < morphTargetManager.numTargets; ++i) {\r\n                    const morphTarget = morphTargetManager.getTarget(i);\r\n                    for (const animation of morphTarget.animations) {\r\n                        if (shouldExportAnimation && !shouldExportAnimation(animation)) {\r\n                            continue;\r\n                        }\r\n                        const combinedAnimation = new Animation(\r\n                            `${animation.name}`,\r\n                            \"influence\",\r\n                            animation.framePerSecond,\r\n                            animation.dataType,\r\n                            animation.loopMode,\r\n                            animation.enableBlending\r\n                        );\r\n                        const combinedAnimationKeys: IAnimationKey[] = [];\r\n                        const animationKeys = animation.getKeys();\r\n\r\n                        for (let j = 0; j < animationKeys.length; ++j) {\r\n                            const animationKey = animationKeys[j];\r\n                            for (let k = 0; k < morphTargetManager.numTargets; ++k) {\r\n                                if (k == i) {\r\n                                    combinedAnimationKeys.push(animationKey);\r\n                                } else {\r\n                                    combinedAnimationKeys.push({ frame: animationKey.frame, value: 0 });\r\n                                }\r\n                            }\r\n                        }\r\n                        combinedAnimation.setKeys(combinedAnimationKeys);\r\n                        const animationInfo = _GLTFAnimation._DeduceAnimationInfo(combinedAnimation);\r\n                        if (animationInfo) {\r\n                            glTFAnimation = {\r\n                                name: combinedAnimation.name,\r\n                                samplers: [],\r\n                                channels: [],\r\n                            };\r\n                            _GLTFAnimation._AddAnimation(\r\n                                animation.name,\r\n                                animation.hasRunningRuntimeAnimations ? runtimeGLTFAnimation : glTFAnimation,\r\n                                babylonNode,\r\n                                combinedAnimation,\r\n                                animationInfo.dataAccessorType,\r\n                                animationInfo.animationChannelTargetPath,\r\n                                nodeMap,\r\n                                bufferManager,\r\n                                bufferViews,\r\n                                accessors,\r\n                                animationInfo.useQuaternion,\r\n                                animationSampleRate,\r\n                                useRightHanded,\r\n                                morphTargetManager.numTargets\r\n                            );\r\n                            if (glTFAnimation.samplers.length && glTFAnimation.channels.length) {\r\n                                idleGLTFAnimations.push(glTFAnimation);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Create node and morph animations from the animation groups\r\n     * @param babylonScene\r\n     * @param glTFAnimations\r\n     * @param nodeMap\r\n     * @param nodes\r\n     * @param bufferManager\r\n     * @param bufferViews\r\n     * @param accessors\r\n     * @param animationSampleRate\r\n     */\r\n    public static _CreateNodeAndMorphAnimationFromAnimationGroups(\r\n        babylonScene: Scene,\r\n        glTFAnimations: IAnimation[],\r\n        nodeMap: Map<Node, number>,\r\n        bufferManager: BufferManager,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        animationSampleRate: number,\r\n        leftHandedNodes: Set<Node>,\r\n        shouldExportAnimation?: (animation: Animation) => boolean\r\n    ) {\r\n        let glTFAnimation: IAnimation;\r\n        if (babylonScene.animationGroups) {\r\n            const animationGroups = babylonScene.animationGroups;\r\n            for (const animationGroup of animationGroups) {\r\n                const morphAnimations: Map<Mesh, Map<MorphTarget, Animation>> = new Map();\r\n                const sampleAnimations: Map<Mesh, Animation> = new Map();\r\n                const morphAnimationMeshes: Set<Mesh> = new Set();\r\n                const animationGroupFrameDiff = animationGroup.to - animationGroup.from;\r\n                glTFAnimation = {\r\n                    name: animationGroup.name,\r\n                    channels: [],\r\n                    samplers: [],\r\n                };\r\n                for (let i = 0; i < animationGroup.targetedAnimations.length; ++i) {\r\n                    const targetAnimation = animationGroup.targetedAnimations[i];\r\n                    const target = targetAnimation.target;\r\n                    const animation = targetAnimation.animation;\r\n                    if (shouldExportAnimation && !shouldExportAnimation(animation)) {\r\n                        continue;\r\n                    }\r\n\r\n                    const convertToRightHanded = leftHandedNodes.has(target);\r\n\r\n                    if (this._IsTransformable(target) || (target.length === 1 && this._IsTransformable(target[0]))) {\r\n                        const animationInfo = _GLTFAnimation._DeduceAnimationInfo(targetAnimation.animation);\r\n                        if (animationInfo) {\r\n                            const babylonTransformNode = this._IsTransformable(target) ? target : this._IsTransformable(target[0]) ? target[0] : null;\r\n                            if (babylonTransformNode) {\r\n                                _GLTFAnimation._AddAnimation(\r\n                                    `${animation.name}`,\r\n                                    glTFAnimation,\r\n                                    babylonTransformNode,\r\n                                    animation,\r\n                                    animationInfo.dataAccessorType,\r\n                                    animationInfo.animationChannelTargetPath,\r\n                                    nodeMap,\r\n                                    bufferManager,\r\n                                    bufferViews,\r\n                                    accessors,\r\n                                    animationInfo.useQuaternion,\r\n                                    animationSampleRate,\r\n                                    convertToRightHanded\r\n                                );\r\n                            }\r\n                        }\r\n                    } else if (target instanceof MorphTarget || (target.length === 1 && target[0] instanceof MorphTarget)) {\r\n                        const animationInfo = _GLTFAnimation._DeduceAnimationInfo(targetAnimation.animation);\r\n                        if (animationInfo) {\r\n                            const babylonMorphTarget = target instanceof MorphTarget ? target : (target[0] as MorphTarget);\r\n                            if (babylonMorphTarget) {\r\n                                const babylonMorphTargetManager = babylonScene.morphTargetManagers.find((morphTargetManager) => {\r\n                                    for (let j = 0; j < morphTargetManager.numTargets; ++j) {\r\n                                        if (morphTargetManager.getTarget(j) === babylonMorphTarget) {\r\n                                            return true;\r\n                                        }\r\n                                    }\r\n                                    return false;\r\n                                });\r\n                                if (babylonMorphTargetManager) {\r\n                                    const babylonMesh = babylonScene.meshes.find((mesh) => {\r\n                                        return (mesh as Mesh).morphTargetManager === babylonMorphTargetManager;\r\n                                    }) as Mesh;\r\n                                    if (babylonMesh) {\r\n                                        if (!morphAnimations.has(babylonMesh)) {\r\n                                            morphAnimations.set(babylonMesh, new Map());\r\n                                        }\r\n                                        morphAnimations.get(babylonMesh)?.set(babylonMorphTarget, animation);\r\n                                        morphAnimationMeshes.add(babylonMesh);\r\n                                        sampleAnimations.set(babylonMesh, animation);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // this is the place for the KHR_animation_pointer.\r\n                    }\r\n                }\r\n                morphAnimationMeshes.forEach((mesh) => {\r\n                    const morphTargetManager = mesh.morphTargetManager!;\r\n                    let combinedAnimationGroup: Nullable<Animation> = null;\r\n                    const animationKeys: IAnimationKey[] = [];\r\n                    const sampleAnimation = sampleAnimations.get(mesh)!;\r\n                    const sampleAnimationKeys = sampleAnimation.getKeys();\r\n                    const numAnimationKeys = sampleAnimationKeys.length;\r\n                    /*\r\n                        Due to how glTF expects morph target animation data to be formatted, we need to rearrange the individual morph target animation tracks,\r\n                        such that we have a single animation, where a given keyframe input value has successive output values for each morph target belonging to the manager.\r\n                        See: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\r\n\r\n                        We do this via constructing a new Animation track, and interleaving the frames of each morph target animation track in the current Animation Group\r\n                        We reuse the Babylon Animation data structure for ease of handling export of cubic spline animation keys, and to reuse the\r\n                        existing _GLTFAnimation.AddAnimation codepath with minimal modification, however the constructed Babylon Animation is NOT intended for use in-engine.\r\n                    */\r\n                    for (let i = 0; i < numAnimationKeys; ++i) {\r\n                        for (let j = 0; j < morphTargetManager.numTargets; ++j) {\r\n                            const morphTarget = morphTargetManager.getTarget(j);\r\n                            const animationsByMorphTarget = morphAnimations.get(mesh);\r\n                            if (animationsByMorphTarget) {\r\n                                const morphTargetAnimation = animationsByMorphTarget.get(morphTarget);\r\n                                if (morphTargetAnimation) {\r\n                                    if (!combinedAnimationGroup) {\r\n                                        combinedAnimationGroup = new Animation(\r\n                                            `${animationGroup.name}_${mesh.name}_MorphWeightAnimation`,\r\n                                            \"influence\",\r\n                                            morphTargetAnimation.framePerSecond,\r\n                                            Animation.ANIMATIONTYPE_FLOAT,\r\n                                            morphTargetAnimation.loopMode,\r\n                                            morphTargetAnimation.enableBlending\r\n                                        );\r\n                                    }\r\n                                    animationKeys.push(morphTargetAnimation.getKeys()[i]);\r\n                                } else {\r\n                                    animationKeys.push({\r\n                                        frame: animationGroup.from + (animationGroupFrameDiff / numAnimationKeys) * i,\r\n                                        value: morphTarget.influence,\r\n                                        inTangent: sampleAnimationKeys[0].inTangent ? 0 : undefined,\r\n                                        outTangent: sampleAnimationKeys[0].outTangent ? 0 : undefined,\r\n                                    });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    combinedAnimationGroup!.setKeys(animationKeys);\r\n                    const animationInfo = _GLTFAnimation._DeduceAnimationInfo(combinedAnimationGroup!);\r\n                    if (animationInfo) {\r\n                        _GLTFAnimation._AddAnimation(\r\n                            `${animationGroup.name}_${mesh.name}_MorphWeightAnimation`,\r\n                            glTFAnimation,\r\n                            mesh,\r\n                            combinedAnimationGroup!,\r\n                            animationInfo.dataAccessorType,\r\n                            animationInfo.animationChannelTargetPath,\r\n                            nodeMap,\r\n                            bufferManager,\r\n                            bufferViews,\r\n                            accessors,\r\n                            animationInfo.useQuaternion,\r\n                            animationSampleRate,\r\n                            false,\r\n                            morphTargetManager?.numTargets\r\n                        );\r\n                    }\r\n                });\r\n                if (glTFAnimation.channels.length && glTFAnimation.samplers.length) {\r\n                    glTFAnimations.push(glTFAnimation);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _AddAnimation(\r\n        name: string,\r\n        glTFAnimation: IAnimation,\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        dataAccessorType: AccessorType,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        nodeMap: Map<Node, number>,\r\n        bufferManager: BufferManager,\r\n        bufferViews: IBufferView[],\r\n        accessors: IAccessor[],\r\n        useQuaternion: boolean,\r\n        animationSampleRate: number,\r\n        convertToRightHanded: boolean,\r\n        morphAnimationChannels?: number\r\n    ) {\r\n        const animationData = _GLTFAnimation._CreateNodeAnimation(babylonTransformNode, animation, animationChannelTargetPath, useQuaternion, animationSampleRate);\r\n        let bufferView: IBufferView;\r\n        let accessor: IAccessor;\r\n        let keyframeAccessorIndex: number;\r\n        let dataAccessorIndex: number;\r\n        let animationSampler: IAnimationSampler;\r\n        let animationChannel: IAnimationChannel;\r\n\r\n        if (animationData) {\r\n            /*\r\n             * Now that we have the glTF converted morph target animation data,\r\n             * we can remove redundant input data so that we have n input frames,\r\n             * and morphAnimationChannels * n output frames\r\n             */\r\n            if (morphAnimationChannels) {\r\n                let index = 0;\r\n                let currentInput: number = 0;\r\n                const newInputs: number[] = [];\r\n                while (animationData.inputs.length > 0) {\r\n                    currentInput = animationData.inputs.shift()!;\r\n                    if (index % morphAnimationChannels == 0) {\r\n                        newInputs.push(currentInput);\r\n                    }\r\n                    index++;\r\n                }\r\n                animationData.inputs = newInputs;\r\n            }\r\n\r\n            const nodeIndex = nodeMap.get(babylonTransformNode);\r\n\r\n            // Create buffer view and accessor for key frames.\r\n            const inputData = new Float32Array(animationData.inputs);\r\n            bufferView = bufferManager.createBufferView(inputData);\r\n            accessor = bufferManager.createAccessor(bufferView, AccessorType.SCALAR, AccessorComponentType.FLOAT, animationData.inputs.length, undefined, {\r\n                min: [animationData.inputsMin],\r\n                max: [animationData.inputsMax],\r\n            });\r\n            accessors.push(accessor);\r\n            keyframeAccessorIndex = accessors.length - 1;\r\n\r\n            // Perform conversions on keyed values while also building their buffer.\r\n            const rotationQuaternion = new Quaternion();\r\n            const eulerVec3 = new Vector3();\r\n            const position = new Vector3();\r\n            const isCamera = babylonTransformNode instanceof Camera;\r\n\r\n            const elementCount = GetAccessorElementCount(dataAccessorType);\r\n            const outputData = new Float32Array(animationData.outputs.length * elementCount);\r\n            animationData.outputs.forEach(function (output: number[], index: number) {\r\n                let outputToWrite: number[] = output;\r\n                switch (animationChannelTargetPath) {\r\n                    case AnimationChannelTargetPath.TRANSLATION:\r\n                        if (convertToRightHanded) {\r\n                            Vector3.FromArrayToRef(output, 0, position);\r\n                            ConvertToRightHandedPosition(position);\r\n                            position.toArray(outputToWrite);\r\n                        }\r\n                        break;\r\n                    case AnimationChannelTargetPath.ROTATION:\r\n                        if (output.length === 4) {\r\n                            Quaternion.FromArrayToRef(output, 0, rotationQuaternion);\r\n                        } else {\r\n                            outputToWrite = new Array(4); // Will need 4, not 3, for a quaternion\r\n                            Vector3.FromArrayToRef(output, 0, eulerVec3);\r\n                            Quaternion.FromEulerVectorToRef(eulerVec3, rotationQuaternion);\r\n                        }\r\n\r\n                        if (convertToRightHanded) {\r\n                            ConvertToRightHandedRotation(rotationQuaternion);\r\n                            if (isCamera) {\r\n                                Rotate180Y(rotationQuaternion);\r\n                            }\r\n                        }\r\n\r\n                        rotationQuaternion.toArray(outputToWrite);\r\n                        break;\r\n                }\r\n                outputData.set(outputToWrite, index * elementCount);\r\n            });\r\n\r\n            // Create buffer view and accessor for keyed values.\r\n            bufferView = bufferManager.createBufferView(outputData);\r\n            accessor = bufferManager.createAccessor(bufferView, dataAccessorType, AccessorComponentType.FLOAT, animationData.outputs.length);\r\n            accessors.push(accessor);\r\n            dataAccessorIndex = accessors.length - 1;\r\n\r\n            // create sampler\r\n            animationSampler = {\r\n                interpolation: animationData.samplerInterpolation,\r\n                input: keyframeAccessorIndex,\r\n                output: dataAccessorIndex,\r\n            };\r\n            glTFAnimation.samplers.push(animationSampler);\r\n\r\n            // create channel\r\n            animationChannel = {\r\n                sampler: glTFAnimation.samplers.length - 1,\r\n                target: {\r\n                    node: nodeIndex,\r\n                    path: animationChannelTargetPath,\r\n                },\r\n            };\r\n            glTFAnimation.channels.push(animationChannel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a baked animation\r\n     * @param babylonTransformNode BabylonJS mesh\r\n     * @param animation BabylonJS animation corresponding to the BabylonJS mesh\r\n     * @param animationChannelTargetPath animation target channel\r\n     * @param minFrame minimum animation frame\r\n     * @param maxFrame maximum animation frame\r\n     * @param fps frames per second of the animation\r\n     * @param sampleRate\r\n     * @param inputs input key frames of the animation\r\n     * @param outputs output key frame data of the animation\r\n     * @param minMaxFrames\r\n     * @param minMaxFrames.min\r\n     * @param minMaxFrames.max\r\n     * @param useQuaternion specifies if quaternions should be used\r\n     */\r\n    private static _CreateBakedAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        minFrame: number,\r\n        maxFrame: number,\r\n        fps: number,\r\n        sampleRate: number,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        minMaxFrames: { min: number; max: number },\r\n        useQuaternion: boolean\r\n    ) {\r\n        let value: number | Vector3 | Quaternion;\r\n        const quaternionCache: Quaternion = Quaternion.Identity();\r\n        let previousTime: Nullable<number> = null;\r\n        let time: number;\r\n        let maxUsedFrame: Nullable<number> = null;\r\n        let currKeyFrame: Nullable<IAnimationKey> = null;\r\n        let nextKeyFrame: Nullable<IAnimationKey> = null;\r\n        let prevKeyFrame: Nullable<IAnimationKey> = null;\r\n        let endFrame: Nullable<number> = null;\r\n        minMaxFrames.min = Tools.FloatRound(minFrame / fps);\r\n\r\n        const keyFrames = animation.getKeys();\r\n\r\n        for (let i = 0, length = keyFrames.length; i < length; ++i) {\r\n            endFrame = null;\r\n            currKeyFrame = keyFrames[i];\r\n\r\n            if (i + 1 < length) {\r\n                nextKeyFrame = keyFrames[i + 1];\r\n                if ((currKeyFrame.value.equals && currKeyFrame.value.equals(nextKeyFrame.value)) || currKeyFrame.value === nextKeyFrame.value) {\r\n                    if (i === 0) {\r\n                        // set the first frame to itself\r\n                        endFrame = currKeyFrame.frame;\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    endFrame = nextKeyFrame.frame;\r\n                }\r\n            } else {\r\n                // at the last key frame\r\n                prevKeyFrame = keyFrames[i - 1];\r\n                if ((currKeyFrame.value.equals && currKeyFrame.value.equals(prevKeyFrame.value)) || currKeyFrame.value === prevKeyFrame.value) {\r\n                    continue;\r\n                } else {\r\n                    endFrame = maxFrame;\r\n                }\r\n            }\r\n            if (endFrame) {\r\n                for (let f = currKeyFrame.frame; f <= endFrame; f += sampleRate) {\r\n                    time = Tools.FloatRound(f / fps);\r\n                    if (time === previousTime) {\r\n                        continue;\r\n                    }\r\n                    previousTime = time;\r\n                    maxUsedFrame = time;\r\n                    const state = {\r\n                        key: 0,\r\n                        repeatCount: 0,\r\n                        loopMode: animation.loopMode,\r\n                    };\r\n                    value = animation._interpolate(f, state);\r\n\r\n                    _GLTFAnimation._SetInterpolatedValue(babylonTransformNode, value, time, animation, animationChannelTargetPath, quaternionCache, inputs, outputs, useQuaternion);\r\n                }\r\n            }\r\n        }\r\n        if (maxUsedFrame) {\r\n            minMaxFrames.max = maxUsedFrame;\r\n        }\r\n    }\r\n\r\n    private static _ConvertFactorToVector3OrQuaternion(\r\n        factor: number,\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        useQuaternion: boolean\r\n    ): Vector3 | Quaternion {\r\n        const basePositionRotationOrScale = _GLTFAnimation._GetBasePositionRotationOrScale(babylonTransformNode, animationChannelTargetPath, useQuaternion);\r\n        // handles single component x, y, z or w component animation by using a base property and animating over a component.\r\n        const property = animation.targetProperty.split(\".\");\r\n        const componentName = property ? property[1] : \"\"; // x, y, z, or w component\r\n        const value = useQuaternion ? Quaternion.FromArray(basePositionRotationOrScale).normalize() : Vector3.FromArray(basePositionRotationOrScale);\r\n\r\n        switch (componentName) {\r\n            case \"x\":\r\n            case \"y\":\r\n            case \"z\": {\r\n                value[componentName] = factor;\r\n                break;\r\n            }\r\n            case \"w\": {\r\n                (value as Quaternion).w = factor;\r\n                break;\r\n            }\r\n            default: {\r\n                Tools.Error(`glTFAnimation: Unsupported component name \"${componentName}\"!`);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private static _SetInterpolatedValue(\r\n        babylonTransformNode: Node,\r\n        value: number | Vector3 | Quaternion,\r\n        time: number,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        quaternionCache: Quaternion,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        useQuaternion: boolean\r\n    ) {\r\n        let cacheValue: Vector3 | Quaternion | number;\r\n        inputs.push(time);\r\n\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.WEIGHTS) {\r\n            outputs.push([value as number]);\r\n            return;\r\n        }\r\n\r\n        if (animation.dataType === Animation.ANIMATIONTYPE_FLOAT) {\r\n            value = this._ConvertFactorToVector3OrQuaternion(value as number, babylonTransformNode, animation, animationChannelTargetPath, useQuaternion);\r\n        }\r\n\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n            if (useQuaternion) {\r\n                quaternionCache = value as Quaternion;\r\n            } else {\r\n                cacheValue = value as Vector3;\r\n                Quaternion.RotationYawPitchRollToRef(cacheValue.y, cacheValue.x, cacheValue.z, quaternionCache);\r\n            }\r\n            outputs.push(quaternionCache.asArray());\r\n        } else {\r\n            // scaling and position animation\r\n            cacheValue = value as Vector3;\r\n            outputs.push(cacheValue.asArray());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates linear animation from the animation key frames\r\n     * @param babylonTransformNode BabylonJS mesh\r\n     * @param animation BabylonJS animation\r\n     * @param animationChannelTargetPath The target animation channel\r\n     * @param inputs Array to store the key frame times\r\n     * @param outputs Array to store the key frame data\r\n     * @param useQuaternion Specifies if quaternions are used in the animation\r\n     */\r\n    private static _CreateLinearOrStepAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        useQuaternion: boolean\r\n    ) {\r\n        for (const keyFrame of animation.getKeys()) {\r\n            inputs.push(keyFrame.frame / animation.framePerSecond); // keyframes in seconds.\r\n            _GLTFAnimation._AddKeyframeValue(keyFrame, animation, outputs, animationChannelTargetPath, babylonTransformNode, useQuaternion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates cubic spline animation from the animation key frames\r\n     * @param babylonTransformNode BabylonJS mesh\r\n     * @param animation BabylonJS animation\r\n     * @param animationChannelTargetPath The target animation channel\r\n     * @param inputs Array to store the key frame times\r\n     * @param outputs Array to store the key frame data\r\n     * @param useQuaternion Specifies if quaternions are used in the animation\r\n     */\r\n    private static _CreateCubicSplineAnimation(\r\n        babylonTransformNode: Node,\r\n        animation: Animation,\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        inputs: number[],\r\n        outputs: number[][],\r\n        useQuaternion: boolean\r\n    ) {\r\n        animation.getKeys().forEach(function (keyFrame) {\r\n            inputs.push(keyFrame.frame / animation.framePerSecond); // keyframes in seconds.\r\n            _GLTFAnimation._AddSplineTangent(_TangentType.INTANGENT, outputs, animationChannelTargetPath, AnimationSamplerInterpolation.CUBICSPLINE, keyFrame, useQuaternion);\r\n            _GLTFAnimation._AddKeyframeValue(keyFrame, animation, outputs, animationChannelTargetPath, babylonTransformNode, useQuaternion);\r\n\r\n            _GLTFAnimation._AddSplineTangent(_TangentType.OUTTANGENT, outputs, animationChannelTargetPath, AnimationSamplerInterpolation.CUBICSPLINE, keyFrame, useQuaternion);\r\n        });\r\n    }\r\n\r\n    private static _GetBasePositionRotationOrScale(babylonTransformNode: Node, animationChannelTargetPath: AnimationChannelTargetPath, useQuaternion: boolean) {\r\n        let basePositionRotationOrScale: number[];\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n            if (useQuaternion) {\r\n                const q = (babylonTransformNode as TransformNode).rotationQuaternion;\r\n                basePositionRotationOrScale = (q ?? Quaternion.Identity()).asArray();\r\n            } else {\r\n                const r: Vector3 = (babylonTransformNode as TransformNode).rotation;\r\n                basePositionRotationOrScale = (r ?? Vector3.Zero()).asArray();\r\n            }\r\n        } else if (animationChannelTargetPath === AnimationChannelTargetPath.TRANSLATION) {\r\n            const p: Vector3 = (babylonTransformNode as TransformNode).position;\r\n            basePositionRotationOrScale = (p ?? Vector3.Zero()).asArray();\r\n        } else {\r\n            // scale\r\n            const s: Vector3 = (babylonTransformNode as TransformNode).scaling;\r\n            basePositionRotationOrScale = (s ?? Vector3.One()).asArray();\r\n        }\r\n        return basePositionRotationOrScale;\r\n    }\r\n\r\n    /**\r\n     * Adds a key frame value\r\n     * @param keyFrame\r\n     * @param animation\r\n     * @param outputs\r\n     * @param animationChannelTargetPath\r\n     * @param babylonTransformNode\r\n     * @param useQuaternion\r\n     */\r\n    private static _AddKeyframeValue(\r\n        keyFrame: IAnimationKey,\r\n        animation: Animation,\r\n        outputs: number[][],\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        babylonTransformNode: Node,\r\n        useQuaternion: boolean\r\n    ) {\r\n        let newPositionRotationOrScale: Nullable<Vector3 | Quaternion | number>;\r\n        const animationType = animation.dataType;\r\n        if (animationType === Animation.ANIMATIONTYPE_VECTOR3) {\r\n            let value = keyFrame.value.asArray();\r\n            if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n                const array = Vector3.FromArray(value);\r\n                const rotationQuaternion = Quaternion.RotationYawPitchRoll(array.y, array.x, array.z);\r\n                value = rotationQuaternion.asArray();\r\n            }\r\n            outputs.push(value); // scale  vector.\r\n        } else if (animationType === Animation.ANIMATIONTYPE_FLOAT) {\r\n            if (animationChannelTargetPath === AnimationChannelTargetPath.WEIGHTS) {\r\n                outputs.push([keyFrame.value]);\r\n            } else {\r\n                // handles single component x, y, z or w component animation by using a base property and animating over a component.\r\n                newPositionRotationOrScale = this._ConvertFactorToVector3OrQuaternion(\r\n                    keyFrame.value as number,\r\n                    babylonTransformNode,\r\n                    animation,\r\n                    animationChannelTargetPath,\r\n                    useQuaternion\r\n                );\r\n                if (newPositionRotationOrScale) {\r\n                    if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n                        const posRotScale = useQuaternion\r\n                            ? (newPositionRotationOrScale as Quaternion)\r\n                            : Quaternion.RotationYawPitchRoll(newPositionRotationOrScale.y, newPositionRotationOrScale.x, newPositionRotationOrScale.z).normalize();\r\n                        outputs.push(posRotScale.asArray());\r\n                    }\r\n                    outputs.push(newPositionRotationOrScale.asArray());\r\n                }\r\n            }\r\n        } else if (animationType === Animation.ANIMATIONTYPE_QUATERNION) {\r\n            outputs.push((keyFrame.value as Quaternion).normalize().asArray());\r\n        } else {\r\n            Tools.Error(\"glTFAnimation: Unsupported key frame values for animation!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Determine the interpolation based on the key frames\r\n     * @param keyFrames\r\n     * @param animationChannelTargetPath\r\n     * @param useQuaternion\r\n     */\r\n    private static _DeduceInterpolation(\r\n        keyFrames: IAnimationKey[],\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        useQuaternion: boolean\r\n    ): { interpolationType: AnimationSamplerInterpolation; shouldBakeAnimation: boolean } {\r\n        let interpolationType: AnimationSamplerInterpolation | undefined;\r\n        let shouldBakeAnimation = false;\r\n        let key: IAnimationKey;\r\n\r\n        if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION && !useQuaternion) {\r\n            return { interpolationType: AnimationSamplerInterpolation.LINEAR, shouldBakeAnimation: true };\r\n        }\r\n\r\n        for (let i = 0, length = keyFrames.length; i < length; ++i) {\r\n            key = keyFrames[i];\r\n            if (key.inTangent || key.outTangent) {\r\n                if (interpolationType) {\r\n                    if (interpolationType !== AnimationSamplerInterpolation.CUBICSPLINE) {\r\n                        interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n                        shouldBakeAnimation = true;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    interpolationType = AnimationSamplerInterpolation.CUBICSPLINE;\r\n                }\r\n            } else {\r\n                if (interpolationType) {\r\n                    if (\r\n                        interpolationType === AnimationSamplerInterpolation.CUBICSPLINE ||\r\n                        (key.interpolation && key.interpolation === AnimationKeyInterpolation.STEP && interpolationType !== AnimationSamplerInterpolation.STEP)\r\n                    ) {\r\n                        interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n                        shouldBakeAnimation = true;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    if (key.interpolation && key.interpolation === AnimationKeyInterpolation.STEP) {\r\n                        interpolationType = AnimationSamplerInterpolation.STEP;\r\n                    } else {\r\n                        interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!interpolationType) {\r\n            interpolationType = AnimationSamplerInterpolation.LINEAR;\r\n        }\r\n\r\n        return { interpolationType: interpolationType, shouldBakeAnimation: shouldBakeAnimation };\r\n    }\r\n\r\n    /**\r\n     * Adds an input tangent or output tangent to the output data\r\n     * If an input tangent or output tangent is missing, it uses the zero vector or zero quaternion\r\n     * @param tangentType Specifies which type of tangent to handle (inTangent or outTangent)\r\n     * @param outputs The animation data by keyframe\r\n     * @param animationChannelTargetPath The target animation channel\r\n     * @param interpolation The interpolation type\r\n     * @param keyFrame The key frame with the animation data\r\n     * @param useQuaternion Specifies if quaternions are used\r\n     */\r\n    private static _AddSplineTangent(\r\n        tangentType: _TangentType,\r\n        outputs: number[][],\r\n        animationChannelTargetPath: AnimationChannelTargetPath,\r\n        interpolation: AnimationSamplerInterpolation,\r\n        keyFrame: IAnimationKey,\r\n        useQuaternion: boolean\r\n    ) {\r\n        let tangent: number[];\r\n        const tangentValue: Vector3 | Quaternion | number = tangentType === _TangentType.INTANGENT ? keyFrame.inTangent : keyFrame.outTangent;\r\n        if (interpolation === AnimationSamplerInterpolation.CUBICSPLINE) {\r\n            if (animationChannelTargetPath === AnimationChannelTargetPath.ROTATION) {\r\n                if (tangentValue) {\r\n                    if (useQuaternion) {\r\n                        tangent = (tangentValue as Quaternion).asArray();\r\n                    } else {\r\n                        const array = tangentValue as Vector3;\r\n                        tangent = Quaternion.RotationYawPitchRoll(array.y, array.x, array.z).asArray();\r\n                    }\r\n                } else {\r\n                    tangent = [0, 0, 0, 0];\r\n                }\r\n            } else if (animationChannelTargetPath === AnimationChannelTargetPath.WEIGHTS) {\r\n                if (tangentValue) {\r\n                    tangent = [tangentValue as number];\r\n                } else {\r\n                    tangent = [0];\r\n                }\r\n            } else {\r\n                if (tangentValue) {\r\n                    tangent = (tangentValue as Vector3).asArray();\r\n                } else {\r\n                    tangent = [0, 0, 0];\r\n                }\r\n            }\r\n\r\n            outputs.push(tangent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the minimum and maximum key frames' frame values\r\n     * @param keyFrames animation key frames\r\n     * @returns the minimum and maximum key frame value\r\n     */\r\n    private static _CalculateMinMaxKeyFrames(keyFrames: IAnimationKey[]): { min: number; max: number } {\r\n        let min: number = Infinity;\r\n        let max: number = -Infinity;\r\n        keyFrames.forEach(function (keyFrame) {\r\n            min = Math.min(min, keyFrame.frame);\r\n            max = Math.max(max, keyFrame.frame);\r\n        });\r\n\r\n        return { min: min, max: max };\r\n    }\r\n}\r\n","import type { IBufferView, IAccessor } from \"babylonjs-gltf2interface\";\r\nimport { AccessorComponentType, AccessorType } from \"babylonjs-gltf2interface\";\r\nimport type { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport type { BufferManager } from \"./bufferManager\";\r\n\r\nimport { NormalizeTangent } from \"./glTFUtilities\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Vector3, Vector4 } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n/**\r\n * Interface to store morph target information.\r\n * @internal\r\n */\r\nexport interface IMorphTargetData {\r\n    attributes: Record<string, number>;\r\n    influence: number;\r\n    name: string;\r\n}\r\n\r\nexport function BuildMorphTargetBuffers(\r\n    morphTarget: MorphTarget,\r\n    mesh: AbstractMesh,\r\n    bufferManager: BufferManager,\r\n    bufferViews: IBufferView[],\r\n    accessors: IAccessor[],\r\n    convertToRightHanded: boolean\r\n): IMorphTargetData {\r\n    const result: IMorphTargetData = {\r\n        attributes: {},\r\n        influence: morphTarget.influence,\r\n        name: morphTarget.name,\r\n    };\r\n\r\n    const geometry = mesh.geometry;\r\n    if (!geometry) {\r\n        Tools.Warn(\"Attempted to export morph target data from a mesh without geometry. This should not happen.\");\r\n        return result;\r\n    }\r\n\r\n    const flipX = convertToRightHanded ? -1 : 1;\r\n    const floatSize = 4;\r\n    const difference = Vector3.Zero();\r\n    let vertexStart = 0;\r\n    let vertexCount = 0;\r\n\r\n    if (morphTarget.hasPositions) {\r\n        const morphPositions = morphTarget.getPositions()!;\r\n        const originalPositions = geometry.getVerticesData(VertexBuffer.PositionKind); // Bypasses any instance data of mesh\r\n\r\n        if (originalPositions) {\r\n            const positionData = new Float32Array(originalPositions.length);\r\n            const min = [Infinity, Infinity, Infinity];\r\n            const max = [-Infinity, -Infinity, -Infinity];\r\n            vertexCount = originalPositions.length / 3;\r\n            vertexStart = 0;\r\n            for (let i = vertexStart; i < vertexCount; ++i) {\r\n                const originalPosition = Vector3.FromArray(originalPositions, i * 3);\r\n                const morphPosition = Vector3.FromArray(morphPositions, i * 3);\r\n                morphPosition.subtractToRef(originalPosition, difference);\r\n                difference.x *= flipX;\r\n\r\n                min[0] = Math.min(min[0], difference.x);\r\n                max[0] = Math.max(max[0], difference.x);\r\n\r\n                min[1] = Math.min(min[1], difference.y);\r\n                max[1] = Math.max(max[1], difference.y);\r\n\r\n                min[2] = Math.min(min[2], difference.z);\r\n                max[2] = Math.max(max[2], difference.z);\r\n\r\n                positionData[i * 3] = difference.x;\r\n                positionData[i * 3 + 1] = difference.y;\r\n                positionData[i * 3 + 2] = difference.z;\r\n            }\r\n\r\n            const bufferView = bufferManager.createBufferView(positionData, floatSize * 3);\r\n            const accessor = bufferManager.createAccessor(bufferView, AccessorType.VEC3, AccessorComponentType.FLOAT, morphPositions.length / 3, 0, { min, max });\r\n            accessors.push(accessor);\r\n            result.attributes[\"POSITION\"] = accessors.length - 1;\r\n        } else {\r\n            Tools.Warn(`Morph target positions for mesh ${mesh.name} were not exported. Mesh does not have position vertex data`);\r\n        }\r\n    }\r\n\r\n    if (morphTarget.hasNormals) {\r\n        const morphNormals = morphTarget.getNormals()!;\r\n        const originalNormals = geometry.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n        if (originalNormals) {\r\n            const normalData = new Float32Array(originalNormals.length);\r\n            vertexCount = originalNormals.length / 3;\r\n            vertexStart = 0;\r\n            for (let i = vertexStart; i < vertexCount; ++i) {\r\n                const originalNormal = Vector3.FromArray(originalNormals, i * 3).normalize();\r\n                const morphNormal = Vector3.FromArray(morphNormals, i * 3).normalize();\r\n                morphNormal.subtractToRef(originalNormal, difference);\r\n\r\n                normalData[i * 3] = difference.x * flipX;\r\n                normalData[i * 3 + 1] = difference.y;\r\n                normalData[i * 3 + 2] = difference.z;\r\n            }\r\n\r\n            const bufferView = bufferManager.createBufferView(normalData, floatSize * 3);\r\n            const accessor = bufferManager.createAccessor(bufferView, AccessorType.VEC3, AccessorComponentType.FLOAT, morphNormals.length / 3, 0);\r\n            accessors.push(accessor);\r\n            result.attributes[\"NORMAL\"] = accessors.length - 1;\r\n        } else {\r\n            Tools.Warn(`Morph target normals for mesh ${mesh.name} were not exported. Mesh does not have normals vertex data`);\r\n        }\r\n    }\r\n\r\n    if (morphTarget.hasTangents) {\r\n        const morphTangents = morphTarget.getTangents()!;\r\n        const originalTangents = geometry.getVerticesData(VertexBuffer.TangentKind);\r\n\r\n        if (originalTangents) {\r\n            vertexCount = originalTangents.length / 4;\r\n            const tangentData = new Float32Array(vertexCount * 3);\r\n            vertexStart = 0;\r\n            for (let i = vertexStart; i < vertexCount; ++i) {\r\n                // Only read the x, y, z components and ignore w\r\n                const originalTangent = Vector3.FromArray(originalTangents, i * 4);\r\n                NormalizeTangent(originalTangent);\r\n\r\n                // Morph target tangents omit the w component so it won't be present in the data\r\n                const morphTangent = Vector3.FromArray(morphTangents, i * 3);\r\n                NormalizeTangent(morphTangent);\r\n\r\n                morphTangent.subtractToRef(originalTangent, difference);\r\n                tangentData[i * 3] = difference.x * flipX;\r\n                tangentData[i * 3 + 1] = difference.y;\r\n                tangentData[i * 3 + 2] = difference.z;\r\n            }\r\n            const bufferView = bufferManager.createBufferView(tangentData, floatSize * 3);\r\n            const accessor = bufferManager.createAccessor(bufferView, AccessorType.VEC3, AccessorComponentType.FLOAT, vertexCount, 0);\r\n            accessors.push(accessor);\r\n            result.attributes[\"TANGENT\"] = accessors.length - 1;\r\n        } else {\r\n            Tools.Warn(`Morph target tangents for mesh ${mesh.name} were not exported. Mesh does not have tangents vertex data`);\r\n        }\r\n    }\r\n\r\n    if (morphTarget.hasColors) {\r\n        const morphColors = morphTarget.getColors()!;\r\n        const originalColors = geometry.getVerticesData(VertexBuffer.ColorKind);\r\n        const buffer = geometry.getVertexBuffer(VertexBuffer.ColorKind);\r\n\r\n        if (originalColors && buffer) {\r\n            const componentSize = buffer.getSize();\r\n\r\n            vertexCount = originalColors.length / componentSize;\r\n            const colorData = new Float32Array(vertexCount * componentSize);\r\n            vertexStart = 0;\r\n            for (let i = vertexStart; i < vertexCount; ++i) {\r\n                if (componentSize === 3) {\r\n                    const originalColor = Vector3.FromArray(originalColors, i * componentSize);\r\n                    const morphColor = Vector3.FromArray(morphColors, i * componentSize);\r\n\r\n                    morphColor.subtractToRef(originalColor, difference);\r\n                    colorData[i * 3] = difference.x;\r\n                    colorData[i * 3 + 1] = difference.y;\r\n                    colorData[i * 3 + 2] = difference.z;\r\n                } else if (componentSize === 4) {\r\n                    const difference4 = new Vector4();\r\n                    const originalColor = Vector4.FromArray(originalColors, i * componentSize);\r\n                    const morphColor = Vector4.FromArray(morphColors, i * componentSize);\r\n\r\n                    morphColor.subtractToRef(originalColor, difference4);\r\n                    colorData[i * 4] = difference4.x;\r\n                    colorData[i * 4 + 1] = difference4.y;\r\n                    colorData[i * 4 + 2] = difference4.z;\r\n                    colorData[i * 4 + 3] = difference4.w;\r\n                } else {\r\n                    Tools.Warn(`Unsupported number of components for color attribute: ${componentSize}`);\r\n                }\r\n            }\r\n            const bufferView = bufferManager.createBufferView(colorData, floatSize * componentSize);\r\n            const accessor = bufferManager.createAccessor(bufferView, componentSize === 3 ? AccessorType.VEC3 : AccessorType.VEC4, AccessorComponentType.FLOAT, vertexCount, 0);\r\n            accessors.push(accessor);\r\n            result.attributes[\"COLOR_0\"] = accessors.length - 1;\r\n        } else {\r\n            Tools.Warn(`Morph target colors for mesh ${mesh.name} were not exported. Mesh does not have colors vertex data`);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import type {\r\n    IBufferView,\r\n    IAccessor,\r\n    INode,\r\n    IScene,\r\n    IMesh,\r\n    IMaterial,\r\n    ITexture,\r\n    IImage,\r\n    ISampler,\r\n    IAnimation,\r\n    IMeshPrimitive,\r\n    IBuffer,\r\n    IGLTF,\r\n    ITextureInfo,\r\n    ISkin,\r\n    ICamera,\r\n    ImageMimeType,\r\n} from \"babylonjs-gltf2interface\";\r\nimport { AccessorComponentType, AccessorType, CameraType } from \"babylonjs-gltf2interface\";\r\nimport type { FloatArray, IndicesArray, Nullable } from \"core/types\";\r\nimport { TmpVectors, Quaternion } from \"core/Maths/math.vector\";\r\nimport type { Matrix } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Buffer } from \"core/Buffers/buffer\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { Node } from \"core/node\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { SubMesh } from \"core/Meshes/subMesh\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { InstancedMesh } from \"core/Meshes/instancedMesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { Engine } from \"core/Engines/engine\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { EngineStore } from \"core/Engines/engineStore\";\r\n\r\nimport type { IGLTFExporterExtensionV2 } from \"./glTFExporterExtension\";\r\nimport { GLTFMaterialExporter } from \"./glTFMaterialExporter\";\r\nimport type { IExportOptions } from \"./glTFSerializer\";\r\nimport { GLTFData } from \"./glTFData\";\r\nimport {\r\n    ConvertToRightHandedPosition,\r\n    ConvertToRightHandedRotation,\r\n    DataArrayToUint8Array,\r\n    GetAccessorType,\r\n    GetAttributeType,\r\n    GetMinMax,\r\n    GetPrimitiveMode,\r\n    IsTriangleFillMode,\r\n    IsChildCollapsible,\r\n    FloatsNeed16BitInteger,\r\n    IsStandardVertexAttribute,\r\n    IndicesArrayToTypedArray,\r\n    GetVertexBufferInfo,\r\n    CollapseChildIntoParent,\r\n    Rotate180Y,\r\n    DefaultTranslation,\r\n    DefaultScale,\r\n    DefaultRotation,\r\n    ConvertToRightHandedTransformMatrix,\r\n} from \"./glTFUtilities\";\r\nimport { IsNoopNode } from \"../../exportUtils\";\r\nimport { BufferManager } from \"./bufferManager\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { MultiMaterial } from \"core/Materials/multiMaterial\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { EnumerateFloatValues, AreIndices32Bits } from \"core/Buffers/bufferUtils\";\r\nimport type { Bone, Skeleton } from \"core/Bones\";\r\nimport { _GLTFAnimation } from \"./glTFAnimation\";\r\nimport type { MorphTarget } from \"core/Morph\";\r\nimport { BuildMorphTargetBuffers } from \"./glTFMorphTargetsUtilities\";\r\nimport type { IMorphTargetData } from \"./glTFMorphTargetsUtilities\";\r\nimport { LinesMesh } from \"core/Meshes/linesMesh\";\r\nimport { GreasedLineBaseMesh } from \"core/Meshes/GreasedLine/greasedLineBaseMesh\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { TargetCamera } from \"core/Cameras/targetCamera\";\r\nimport { Epsilon } from \"core/Maths/math.constants\";\r\nimport { DataWriter } from \"./dataWriter\";\r\n\r\nclass ExporterState {\r\n    // Babylon indices array, start, count, offset, flip -> glTF accessor index\r\n    private _indicesAccessorMap = new Map<Nullable<IndicesArray>, Map<number, Map<number, Map<number, Map<boolean, number>>>>>();\r\n\r\n    // Babylon buffer -> glTF buffer view\r\n    private _vertexBufferViewMap = new Map<Buffer, IBufferView>();\r\n\r\n    // Babylon vertex buffer, start, count -> glTF accessor index\r\n    private _vertexAccessorMap = new Map<VertexBuffer, Map<number, Map<number, number>>>();\r\n\r\n    private _remappedBufferView = new Map<Buffer, Map<VertexBuffer, IBufferView>>();\r\n\r\n    private _meshMorphTargetMap = new Map<AbstractMesh, IMorphTargetData[]>();\r\n\r\n    private _vertexMapColorAlpha = new Map<VertexBuffer, boolean>();\r\n\r\n    private _exportedNodes = new Set<Node>();\r\n\r\n    // Babylon mesh -> glTF mesh index\r\n    private _meshMap = new Map<AbstractMesh, number>();\r\n\r\n    public constructor(convertToRightHanded: boolean, wasAddedByNoopNode: boolean) {\r\n        this.convertToRightHanded = convertToRightHanded;\r\n        this.wasAddedByNoopNode = wasAddedByNoopNode;\r\n    }\r\n\r\n    public readonly convertToRightHanded: boolean;\r\n\r\n    public readonly wasAddedByNoopNode: boolean;\r\n\r\n    // Only used when convertToRightHanded is true.\r\n    public readonly convertedToRightHandedBuffers = new Map<Buffer, Uint8Array>();\r\n\r\n    public getIndicesAccessor(indices: Nullable<IndicesArray>, start: number, count: number, offset: number, flip: boolean): number | undefined {\r\n        return this._indicesAccessorMap.get(indices)?.get(start)?.get(count)?.get(offset)?.get(flip);\r\n    }\r\n\r\n    public setIndicesAccessor(indices: Nullable<IndicesArray>, start: number, count: number, offset: number, flip: boolean, accessorIndex: number): void {\r\n        let map1 = this._indicesAccessorMap.get(indices);\r\n        if (!map1) {\r\n            map1 = new Map<number, Map<number, Map<number, Map<boolean, number>>>>();\r\n            this._indicesAccessorMap.set(indices, map1);\r\n        }\r\n\r\n        let map2 = map1.get(start);\r\n        if (!map2) {\r\n            map2 = new Map<number, Map<number, Map<boolean, number>>>();\r\n            map1.set(start, map2);\r\n        }\r\n\r\n        let map3 = map2.get(count);\r\n        if (!map3) {\r\n            map3 = new Map<number, Map<boolean, number>>();\r\n            map2.set(count, map3);\r\n        }\r\n\r\n        let map4 = map3.get(offset);\r\n        if (!map4) {\r\n            map4 = new Map<boolean, number>();\r\n            map3.set(offset, map4);\r\n        }\r\n\r\n        map4.set(flip, accessorIndex);\r\n    }\r\n\r\n    public pushExportedNode(node: Node) {\r\n        if (!this._exportedNodes.has(node)) {\r\n            this._exportedNodes.add(node);\r\n        }\r\n    }\r\n\r\n    public getNodesSet(): Set<Node> {\r\n        return this._exportedNodes;\r\n    }\r\n\r\n    public getVertexBufferView(buffer: Buffer): IBufferView | undefined {\r\n        return this._vertexBufferViewMap.get(buffer);\r\n    }\r\n\r\n    public setVertexBufferView(buffer: Buffer, bufferView: IBufferView): void {\r\n        this._vertexBufferViewMap.set(buffer, bufferView);\r\n    }\r\n\r\n    public setRemappedBufferView(buffer: Buffer, vertexBuffer: VertexBuffer, bufferView: IBufferView) {\r\n        this._remappedBufferView.set(buffer, new Map<VertexBuffer, IBufferView>());\r\n        this._remappedBufferView.get(buffer)!.set(vertexBuffer, bufferView);\r\n    }\r\n\r\n    public getRemappedBufferView(buffer: Buffer, vertexBuffer: VertexBuffer): IBufferView | undefined {\r\n        return this._remappedBufferView.get(buffer)?.get(vertexBuffer);\r\n    }\r\n\r\n    public getVertexAccessor(vertexBuffer: VertexBuffer, start: number, count: number): number | undefined {\r\n        return this._vertexAccessorMap.get(vertexBuffer)?.get(start)?.get(count);\r\n    }\r\n\r\n    public setVertexAccessor(vertexBuffer: VertexBuffer, start: number, count: number, accessorIndex: number): void {\r\n        let map1 = this._vertexAccessorMap.get(vertexBuffer);\r\n        if (!map1) {\r\n            map1 = new Map<number, Map<number, number>>();\r\n            this._vertexAccessorMap.set(vertexBuffer, map1);\r\n        }\r\n\r\n        let map2 = map1.get(start);\r\n        if (!map2) {\r\n            map2 = new Map<number, number>();\r\n            map1.set(start, map2);\r\n        }\r\n\r\n        map2.set(count, accessorIndex);\r\n    }\r\n\r\n    public hasVertexColorAlpha(vertexBuffer: VertexBuffer): boolean {\r\n        return this._vertexMapColorAlpha.get(vertexBuffer) || false;\r\n    }\r\n\r\n    public setHasVertexColorAlpha(vertexBuffer: VertexBuffer, hasAlpha: boolean) {\r\n        return this._vertexMapColorAlpha.set(vertexBuffer, hasAlpha);\r\n    }\r\n\r\n    public getMesh(mesh: AbstractMesh): number | undefined {\r\n        return this._meshMap.get(mesh);\r\n    }\r\n\r\n    public setMesh(mesh: AbstractMesh, meshIndex: number): void {\r\n        this._meshMap.set(mesh, meshIndex);\r\n    }\r\n\r\n    public bindMorphDataToMesh(mesh: AbstractMesh, morphData: IMorphTargetData) {\r\n        const morphTargets = this._meshMorphTargetMap.get(mesh) || [];\r\n        this._meshMorphTargetMap.set(mesh, morphTargets);\r\n        if (morphTargets.indexOf(morphData) === -1) {\r\n            morphTargets.push(morphData);\r\n        }\r\n    }\r\n\r\n    public getMorphTargetsFromMesh(mesh: AbstractMesh): IMorphTargetData[] | undefined {\r\n        return this._meshMorphTargetMap.get(mesh);\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class GLTFExporter {\r\n    public readonly _glTF: IGLTF = {\r\n        asset: { generator: `Babylon.js v${Engine.Version}`, version: \"2.0\" },\r\n    };\r\n\r\n    public readonly _animations: IAnimation[] = [];\r\n    public readonly _accessors: IAccessor[] = [];\r\n    public readonly _bufferViews: IBufferView[] = [];\r\n    public readonly _cameras: ICamera[] = [];\r\n    public readonly _images: IImage[] = [];\r\n    public readonly _materials: IMaterial[] = [];\r\n    public readonly _meshes: IMesh[] = [];\r\n    public readonly _nodes: INode[] = [];\r\n    public readonly _samplers: ISampler[] = [];\r\n    public readonly _scenes: IScene[] = [];\r\n    public readonly _skins: ISkin[] = [];\r\n    public readonly _textures: ITexture[] = [];\r\n\r\n    public readonly _babylonScene: Scene;\r\n    public readonly _imageData: { [fileName: string]: { data: ArrayBuffer; mimeType: ImageMimeType } } = {};\r\n\r\n    /**\r\n     * Baked animation sample rate\r\n     */\r\n    private _animationSampleRate: number;\r\n\r\n    private readonly _options: Required<IExportOptions>;\r\n\r\n    public _shouldUseGlb: boolean = false;\r\n\r\n    public readonly _materialExporter = new GLTFMaterialExporter(this);\r\n\r\n    private readonly _extensions: { [name: string]: IGLTFExporterExtensionV2 } = {};\r\n\r\n    public readonly _bufferManager = new BufferManager();\r\n\r\n    private readonly _shouldExportNodeMap = new Map<Node, boolean>();\r\n\r\n    // Babylon node -> glTF node index\r\n    private readonly _nodeMap = new Map<Node, number>();\r\n\r\n    // Babylon material -> glTF material index\r\n    public readonly _materialMap = new Map<Material, number>();\r\n    private readonly _camerasMap = new Map<Camera, ICamera>();\r\n    private readonly _nodesCameraMap = new Map<ICamera, INode[]>();\r\n    private readonly _skinMap = new Map<Skeleton, ISkin>();\r\n    private readonly _nodesSkinMap = new Map<ISkin, INode[]>();\r\n\r\n    // A material in this set requires UVs\r\n    public readonly _materialNeedsUVsSet = new Set<Material>();\r\n\r\n    private static readonly _ExtensionNames = new Array<string>();\r\n    private static readonly _ExtensionFactories: { [name: string]: (exporter: GLTFExporter) => IGLTFExporterExtensionV2 } = {};\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/promise-function-async\r\n    private _ApplyExtension<T>(\r\n        node: T,\r\n        extensions: IGLTFExporterExtensionV2[],\r\n        index: number,\r\n        actionAsync: (extension: IGLTFExporterExtensionV2, node: T) => Promise<Nullable<T>> | undefined\r\n    ): Promise<Nullable<T>> {\r\n        if (index >= extensions.length) {\r\n            return Promise.resolve(node);\r\n        }\r\n\r\n        const currentPromise = actionAsync(extensions[index], node);\r\n\r\n        if (!currentPromise) {\r\n            return this._ApplyExtension(node, extensions, index + 1, actionAsync);\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return currentPromise.then(async (newNode) => (newNode ? await this._ApplyExtension(newNode, extensions, index + 1, actionAsync) : null));\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/promise-function-async\r\n    private _ApplyExtensions<T>(node: T, actionAsync: (extension: IGLTFExporterExtensionV2, node: T) => Promise<Nullable<T>> | undefined): Promise<Nullable<T>> {\r\n        const extensions: IGLTFExporterExtensionV2[] = [];\r\n        for (const name of GLTFExporter._ExtensionNames) {\r\n            extensions.push(this._extensions[name]);\r\n        }\r\n\r\n        return this._ApplyExtension(node, extensions, 0, actionAsync);\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\r\n    public _extensionsPostExportNodeAsync(context: string, node: INode, babylonNode: Node, nodeMap: Map<Node, number>, convertToRightHanded: boolean): Promise<Nullable<INode>> {\r\n        return this._ApplyExtensions(\r\n            node,\r\n            // eslint-disable-next-line @typescript-eslint/promise-function-async\r\n            (extension, node) => extension.postExportNodeAsync && extension.postExportNodeAsync(context, node, babylonNode, nodeMap, convertToRightHanded, this._bufferManager)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\r\n    public _extensionsPostExportMaterialAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<Nullable<IMaterial>> {\r\n        // eslint-disable-next-line @typescript-eslint/promise-function-async\r\n        return this._ApplyExtensions(material, (extension, node) => extension.postExportMaterialAsync && extension.postExportMaterialAsync(context, node, babylonMaterial));\r\n    }\r\n\r\n    public _extensionsPostExportMaterialAdditionalTextures(context: string, material: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const output: BaseTexture[] = [];\r\n\r\n        for (const name of GLTFExporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n\r\n            if (extension.postExportMaterialAdditionalTextures) {\r\n                output.push(...extension.postExportMaterialAdditionalTextures(context, material, babylonMaterial));\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    public _extensionsPostExportTextures(context: string, textureInfo: ITextureInfo, babylonTexture: BaseTexture): void {\r\n        for (const name of GLTFExporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n\r\n            if (extension.postExportTexture) {\r\n                extension.postExportTexture(context, textureInfo, babylonTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public _extensionsPostExportMeshPrimitive(primitive: IMeshPrimitive): void {\r\n        for (const name of GLTFExporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n\r\n            if (extension.postExportMeshPrimitive) {\r\n                extension.postExportMeshPrimitive(primitive, this._bufferManager, this._accessors);\r\n            }\r\n        }\r\n    }\r\n\r\n    public async _extensionsPreGenerateBinaryAsync(): Promise<void> {\r\n        for (const name of GLTFExporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n\r\n            if (extension.preGenerateBinaryAsync) {\r\n                // eslint-disable-next-line no-await-in-loop\r\n                await extension.preGenerateBinaryAsync(this._bufferManager);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _forEachExtensions(action: (extension: IGLTFExporterExtensionV2) => void): void {\r\n        for (const name of GLTFExporter._ExtensionNames) {\r\n            const extension = this._extensions[name];\r\n            if (extension.enabled) {\r\n                action(extension);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _extensionsOnExporting(): void {\r\n        this._forEachExtensions((extension) => {\r\n            if (extension.wasUsed) {\r\n                this._glTF.extensionsUsed ||= [];\r\n                if (this._glTF.extensionsUsed.indexOf(extension.name) === -1) {\r\n                    this._glTF.extensionsUsed.push(extension.name);\r\n                }\r\n\r\n                if (extension.required) {\r\n                    this._glTF.extensionsRequired ||= [];\r\n                    if (this._glTF.extensionsRequired.indexOf(extension.name) === -1) {\r\n                        this._glTF.extensionsRequired.push(extension.name);\r\n                    }\r\n                }\r\n\r\n                this._glTF.extensions ||= {};\r\n                if (extension.onExporting) {\r\n                    extension.onExporting();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadExtensions(): void {\r\n        for (const name of GLTFExporter._ExtensionNames) {\r\n            const extension = GLTFExporter._ExtensionFactories[name](this);\r\n            this._extensions[name] = extension;\r\n        }\r\n    }\r\n\r\n    public constructor(babylonScene: Nullable<Scene> = EngineStore.LastCreatedScene, options?: IExportOptions) {\r\n        if (!babylonScene) {\r\n            throw new Error(\"No scene available to export\");\r\n        }\r\n\r\n        this._babylonScene = babylonScene;\r\n\r\n        this._options = {\r\n            shouldExportNode: () => true,\r\n            shouldExportAnimation: () => true,\r\n            metadataSelector: (metadata) => metadata?.gltf?.extras,\r\n            animationSampleRate: 1 / 60,\r\n            exportWithoutWaitingForScene: false,\r\n            exportUnusedUVs: false,\r\n            removeNoopRootNodes: true,\r\n            includeCoordinateSystemConversionNodes: false,\r\n            meshCompressionMethod: \"None\",\r\n            ...options,\r\n        };\r\n\r\n        this._loadExtensions();\r\n    }\r\n\r\n    public dispose() {\r\n        for (const key in this._extensions) {\r\n            const extension = this._extensions[key];\r\n            extension.dispose();\r\n        }\r\n    }\r\n\r\n    public get options() {\r\n        return this._options;\r\n    }\r\n\r\n    public static RegisterExtension(name: string, factory: (exporter: GLTFExporter) => IGLTFExporterExtensionV2): void {\r\n        if (GLTFExporter.UnregisterExtension(name)) {\r\n            Tools.Warn(`Extension with the name ${name} already exists`);\r\n        }\r\n\r\n        GLTFExporter._ExtensionFactories[name] = factory;\r\n        GLTFExporter._ExtensionNames.push(name);\r\n    }\r\n\r\n    public static UnregisterExtension(name: string): boolean {\r\n        if (!GLTFExporter._ExtensionFactories[name]) {\r\n            return false;\r\n        }\r\n        delete GLTFExporter._ExtensionFactories[name];\r\n\r\n        const index = GLTFExporter._ExtensionNames.indexOf(name);\r\n        if (index !== -1) {\r\n            GLTFExporter._ExtensionNames.splice(index, 1);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _generateJSON(bufferByteLength: number, fileName?: string, prettyPrint?: boolean): string {\r\n        const buffer: IBuffer = { byteLength: bufferByteLength };\r\n\r\n        if (buffer.byteLength) {\r\n            this._glTF.buffers = [buffer];\r\n        }\r\n        if (this._nodes && this._nodes.length) {\r\n            this._glTF.nodes = this._nodes;\r\n        }\r\n        if (this._meshes && this._meshes.length) {\r\n            this._glTF.meshes = this._meshes;\r\n        }\r\n        if (this._scenes && this._scenes.length) {\r\n            this._glTF.scenes = this._scenes;\r\n            this._glTF.scene = 0;\r\n        }\r\n        if (this._cameras && this._cameras.length) {\r\n            this._glTF.cameras = this._cameras;\r\n        }\r\n        if (this._bufferViews && this._bufferViews.length) {\r\n            this._glTF.bufferViews = this._bufferViews;\r\n        }\r\n        if (this._accessors && this._accessors.length) {\r\n            this._glTF.accessors = this._accessors;\r\n        }\r\n        if (this._animations && this._animations.length) {\r\n            this._glTF.animations = this._animations;\r\n        }\r\n        if (this._materials && this._materials.length) {\r\n            this._glTF.materials = this._materials;\r\n        }\r\n        if (this._textures && this._textures.length) {\r\n            this._glTF.textures = this._textures;\r\n        }\r\n        if (this._samplers && this._samplers.length) {\r\n            this._glTF.samplers = this._samplers;\r\n        }\r\n        if (this._skins && this._skins.length) {\r\n            this._glTF.skins = this._skins;\r\n        }\r\n        if (this._images && this._images.length) {\r\n            this._glTF.images = this._images;\r\n        }\r\n\r\n        if (!this._shouldUseGlb) {\r\n            buffer.uri = fileName + \".bin\";\r\n        }\r\n\r\n        return prettyPrint ? JSON.stringify(this._glTF, null, 2) : JSON.stringify(this._glTF);\r\n    }\r\n\r\n    public async generateGLTFAsync(glTFPrefix: string): Promise<GLTFData> {\r\n        const binaryBuffer = await this._generateBinaryAsync();\r\n        this._extensionsOnExporting();\r\n        const jsonText = this._generateJSON(binaryBuffer.byteLength, glTFPrefix, true);\r\n\r\n        const bin = new Blob([binaryBuffer], { type: \"application/octet-stream\" });\r\n\r\n        const glTFFileName = glTFPrefix + \".gltf\";\r\n        const glTFBinFile = glTFPrefix + \".bin\";\r\n\r\n        const container = new GLTFData();\r\n\r\n        container.files[glTFFileName] = jsonText;\r\n        container.files[glTFBinFile] = bin;\r\n\r\n        if (this._imageData) {\r\n            for (const image in this._imageData) {\r\n                container.files[image] = new Blob([this._imageData[image].data], { type: this._imageData[image].mimeType });\r\n            }\r\n        }\r\n\r\n        return container;\r\n    }\r\n\r\n    private async _generateBinaryAsync(): Promise<Uint8Array> {\r\n        await this._exportSceneAsync();\r\n        await this._extensionsPreGenerateBinaryAsync();\r\n        return this._bufferManager.generateBinary(this._bufferViews);\r\n    }\r\n\r\n    /**\r\n     * Pads the number to a multiple of 4\r\n     * @param num number to pad\r\n     * @returns padded number\r\n     */\r\n    private _getPadding(num: number): number {\r\n        const remainder = num % 4;\r\n        const padding = remainder === 0 ? remainder : 4 - remainder;\r\n\r\n        return padding;\r\n    }\r\n\r\n    public async generateGLBAsync(glTFPrefix: string): Promise<GLTFData> {\r\n        this._shouldUseGlb = true;\r\n        const binaryBuffer = await this._generateBinaryAsync();\r\n        this._extensionsOnExporting();\r\n        const jsonText = this._generateJSON(binaryBuffer.byteLength);\r\n\r\n        const glbFileName = glTFPrefix + \".glb\";\r\n        const headerLength = 12;\r\n        const chunkLengthPrefix = 8;\r\n        let jsonLength = jsonText.length;\r\n        let encodedJsonText;\r\n        // Make use of TextEncoder when available\r\n        if (typeof TextEncoder !== \"undefined\") {\r\n            const encoder = new TextEncoder();\r\n            encodedJsonText = encoder.encode(jsonText);\r\n            jsonLength = encodedJsonText.length;\r\n        }\r\n        const jsonPadding = this._getPadding(jsonLength);\r\n        const binPadding = this._getPadding(binaryBuffer.byteLength);\r\n\r\n        const byteLength = headerLength + 2 * chunkLengthPrefix + jsonLength + jsonPadding + binaryBuffer.byteLength + binPadding;\r\n\r\n        const dataWriter = new DataWriter(byteLength);\r\n\r\n        // Header\r\n        dataWriter.writeUInt32(0x46546c67); // \"glTF\"\r\n        dataWriter.writeUInt32(2); // Version\r\n        dataWriter.writeUInt32(byteLength); // Total bytes in file\r\n\r\n        // JSON chunk length prefix\r\n        dataWriter.writeUInt32(jsonLength + jsonPadding);\r\n        dataWriter.writeUInt32(0x4e4f534a); // \"JSON\"\r\n\r\n        // JSON chunk bytes\r\n        if (encodedJsonText) {\r\n            // If TextEncoder was available, we can simply copy the encoded array\r\n            dataWriter.writeTypedArray(encodedJsonText);\r\n        } else {\r\n            const blankCharCode = \"_\".charCodeAt(0);\r\n            for (let i = 0; i < jsonLength; ++i) {\r\n                const charCode = jsonText.charCodeAt(i);\r\n                // If the character doesn't fit into a single UTF-16 code unit, just put a blank character\r\n                if (charCode != jsonText.codePointAt(i)) {\r\n                    dataWriter.writeUInt8(blankCharCode);\r\n                } else {\r\n                    dataWriter.writeUInt8(charCode);\r\n                }\r\n            }\r\n        }\r\n\r\n        // JSON padding\r\n        for (let i = 0; i < jsonPadding; ++i) {\r\n            dataWriter.writeUInt8(0x20);\r\n        }\r\n\r\n        // Binary chunk length prefix\r\n        dataWriter.writeUInt32(binaryBuffer.byteLength + binPadding);\r\n        dataWriter.writeUInt32(0x004e4942); // \"BIN\"\r\n\r\n        // Binary chunk bytes\r\n        dataWriter.writeTypedArray(binaryBuffer);\r\n\r\n        // Binary padding\r\n        for (let i = 0; i < binPadding; ++i) {\r\n            dataWriter.writeUInt8(0);\r\n        }\r\n\r\n        const container = new GLTFData();\r\n        container.files[glbFileName] = new Blob([dataWriter.getOutputData()], { type: \"application/octet-stream\" });\r\n\r\n        return container;\r\n    }\r\n\r\n    private _setNodeTransformation(node: INode, babylonTransformNode: TransformNode, convertToRightHanded: boolean): void {\r\n        if (!babylonTransformNode.getPivotPoint().equalsWithEpsilon(DefaultTranslation, Epsilon)) {\r\n            Tools.Warn(\"Pivot points are not supported in the glTF serializer\");\r\n        }\r\n\r\n        if (!babylonTransformNode.position.equalsWithEpsilon(DefaultTranslation, Epsilon)) {\r\n            const translation = TmpVectors.Vector3[0].copyFrom(babylonTransformNode.position);\r\n            if (convertToRightHanded) {\r\n                ConvertToRightHandedPosition(translation);\r\n            }\r\n\r\n            node.translation = translation.asArray();\r\n        }\r\n\r\n        if (!babylonTransformNode.scaling.equalsWithEpsilon(DefaultScale, Epsilon)) {\r\n            node.scale = babylonTransformNode.scaling.asArray();\r\n        }\r\n\r\n        const rotationQuaternion =\r\n            babylonTransformNode.rotationQuaternion?.clone() ||\r\n            Quaternion.FromEulerAngles(babylonTransformNode.rotation.x, babylonTransformNode.rotation.y, babylonTransformNode.rotation.z);\r\n\r\n        if (!rotationQuaternion.equalsWithEpsilon(DefaultRotation, Epsilon)) {\r\n            if (convertToRightHanded) {\r\n                ConvertToRightHandedRotation(rotationQuaternion);\r\n            }\r\n\r\n            node.rotation = rotationQuaternion.normalize().asArray();\r\n        }\r\n    }\r\n\r\n    private _setCameraTransformation(node: INode, babylonCamera: TargetCamera, convertToRightHanded: boolean): void {\r\n        if (!babylonCamera.position.equalsWithEpsilon(DefaultTranslation, Epsilon)) {\r\n            const translation = TmpVectors.Vector3[0].copyFrom(babylonCamera.position);\r\n            if (convertToRightHanded) {\r\n                ConvertToRightHandedPosition(translation);\r\n            }\r\n            node.translation = translation.asArray();\r\n        }\r\n\r\n        const rotationQuaternion = babylonCamera.rotationQuaternion || Quaternion.FromEulerAngles(babylonCamera.rotation.x, babylonCamera.rotation.y, babylonCamera.rotation.z);\r\n\r\n        if (convertToRightHanded) {\r\n            ConvertToRightHandedRotation(rotationQuaternion);\r\n        }\r\n\r\n        // Left-handed scenes have cameras that always face Z+ (opposite of glTF's Z-).\r\n        // Use scene coordinate system rather than convertToRightHanded, since some\r\n        // cameras may not need convertToRightHanded but still need correction to face Z-.\r\n        if (!this._babylonScene.useRightHandedSystem) {\r\n            Rotate180Y(rotationQuaternion);\r\n        }\r\n\r\n        if (!rotationQuaternion.equalsWithEpsilon(DefaultRotation, Epsilon)) {\r\n            node.rotation = rotationQuaternion.asArray();\r\n        }\r\n    }\r\n\r\n    // Export babylon cameras to glTF cameras\r\n    private _listAvailableCameras(): void {\r\n        for (const camera of this._babylonScene.cameras) {\r\n            const glTFCamera: ICamera = {\r\n                type: camera.mode === Camera.PERSPECTIVE_CAMERA ? CameraType.PERSPECTIVE : CameraType.ORTHOGRAPHIC,\r\n            };\r\n\r\n            if (camera.name) {\r\n                glTFCamera.name = camera.name;\r\n            }\r\n\r\n            if (glTFCamera.type === CameraType.PERSPECTIVE) {\r\n                glTFCamera.perspective = {\r\n                    aspectRatio: camera.getEngine().getAspectRatio(camera),\r\n                    yfov: camera.fovMode === Camera.FOVMODE_VERTICAL_FIXED ? camera.fov : camera.fov * camera.getEngine().getAspectRatio(camera),\r\n                    znear: camera.minZ,\r\n                    zfar: camera.maxZ,\r\n                };\r\n            } else if (glTFCamera.type === CameraType.ORTHOGRAPHIC) {\r\n                const halfWidth = camera.orthoLeft && camera.orthoRight ? 0.5 * (camera.orthoRight - camera.orthoLeft) : camera.getEngine().getRenderWidth() * 0.5;\r\n                const halfHeight = camera.orthoBottom && camera.orthoTop ? 0.5 * (camera.orthoTop - camera.orthoBottom) : camera.getEngine().getRenderHeight() * 0.5;\r\n                glTFCamera.orthographic = {\r\n                    xmag: halfWidth,\r\n                    ymag: halfHeight,\r\n                    znear: camera.minZ,\r\n                    zfar: camera.maxZ,\r\n                };\r\n            }\r\n            this._camerasMap.set(camera, glTFCamera);\r\n        }\r\n    }\r\n\r\n    // Cleanup unused cameras and assign index to nodes.\r\n    private _exportAndAssignCameras(): void {\r\n        const gltfCameras = Array.from(this._camerasMap.values());\r\n        for (const gltfCamera of gltfCameras) {\r\n            const usedNodes = this._nodesCameraMap.get(gltfCamera);\r\n            if (usedNodes !== undefined) {\r\n                this._cameras.push(gltfCamera);\r\n                for (const node of usedNodes) {\r\n                    node.camera = this._cameras.length - 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Collects all skins in a skins map so nodes can reference it during node parsing.\r\n    private _listAvailableSkeletons(): void {\r\n        for (const skeleton of this._babylonScene.skeletons) {\r\n            if (skeleton.bones.length <= 0) {\r\n                continue;\r\n            }\r\n\r\n            const skin: ISkin = { joints: [] };\r\n            this._skinMap.set(skeleton, skin);\r\n        }\r\n    }\r\n\r\n    private _exportAndAssignSkeletons(leftHandNodes: Set<Node>): void {\r\n        for (const skeleton of this._babylonScene.skeletons) {\r\n            if (skeleton.bones.length <= 0) {\r\n                continue;\r\n            }\r\n\r\n            const skin = this._skinMap.get(skeleton);\r\n            if (skin == undefined) {\r\n                continue;\r\n            }\r\n\r\n            // The bones (joints) of a skeleton (skin) must be exported in the same order as they appear in vertex attributes,\r\n            // which is indicated by getIndex and may not match a bone's index in skeleton.bones\r\n            const boneIndexMap: { [index: number]: Bone } = {};\r\n            let maxBoneIndex = -1;\r\n            for (let i = 0; i < skeleton.bones.length; ++i) {\r\n                const bone = skeleton.bones[i];\r\n                const boneIndex = bone.getIndex() ?? i;\r\n                if (boneIndex !== -1) {\r\n                    boneIndexMap[boneIndex] = bone;\r\n                    if (boneIndex > maxBoneIndex) {\r\n                        maxBoneIndex = boneIndex;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Set joints indices to scene nodes.\r\n            const inverseBindMatrices: Matrix[] = [];\r\n            for (let boneIndex = 0; boneIndex <= maxBoneIndex; ++boneIndex) {\r\n                const bone = boneIndexMap[boneIndex]; // Assumes no gaps in bone indices\r\n                const transformNode = bone.getTransformNode();\r\n                const nodeIndex = transformNode ? this._nodeMap.get(transformNode) : undefined;\r\n                if (nodeIndex === undefined) {\r\n                    Tools.Warn(\"Exporting a bone without a linked transform node is currently unsupported.\");\r\n                    continue; // The indices may be out-of-sync after this and break the skinning.\r\n                }\r\n                skin.joints.push(nodeIndex);\r\n\r\n                const boneMatrix = bone.getAbsoluteInverseBindMatrix().clone();\r\n                if (leftHandNodes.has(transformNode!)) {\r\n                    ConvertToRightHandedTransformMatrix(boneMatrix);\r\n                }\r\n                inverseBindMatrices.push(boneMatrix);\r\n            }\r\n\r\n            // Nodes that use this skin.\r\n            const skinnedNodes = this._nodesSkinMap.get(skin);\r\n\r\n            // Only export the skin if it has at least one joint and is used by a mesh.\r\n            if (skin.joints.length > 0 && skinnedNodes !== undefined) {\r\n                const inverseBindMatricesData = new Float32Array(inverseBindMatrices.length * 16); // Always a 4 x 4 matrix of 32 bit float\r\n                inverseBindMatrices.forEach((mat: Matrix, index: number) => {\r\n                    inverseBindMatricesData.set(mat.m, index * 16);\r\n                });\r\n\r\n                const bufferView = this._bufferManager.createBufferView(inverseBindMatricesData);\r\n                this._accessors.push(this._bufferManager.createAccessor(bufferView, AccessorType.MAT4, AccessorComponentType.FLOAT, inverseBindMatrices.length));\r\n                skin.inverseBindMatrices = this._accessors.length - 1;\r\n\r\n                this._skins.push(skin);\r\n                const skinIndex = this._skins.length - 1;\r\n                for (const skinnedNode of skinnedNodes) {\r\n                    skinnedNode.skin = skinIndex;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _exportSceneAsync(): Promise<void> {\r\n        const scene: IScene = { nodes: [] };\r\n\r\n        // Scene metadata\r\n        if (this._babylonScene.metadata) {\r\n            const extras = this._options.metadataSelector(this._babylonScene.metadata);\r\n            if (extras) {\r\n                scene.extras = extras;\r\n            }\r\n        }\r\n\r\n        //  TODO:\r\n        //  deal with this from the loader:\r\n        //  babylonMaterial.invertNormalMapX = !this._babylonScene.useRightHandedSystem;\r\n        //  babylonMaterial.invertNormalMapY = this._babylonScene.useRightHandedSystem;\r\n\r\n        const rootNodesRH = new Array<Node>();\r\n        const rootNodesLH = new Array<Node>();\r\n        const rootNoopNodesRH = new Array<Node>();\r\n\r\n        for (const rootNode of this._babylonScene.rootNodes) {\r\n            if (this._options.removeNoopRootNodes && !this._options.includeCoordinateSystemConversionNodes && IsNoopNode(rootNode, this._babylonScene.useRightHandedSystem)) {\r\n                rootNoopNodesRH.push(...rootNode.getChildren());\r\n            } else if (this._babylonScene.useRightHandedSystem) {\r\n                rootNodesRH.push(rootNode);\r\n            } else {\r\n                rootNodesLH.push(rootNode);\r\n            }\r\n        }\r\n\r\n        this._listAvailableCameras();\r\n        this._listAvailableSkeletons();\r\n\r\n        const stateLH = new ExporterState(true, false);\r\n        scene.nodes.push(...(await this._exportNodesAsync(rootNodesLH, stateLH)));\r\n        const stateRH = new ExporterState(false, false);\r\n        scene.nodes.push(...(await this._exportNodesAsync(rootNodesRH, stateRH)));\r\n        const noopRH = new ExporterState(false, true);\r\n        scene.nodes.push(...(await this._exportNodesAsync(rootNoopNodesRH, noopRH)));\r\n\r\n        if (scene.nodes.length) {\r\n            this._scenes.push(scene);\r\n        }\r\n\r\n        this._exportAndAssignCameras();\r\n        this._exportAndAssignSkeletons(stateLH.getNodesSet());\r\n\r\n        if (this._babylonScene.animationGroups.length) {\r\n            _GLTFAnimation._CreateNodeAndMorphAnimationFromAnimationGroups(\r\n                this._babylonScene,\r\n                this._animations,\r\n                this._nodeMap,\r\n                this._bufferManager,\r\n                this._bufferViews,\r\n                this._accessors,\r\n                this._animationSampleRate,\r\n                stateLH.getNodesSet(),\r\n                this._options.shouldExportAnimation\r\n            );\r\n        }\r\n    }\r\n\r\n    private _shouldExportNode(babylonNode: Node): boolean {\r\n        let result = this._shouldExportNodeMap.get(babylonNode);\r\n\r\n        if (result === undefined) {\r\n            result = this._options.shouldExportNode(babylonNode);\r\n            this._shouldExportNodeMap.set(babylonNode, result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private async _exportNodesAsync(babylonRootNodes: Node[], state: ExporterState): Promise<number[]> {\r\n        const nodes = new Array<number>();\r\n\r\n        this._exportBuffers(babylonRootNodes, state);\r\n\r\n        for (const babylonNode of babylonRootNodes) {\r\n            // eslint-disable-next-line no-await-in-loop\r\n            await this._exportNodeAsync(babylonNode, nodes, state);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    private _collectBuffers(\r\n        babylonNode: Node,\r\n        bufferToVertexBuffersMap: Map<Buffer, VertexBuffer[]>,\r\n        vertexBufferToMeshesMap: Map<VertexBuffer, AbstractMesh[]>,\r\n        morphTargetsToMeshesMap: Map<MorphTarget, AbstractMesh[]>,\r\n        state: ExporterState\r\n    ): void {\r\n        if (this._shouldExportNode(babylonNode) && babylonNode instanceof AbstractMesh && babylonNode.geometry) {\r\n            const vertexBuffers = babylonNode.geometry.getVertexBuffers();\r\n            if (vertexBuffers) {\r\n                for (const kind in vertexBuffers) {\r\n                    if (!IsStandardVertexAttribute(kind)) {\r\n                        continue;\r\n                    }\r\n                    const vertexBuffer = vertexBuffers[kind];\r\n                    state.setHasVertexColorAlpha(vertexBuffer, babylonNode.hasVertexAlpha);\r\n                    const buffer = vertexBuffer._buffer;\r\n                    const vertexBufferArray = bufferToVertexBuffersMap.get(buffer) || [];\r\n                    bufferToVertexBuffersMap.set(buffer, vertexBufferArray);\r\n                    if (vertexBufferArray.indexOf(vertexBuffer) === -1) {\r\n                        vertexBufferArray.push(vertexBuffer);\r\n                    }\r\n\r\n                    const meshes = vertexBufferToMeshesMap.get(vertexBuffer) || [];\r\n                    vertexBufferToMeshesMap.set(vertexBuffer, meshes);\r\n                    if (meshes.indexOf(babylonNode) === -1) {\r\n                        meshes.push(babylonNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const morphTargetManager = babylonNode.morphTargetManager;\r\n\r\n            if (morphTargetManager) {\r\n                for (let morphIndex = 0; morphIndex < morphTargetManager.numTargets; morphIndex++) {\r\n                    const morphTarget = morphTargetManager.getTarget(morphIndex);\r\n\r\n                    const meshes = morphTargetsToMeshesMap.get(morphTarget) || [];\r\n                    morphTargetsToMeshesMap.set(morphTarget, meshes);\r\n                    if (meshes.indexOf(babylonNode) === -1) {\r\n                        meshes.push(babylonNode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const babylonChildNode of babylonNode.getChildren()) {\r\n            this._collectBuffers(babylonChildNode, bufferToVertexBuffersMap, vertexBufferToMeshesMap, morphTargetsToMeshesMap, state);\r\n        }\r\n    }\r\n\r\n    private _exportBuffers(babylonRootNodes: Node[], state: ExporterState): void {\r\n        const bufferToVertexBuffersMap = new Map<Buffer, VertexBuffer[]>();\r\n        const vertexBufferToMeshesMap = new Map<VertexBuffer, AbstractMesh[]>();\r\n        const morphTargetsMeshesMap = new Map<MorphTarget, AbstractMesh[]>();\r\n\r\n        for (const babylonNode of babylonRootNodes) {\r\n            this._collectBuffers(babylonNode, bufferToVertexBuffersMap, vertexBufferToMeshesMap, morphTargetsMeshesMap, state);\r\n        }\r\n\r\n        const buffers = Array.from(bufferToVertexBuffersMap.keys());\r\n\r\n        for (const buffer of buffers) {\r\n            const data = buffer.getData();\r\n            if (!data) {\r\n                throw new Error(\"Buffer data is not available\");\r\n            }\r\n\r\n            const vertexBuffers = bufferToVertexBuffersMap.get(buffer);\r\n\r\n            if (!vertexBuffers) {\r\n                continue;\r\n            }\r\n\r\n            const byteStride = vertexBuffers[0].byteStride;\r\n            if (vertexBuffers.some((vertexBuffer) => vertexBuffer.byteStride !== byteStride)) {\r\n                throw new Error(\"Vertex buffers pointing to the same buffer must have the same byte stride\");\r\n            }\r\n\r\n            const bytes = DataArrayToUint8Array(data).slice();\r\n\r\n            // Apply normalizations and color corrections to buffer data in-place.\r\n            for (const vertexBuffer of vertexBuffers) {\r\n                const meshes = vertexBufferToMeshesMap.get(vertexBuffer)!;\r\n                const { byteOffset, byteStride, componentCount, type, count, normalized, kind } = GetVertexBufferInfo(vertexBuffer, meshes);\r\n\r\n                switch (kind) {\r\n                    // Normalize normals and tangents.\r\n                    case VertexBuffer.NormalKind:\r\n                    case VertexBuffer.TangentKind: {\r\n                        EnumerateFloatValues(bytes, byteOffset, byteStride, componentCount, type, count, normalized, (values) => {\r\n                            const length = Math.sqrt(values[0] * values[0] + values[1] * values[1] + values[2] * values[2]);\r\n                            if (length > 0) {\r\n                                const invLength = 1 / length;\r\n                                values[0] *= invLength;\r\n                                values[1] *= invLength;\r\n                                values[2] *= invLength;\r\n                            }\r\n                        });\r\n                        break;\r\n                    }\r\n                    // Convert StandardMaterial vertex colors from gamma to linear space.\r\n                    case VertexBuffer.ColorKind: {\r\n                        const stdMaterialCount = meshes.filter((mesh) => mesh.material instanceof StandardMaterial || mesh.material == null).length;\r\n                        if (stdMaterialCount == 0) {\r\n                            break; // Buffer not used by StandardMaterials, so no conversion needed.\r\n                        }\r\n                        // TODO: Implement this case.\r\n                        if (stdMaterialCount != meshes.length) {\r\n                            Logger.Warn(\"Not converting vertex color space, as buffer is shared by StandardMaterials and other material types. Results may look incorrect.\");\r\n                            break;\r\n                        }\r\n                        if (type == VertexBuffer.UNSIGNED_BYTE) {\r\n                            Logger.Warn(\"Converting uint8 vertex colors to linear space. Results may look incorrect.\");\r\n                        }\r\n\r\n                        const vertexData3 = new Color3();\r\n                        const vertexData4 = new Color4();\r\n                        const useExactSrgbConversions = this._babylonScene.getEngine().useExactSrgbConversions;\r\n\r\n                        EnumerateFloatValues(bytes, byteOffset, byteStride, componentCount, type, count, normalized, (values) => {\r\n                            // Using separate Color3 and Color4 objects to ensure the right functions are called.\r\n                            if (values.length === 3) {\r\n                                vertexData3.fromArray(values, 0);\r\n                                vertexData3.toLinearSpaceToRef(vertexData3, useExactSrgbConversions);\r\n                                vertexData3.toArray(values, 0);\r\n                            } else {\r\n                                vertexData4.fromArray(values, 0);\r\n                                vertexData4.toLinearSpaceToRef(vertexData4, useExactSrgbConversions);\r\n                                vertexData4.toArray(values, 0);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Perform coordinate conversions, if needed, to buffer data in-place (only for positions, normals and tangents).\r\n            if (state.convertToRightHanded) {\r\n                for (const vertexBuffer of vertexBuffers) {\r\n                    const meshes = vertexBufferToMeshesMap.get(vertexBuffer)!;\r\n                    const { byteOffset, byteStride, componentCount, type, count, normalized, kind } = GetVertexBufferInfo(vertexBuffer, meshes);\r\n\r\n                    switch (kind) {\r\n                        case VertexBuffer.PositionKind:\r\n                        case VertexBuffer.NormalKind:\r\n                        case VertexBuffer.TangentKind: {\r\n                            EnumerateFloatValues(bytes, byteOffset, byteStride, componentCount, type, count, normalized, (values) => {\r\n                                values[0] = -values[0];\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Save converted bytes for min/max computation.\r\n                state.convertedToRightHandedBuffers.set(buffer, bytes);\r\n            }\r\n\r\n            // Create buffer view, but defer accessor creation for later. Instead, track it via ExporterState.\r\n            const bufferView = this._bufferManager.createBufferView(bytes, byteStride);\r\n            state.setVertexBufferView(buffer, bufferView);\r\n\r\n            const floatMatricesIndices = new Map<VertexBuffer, FloatArray>();\r\n\r\n            // If buffers are of type MatricesIndicesKind and have float values, we need to create a new buffer instead.\r\n            for (const vertexBuffer of vertexBuffers) {\r\n                const meshes = vertexBufferToMeshesMap.get(vertexBuffer)!;\r\n                const { kind, totalVertices } = GetVertexBufferInfo(vertexBuffer, meshes);\r\n                switch (kind) {\r\n                    case VertexBuffer.MatricesIndicesKind:\r\n                    case VertexBuffer.MatricesIndicesExtraKind: {\r\n                        if (vertexBuffer.type == VertexBuffer.FLOAT) {\r\n                            const floatData = vertexBuffer.getFloatData(totalVertices);\r\n                            if (floatData !== null) {\r\n                                floatMatricesIndices.set(vertexBuffer, floatData);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (floatMatricesIndices.size !== 0) {\r\n                Logger.Warn(\r\n                    `Joint indices conversion needed: some joint indices are stored as floats in Babylon but GLTF requires UNSIGNED BYTES. We will perform the conversion but this might lead to unused data in the buffer.`\r\n                );\r\n            }\r\n\r\n            const floatArrayVertexBuffers = Array.from(floatMatricesIndices.keys());\r\n\r\n            for (const vertexBuffer of floatArrayVertexBuffers) {\r\n                const array = floatMatricesIndices.get(vertexBuffer);\r\n\r\n                if (!array) {\r\n                    continue;\r\n                }\r\n\r\n                const is16Bit = FloatsNeed16BitInteger(array);\r\n                const newArray = new (is16Bit ? Uint16Array : Uint8Array)(array.length);\r\n                for (let index = 0; index < array.length; index++) {\r\n                    newArray[index] = array[index];\r\n                }\r\n                const bufferView = this._bufferManager.createBufferView(newArray, 4 * (is16Bit ? 2 : 1));\r\n                state.setRemappedBufferView(buffer, vertexBuffer, bufferView);\r\n            }\r\n        }\r\n\r\n        // Build morph targets buffers\r\n        const morphTargets = Array.from(morphTargetsMeshesMap.keys());\r\n\r\n        for (const morphTarget of morphTargets) {\r\n            const meshes = morphTargetsMeshesMap.get(morphTarget);\r\n\r\n            if (!meshes) {\r\n                continue;\r\n            }\r\n\r\n            const glTFMorphTarget = BuildMorphTargetBuffers(morphTarget, meshes[0], this._bufferManager, this._bufferViews, this._accessors, state.convertToRightHanded);\r\n\r\n            for (const mesh of meshes) {\r\n                state.bindMorphDataToMesh(mesh, glTFMorphTarget);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes a node to be exported to the glTF file\r\n     * @returns A promise that resolves once the node has been exported\r\n     * @internal\r\n     */\r\n    private async _exportNodeAsync(babylonNode: Node, parentNodeChildren: Array<number>, state: ExporterState): Promise<void> {\r\n        let nodeIndex = this._nodeMap.get(babylonNode);\r\n        if (nodeIndex !== undefined) {\r\n            if (!parentNodeChildren.includes(nodeIndex)) {\r\n                parentNodeChildren.push(nodeIndex);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const node = await this._createNodeAsync(babylonNode, state);\r\n\r\n        if (node) {\r\n            nodeIndex = this._nodes.length;\r\n            this._nodes.push(node);\r\n            this._nodeMap.set(babylonNode, nodeIndex);\r\n            state.pushExportedNode(babylonNode);\r\n            parentNodeChildren.push(nodeIndex);\r\n\r\n            // Process node's animations once the node has been added to nodeMap (TODO: This should be refactored)\r\n            const runtimeGLTFAnimation: IAnimation = {\r\n                name: \"runtime animations\",\r\n                channels: [],\r\n                samplers: [],\r\n            };\r\n            const idleGLTFAnimations: IAnimation[] = [];\r\n\r\n            if (!this._babylonScene.animationGroups.length) {\r\n                _GLTFAnimation._CreateMorphTargetAnimationFromMorphTargetAnimations(\r\n                    babylonNode,\r\n                    runtimeGLTFAnimation,\r\n                    idleGLTFAnimations,\r\n                    this._nodeMap,\r\n                    this._nodes,\r\n                    this._bufferManager,\r\n                    this._bufferViews,\r\n                    this._accessors,\r\n                    this._animationSampleRate,\r\n                    state.convertToRightHanded,\r\n                    this._options.shouldExportAnimation\r\n                );\r\n                if (babylonNode.animations.length) {\r\n                    _GLTFAnimation._CreateNodeAnimationFromNodeAnimations(\r\n                        babylonNode,\r\n                        runtimeGLTFAnimation,\r\n                        idleGLTFAnimations,\r\n                        this._nodeMap,\r\n                        this._nodes,\r\n                        this._bufferManager,\r\n                        this._bufferViews,\r\n                        this._accessors,\r\n                        this._animationSampleRate,\r\n                        state.convertToRightHanded,\r\n                        this._options.shouldExportAnimation\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (runtimeGLTFAnimation.channels.length && runtimeGLTFAnimation.samplers.length) {\r\n                this._animations.push(runtimeGLTFAnimation);\r\n            }\r\n            idleGLTFAnimations.forEach((idleGLTFAnimation) => {\r\n                if (idleGLTFAnimation.channels.length && idleGLTFAnimation.samplers.length) {\r\n                    this._animations.push(idleGLTFAnimation);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Begin processing child nodes once parent has been added to the node list\r\n        const children = node ? [] : parentNodeChildren;\r\n        for (const babylonChildNode of babylonNode.getChildren()) {\r\n            // eslint-disable-next-line no-await-in-loop\r\n            await this._exportNodeAsync(babylonChildNode, children, state);\r\n        }\r\n\r\n        if (node && children.length) {\r\n            node.children = children;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a glTF node from a Babylon.js node. If skipped, returns null.\r\n     * @internal\r\n     */\r\n    private async _createNodeAsync(babylonNode: Node, state: ExporterState): Promise<Nullable<INode>> {\r\n        if (!this._shouldExportNode(babylonNode)) {\r\n            return null;\r\n        }\r\n\r\n        const node: INode = {};\r\n\r\n        if (babylonNode.name) {\r\n            node.name = babylonNode.name;\r\n        }\r\n\r\n        // Node metadata\r\n        if (babylonNode.metadata) {\r\n            const extras = this._options.metadataSelector(babylonNode.metadata);\r\n            if (extras) {\r\n                node.extras = extras;\r\n            }\r\n        }\r\n\r\n        if (babylonNode instanceof TransformNode) {\r\n            this._setNodeTransformation(node, babylonNode, state.convertToRightHanded);\r\n\r\n            if (babylonNode instanceof AbstractMesh) {\r\n                const babylonMesh = babylonNode instanceof InstancedMesh ? babylonNode.sourceMesh : (babylonNode as Mesh);\r\n                if (babylonMesh.subMeshes && babylonMesh.subMeshes.length > 0) {\r\n                    node.mesh = await this._exportMeshAsync(babylonMesh, state);\r\n                }\r\n\r\n                if (babylonNode.skeleton) {\r\n                    const skin = this._skinMap.get(babylonNode.skeleton);\r\n\r\n                    if (skin !== undefined) {\r\n                        if (this._nodesSkinMap.get(skin) === undefined) {\r\n                            this._nodesSkinMap.set(skin, []);\r\n                        }\r\n\r\n                        this._nodesSkinMap.get(skin)?.push(node);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (babylonNode instanceof TargetCamera) {\r\n            const gltfCamera = this._camerasMap.get(babylonNode);\r\n\r\n            if (gltfCamera) {\r\n                if (this._nodesCameraMap.get(gltfCamera) === undefined) {\r\n                    this._nodesCameraMap.set(gltfCamera, []);\r\n                }\r\n\r\n                this._setCameraTransformation(node, babylonNode, state.convertToRightHanded);\r\n\r\n                // If a parent node exists and can be collapsed, merge their transformations and mark the parent as the camera-containing node.\r\n                const parentBabylonNode = babylonNode.parent;\r\n                if (parentBabylonNode !== null && IsChildCollapsible(babylonNode, parentBabylonNode)) {\r\n                    const parentNodeIndex = this._nodeMap.get(parentBabylonNode);\r\n                    if (parentNodeIndex !== undefined) {\r\n                        const parentNode = this._nodes[parentNodeIndex];\r\n                        CollapseChildIntoParent(node, parentNode);\r\n                        this._nodesCameraMap.get(gltfCamera)?.push(parentNode);\r\n                        return null; // Skip exporting the original child node\r\n                    }\r\n                }\r\n\r\n                this._nodesCameraMap.get(gltfCamera)?.push(node);\r\n            }\r\n        }\r\n\r\n        // Apply extensions to the node. If this resolves to null, it means we should skip exporting this node\r\n        const processedNode = await this._extensionsPostExportNodeAsync(\"exportNodeAsync\", node, babylonNode, this._nodeMap, state.convertToRightHanded);\r\n        if (!processedNode) {\r\n            Logger.Warn(`Not exporting node ${babylonNode.name}`);\r\n            return null;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    private _exportIndices(\r\n        indices: Nullable<IndicesArray>,\r\n        is32Bits: boolean,\r\n        start: number,\r\n        count: number,\r\n        offset: number,\r\n        fillMode: number,\r\n        sideOrientation: number,\r\n        state: ExporterState,\r\n        primitive: IMeshPrimitive\r\n    ): void {\r\n        let indicesToExport = indices;\r\n\r\n        primitive.mode = GetPrimitiveMode(fillMode);\r\n\r\n        // Flip indices if triangle winding order is not CCW, as glTF is always CCW.\r\n        const flip = sideOrientation !== Material.CounterClockWiseSideOrientation && IsTriangleFillMode(fillMode);\r\n        if (flip) {\r\n            if (fillMode === Material.TriangleStripDrawMode || fillMode === Material.TriangleFanDrawMode) {\r\n                throw new Error(\"Triangle strip/fan fill mode is not implemented\");\r\n            }\r\n\r\n            primitive.mode = GetPrimitiveMode(fillMode);\r\n\r\n            const newIndices = is32Bits ? new Uint32Array(count) : new Uint16Array(count);\r\n\r\n            if (indices) {\r\n                for (let i = 0; i + 2 < count; i += 3) {\r\n                    newIndices[i] = indices[start + i] + offset;\r\n                    newIndices[i + 1] = indices[start + i + 2] + offset;\r\n                    newIndices[i + 2] = indices[start + i + 1] + offset;\r\n                }\r\n            } else {\r\n                for (let i = 0; i + 2 < count; i += 3) {\r\n                    newIndices[i] = i;\r\n                    newIndices[i + 1] = i + 2;\r\n                    newIndices[i + 2] = i + 1;\r\n                }\r\n            }\r\n\r\n            indicesToExport = newIndices;\r\n        } else if (indices && offset !== 0) {\r\n            const newIndices = is32Bits ? new Uint32Array(count) : new Uint16Array(count);\r\n            for (let i = 0; i < count; i++) {\r\n                newIndices[i] = indices[start + i] + offset;\r\n            }\r\n\r\n            indicesToExport = newIndices;\r\n        }\r\n\r\n        if (indicesToExport) {\r\n            let accessorIndex = state.getIndicesAccessor(indices, start, count, offset, flip);\r\n            if (accessorIndex === undefined) {\r\n                const bytes = IndicesArrayToTypedArray(indicesToExport, 0, count, is32Bits);\r\n                const bufferView = this._bufferManager.createBufferView(bytes);\r\n\r\n                const componentType = is32Bits ? AccessorComponentType.UNSIGNED_INT : AccessorComponentType.UNSIGNED_SHORT;\r\n                this._accessors.push(this._bufferManager.createAccessor(bufferView, AccessorType.SCALAR, componentType, count, 0));\r\n                accessorIndex = this._accessors.length - 1;\r\n                state.setIndicesAccessor(indices, start, count, offset, flip, accessorIndex);\r\n            }\r\n\r\n            primitive.indices = accessorIndex;\r\n        }\r\n    }\r\n\r\n    private _exportVertexBuffer(vertexBuffer: VertexBuffer, babylonMaterial: Material, start: number, count: number, state: ExporterState, primitive: IMeshPrimitive): void {\r\n        const kind = vertexBuffer.getKind();\r\n\r\n        if (!IsStandardVertexAttribute(kind)) {\r\n            return;\r\n        }\r\n\r\n        if (kind.startsWith(\"uv\") && !this._options.exportUnusedUVs) {\r\n            if (!babylonMaterial || !this._materialNeedsUVsSet.has(babylonMaterial)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        let accessorIndex = state.getVertexAccessor(vertexBuffer, start, count);\r\n\r\n        if (accessorIndex === undefined) {\r\n            // Get min/max from converted or original data.\r\n            const data = state.convertedToRightHandedBuffers.get(vertexBuffer._buffer) || vertexBuffer._buffer.getData()!;\r\n            const minMax = kind === VertexBuffer.PositionKind ? GetMinMax(data, vertexBuffer, start, count) : undefined;\r\n\r\n            // For the remapped buffer views we created for float matrices indices, make sure to use their updated information.\r\n            const isFloatMatricesIndices =\r\n                (kind === VertexBuffer.MatricesIndicesKind || kind === VertexBuffer.MatricesIndicesExtraKind) && vertexBuffer.type === VertexBuffer.FLOAT;\r\n\r\n            const vertexBufferType = isFloatMatricesIndices ? VertexBuffer.UNSIGNED_BYTE : vertexBuffer.type;\r\n            const vertexBufferNormalized = isFloatMatricesIndices ? undefined : vertexBuffer.normalized;\r\n            const bufferView = isFloatMatricesIndices ? state.getRemappedBufferView(vertexBuffer._buffer, vertexBuffer)! : state.getVertexBufferView(vertexBuffer._buffer)!;\r\n\r\n            const byteOffset = vertexBuffer.byteOffset + start * vertexBuffer.byteStride;\r\n            this._accessors.push(\r\n                this._bufferManager.createAccessor(\r\n                    bufferView,\r\n                    GetAccessorType(kind, state.hasVertexColorAlpha(vertexBuffer)),\r\n                    vertexBufferType,\r\n                    count,\r\n                    byteOffset,\r\n                    minMax,\r\n                    vertexBufferNormalized // TODO: Find other places where this is needed.\r\n                )\r\n            );\r\n            accessorIndex = this._accessors.length - 1;\r\n            state.setVertexAccessor(vertexBuffer, start, count, accessorIndex);\r\n        }\r\n\r\n        primitive.attributes[GetAttributeType(kind)] = accessorIndex;\r\n    }\r\n\r\n    private async _exportMaterialAsync(babylonMaterial: Material, vertexBuffers: { [kind: string]: VertexBuffer }, subMesh: SubMesh, primitive: IMeshPrimitive): Promise<void> {\r\n        let materialIndex = this._materialMap.get(babylonMaterial);\r\n        if (materialIndex === undefined) {\r\n            const hasUVs = vertexBuffers && Object.keys(vertexBuffers).some((kind) => kind.startsWith(\"uv\"));\r\n            babylonMaterial = babylonMaterial instanceof MultiMaterial ? babylonMaterial.subMaterials[subMesh.materialIndex]! : babylonMaterial;\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                materialIndex = await this._materialExporter.exportPBRMaterialAsync(babylonMaterial, hasUVs);\r\n            } else if (babylonMaterial instanceof StandardMaterial) {\r\n                materialIndex = await this._materialExporter.exportStandardMaterialAsync(babylonMaterial, hasUVs);\r\n            } else {\r\n                Logger.Warn(`Unsupported material '${babylonMaterial.name}' with type ${babylonMaterial.getClassName()}`);\r\n                return;\r\n            }\r\n\r\n            this._materialMap.set(babylonMaterial, materialIndex);\r\n        }\r\n\r\n        primitive.material = materialIndex;\r\n    }\r\n\r\n    private async _exportMeshAsync(babylonMesh: Mesh, state: ExporterState): Promise<number> {\r\n        let meshIndex = state.getMesh(babylonMesh);\r\n        if (meshIndex !== undefined) {\r\n            return meshIndex;\r\n        }\r\n\r\n        const mesh: IMesh = { primitives: [] };\r\n        meshIndex = this._meshes.length;\r\n        this._meshes.push(mesh);\r\n        state.setMesh(babylonMesh, meshIndex);\r\n\r\n        const indices = babylonMesh.isUnIndexed ? null : babylonMesh.getIndices();\r\n        const vertexBuffers = babylonMesh.geometry?.getVertexBuffers();\r\n        const morphTargets = state.getMorphTargetsFromMesh(babylonMesh);\r\n\r\n        const isLinesMesh = babylonMesh instanceof LinesMesh;\r\n        const isGreasedLineMesh = babylonMesh instanceof GreasedLineBaseMesh;\r\n\r\n        const subMeshes = babylonMesh.subMeshes;\r\n        if (vertexBuffers && subMeshes && subMeshes.length > 0) {\r\n            for (const subMesh of subMeshes) {\r\n                const primitive: IMeshPrimitive = { attributes: {} };\r\n\r\n                const babylonMaterial = subMesh.getMaterial() || this._babylonScene.defaultMaterial;\r\n\r\n                if (isGreasedLineMesh) {\r\n                    const material: IMaterial = {\r\n                        name: babylonMaterial.name,\r\n                    };\r\n\r\n                    const babylonLinesMesh = babylonMesh;\r\n\r\n                    const colorWhite = Color3.White();\r\n                    const alpha = babylonLinesMesh.material?.alpha ?? 1;\r\n                    const color = babylonLinesMesh.greasedLineMaterial?.color ?? colorWhite;\r\n                    if (!color.equalsWithEpsilon(colorWhite, Epsilon) || alpha < 1) {\r\n                        material.pbrMetallicRoughness = {\r\n                            baseColorFactor: [...color.asArray(), alpha],\r\n                        };\r\n                    }\r\n\r\n                    this._materials.push(material);\r\n                    primitive.material = this._materials.length - 1;\r\n                } else if (isLinesMesh) {\r\n                    // Special case for LinesMesh\r\n                    const material: IMaterial = {\r\n                        name: babylonMaterial.name,\r\n                    };\r\n\r\n                    const babylonLinesMesh = babylonMesh;\r\n\r\n                    if (!babylonLinesMesh.color.equalsWithEpsilon(Color3.White(), Epsilon) || babylonLinesMesh.alpha < 1) {\r\n                        material.pbrMetallicRoughness = {\r\n                            baseColorFactor: [...babylonLinesMesh.color.asArray(), babylonLinesMesh.alpha],\r\n                        };\r\n                    }\r\n\r\n                    this._materials.push(material);\r\n                    primitive.material = this._materials.length - 1;\r\n                } else {\r\n                    // Material\r\n                    // eslint-disable-next-line no-await-in-loop\r\n                    await this._exportMaterialAsync(babylonMaterial, vertexBuffers, subMesh, primitive);\r\n                }\r\n\r\n                // Index buffer\r\n                const fillMode = isLinesMesh || isGreasedLineMesh ? Material.LineListDrawMode : (babylonMesh.overrideRenderingFillMode ?? babylonMaterial.fillMode);\r\n\r\n                let sideOrientation = babylonMaterial._getEffectiveOrientation(babylonMesh);\r\n                if (state.wasAddedByNoopNode && !babylonMesh.getScene().useRightHandedSystem) {\r\n                    // To properly remove a conversion node, we must also cancel out the implicit flip in its children's side orientations.\r\n                    sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n                }\r\n\r\n                this._exportIndices(\r\n                    indices,\r\n                    indices ? AreIndices32Bits(indices, subMesh.indexCount, subMesh.indexStart, subMesh.verticesStart) : subMesh.verticesCount > 65535,\r\n                    indices ? subMesh.indexStart : subMesh.verticesStart,\r\n                    indices ? subMesh.indexCount : subMesh.verticesCount,\r\n                    -subMesh.verticesStart,\r\n                    fillMode,\r\n                    sideOrientation,\r\n                    state,\r\n                    primitive\r\n                );\r\n\r\n                // Vertex buffers\r\n                for (const vertexBuffer of Object.values(vertexBuffers)) {\r\n                    this._exportVertexBuffer(vertexBuffer, babylonMaterial, subMesh.verticesStart, subMesh.verticesCount, state, primitive);\r\n                }\r\n\r\n                if (morphTargets) {\r\n                    primitive.targets = [];\r\n                    for (const gltfMorphTarget of morphTargets) {\r\n                        primitive.targets.push(gltfMorphTarget.attributes);\r\n                    }\r\n                }\r\n\r\n                mesh.primitives.push(primitive);\r\n                this._extensionsPostExportMeshPrimitive(primitive);\r\n            }\r\n        }\r\n\r\n        if (morphTargets) {\r\n            mesh.weights = [];\r\n\r\n            if (!mesh.extras) {\r\n                mesh.extras = {};\r\n            }\r\n            mesh.extras.targetNames = [];\r\n\r\n            for (const gltfMorphTarget of morphTargets) {\r\n                mesh.weights.push(gltfMorphTarget.influence);\r\n                mesh.extras.targetNames.push(gltfMorphTarget.name);\r\n            }\r\n        }\r\n\r\n        return meshIndex;\r\n    }\r\n}\r\n","import type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { GLTFData } from \"./glTFData\";\r\nimport { GLTFExporter } from \"./glTFExporter\";\r\n\r\n/**\r\n * Mesh compression methods.\r\n */\r\nexport type MeshCompressionMethod = \"None\" | \"Draco\";\r\n\r\n/**\r\n * Holds a collection of exporter options and parameters\r\n */\r\nexport interface IExportOptions {\r\n    /**\r\n     * Function which indicates whether a babylon node should be exported or not\r\n     * @param node source Babylon node. It is used to check whether it should be exported to glTF or not\r\n     * @returns boolean, which indicates whether the node should be exported (true) or not (false)\r\n     */\r\n    shouldExportNode?(node: Node): boolean;\r\n\r\n    /**\r\n     * Function which indicates whether an animation on the scene should be exported or not\r\n     * @param animation source animation\r\n     * @returns boolean, which indicates whether the animation should be exported (true) or not (false)\r\n     */\r\n    shouldExportAnimation?(animation: Animation): boolean;\r\n\r\n    /**\r\n     * Function to extract the part of the scene or node's `metadata` that will populate the corresponding\r\n     * glTF object's `extras` field. If not defined, `node.metadata.gltf.extras` will be used.\r\n     * @param metadata source metadata to read from\r\n     * @returns the data to store into the glTF extras field\r\n     */\r\n    metadataSelector?(metadata: any): any;\r\n\r\n    /**\r\n     * The sample rate to bake animation curves. Defaults to 1 / 60.\r\n     */\r\n    animationSampleRate?: number;\r\n\r\n    /**\r\n     * Begin serialization without waiting for the scene to be ready. Defaults to false.\r\n     */\r\n    exportWithoutWaitingForScene?: boolean;\r\n\r\n    /**\r\n     * Indicates if unused vertex uv attributes should be included in export. Defaults to false.\r\n     */\r\n    exportUnusedUVs?: boolean;\r\n\r\n    /**\r\n     * Remove no-op root nodes when possible. Defaults to true.\r\n     */\r\n    removeNoopRootNodes?: boolean;\r\n\r\n    /**\r\n     * Indicates if coordinate system swapping root nodes should be included in export. Defaults to false.\r\n     * @deprecated Please use removeNoopRootNodes instead\r\n     */\r\n    includeCoordinateSystemConversionNodes?: boolean;\r\n\r\n    /**\r\n     * Indicates what compression method to apply to mesh data.\r\n     */\r\n    meshCompressionMethod?: MeshCompressionMethod;\r\n}\r\n\r\n/**\r\n * Class for generating glTF data from a Babylon scene.\r\n */\r\nexport class GLTF2Export {\r\n    /**\r\n     * Exports the scene to .gltf file format\r\n     * @param scene Babylon scene\r\n     * @param fileName Name to use for the .gltf file\r\n     * @param options Exporter options\r\n     * @returns Returns the exported data\r\n     */\r\n    public static async GLTFAsync(scene: Scene, fileName: string, options?: IExportOptions): Promise<GLTFData> {\r\n        if (!options || !options.exportWithoutWaitingForScene) {\r\n            await scene.whenReadyAsync();\r\n        }\r\n\r\n        const exporter = new GLTFExporter(scene, options);\r\n        const data = await exporter.generateGLTFAsync(fileName.replace(/\\.[^/.]+$/, \"\"));\r\n        exporter.dispose();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Exports the scene to .glb file format\r\n     * @param scene Babylon scene\r\n     * @param fileName Name to use for the .glb file\r\n     * @param options Exporter options\r\n     * @returns Returns the exported data\r\n     */\r\n    public static async GLBAsync(scene: Scene, fileName: string, options?: IExportOptions): Promise<GLTFData> {\r\n        if (!options || !options.exportWithoutWaitingForScene) {\r\n            await scene.whenReadyAsync();\r\n        }\r\n\r\n        const exporter = new GLTFExporter(scene, options);\r\n        const data = await exporter.generateGLBAsync(fileName.replace(/\\.[^/.]+$/, \"\"));\r\n        exporter.dispose();\r\n\r\n        return data;\r\n    }\r\n}\r\n","import type { INode, IEXTMeshGpuInstancing } from \"babylonjs-gltf2interface\";\r\nimport { AccessorType, AccessorComponentType } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport type { BufferManager } from \"../bufferManager\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Node } from \"core/node\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport \"core/Meshes/thinInstanceMesh\";\r\nimport { TmpVectors, Quaternion, Vector3 } from \"core/Maths/math.vector\";\r\nimport { ConvertToRightHandedPosition, ConvertToRightHandedRotation } from \"../glTFUtilities\";\r\n\r\nconst NAME = \"EXT_mesh_gpu_instancing\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_mesh_gpu_instancing implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After node is exported\r\n     * @param context the GLTF context when loading the asset\r\n     * @param node the node exported\r\n     * @param babylonNode the corresponding babylon node\r\n     * @param nodeMap map from babylon node id to node index\r\n     * @param convertToRightHanded true if we need to convert data from left hand to right hand system.\r\n     * @param bufferManager buffer manager\r\n     * @returns nullable promise, resolves with the node\r\n     */\r\n    public async postExportNodeAsync(\r\n        context: string,\r\n        node: Nullable<INode>,\r\n        babylonNode: Node,\r\n        nodeMap: Map<Node, number>,\r\n        convertToRightHanded: boolean,\r\n        bufferManager: BufferManager\r\n    ): Promise<Nullable<INode>> {\r\n        return await new Promise((resolve) => {\r\n            if (node && babylonNode instanceof Mesh) {\r\n                if (babylonNode.hasThinInstances && this._exporter) {\r\n                    this._wasUsed = true;\r\n\r\n                    const noTranslation = Vector3.Zero();\r\n                    const noRotation = Quaternion.Identity();\r\n                    const noScale = Vector3.One();\r\n\r\n                    // retrieve all the instance world matrix\r\n                    const matrix = babylonNode.thinInstanceGetWorldMatrices();\r\n\r\n                    const iwt = TmpVectors.Vector3[2];\r\n                    const iwr = TmpVectors.Quaternion[1];\r\n                    const iws = TmpVectors.Vector3[3];\r\n\r\n                    let hasAnyInstanceWorldTranslation = false;\r\n                    let hasAnyInstanceWorldRotation = false;\r\n                    let hasAnyInstanceWorldScale = false;\r\n\r\n                    // prepare temp buffers\r\n                    const translationBuffer = new Float32Array(babylonNode.thinInstanceCount * 3);\r\n                    const rotationBuffer = new Float32Array(babylonNode.thinInstanceCount * 4);\r\n                    const scaleBuffer = new Float32Array(babylonNode.thinInstanceCount * 3);\r\n\r\n                    let i = 0;\r\n                    for (const m of matrix) {\r\n                        m.decompose(iws, iwr, iwt);\r\n\r\n                        if (convertToRightHanded) {\r\n                            ConvertToRightHandedPosition(iwt);\r\n                            ConvertToRightHandedRotation(iwr);\r\n                        }\r\n\r\n                        // fill the temp buffer\r\n                        translationBuffer.set(iwt.asArray(), i * 3);\r\n                        rotationBuffer.set(iwr.normalize().asArray(), i * 4); // ensure the quaternion is normalized\r\n                        scaleBuffer.set(iws.asArray(), i * 3);\r\n\r\n                        // this is where we decide if there is any transformation\r\n                        hasAnyInstanceWorldTranslation = hasAnyInstanceWorldTranslation || !iwt.equalsWithEpsilon(noTranslation);\r\n                        hasAnyInstanceWorldRotation = hasAnyInstanceWorldRotation || !iwr.equalsWithEpsilon(noRotation);\r\n                        hasAnyInstanceWorldScale = hasAnyInstanceWorldScale || !iws.equalsWithEpsilon(noScale);\r\n\r\n                        i++;\r\n                    }\r\n\r\n                    const extension: IEXTMeshGpuInstancing = {\r\n                        attributes: {},\r\n                    };\r\n\r\n                    // do we need to write TRANSLATION ?\r\n                    if (hasAnyInstanceWorldTranslation) {\r\n                        extension.attributes[\"TRANSLATION\"] = this._buildAccessor(translationBuffer, AccessorType.VEC3, babylonNode.thinInstanceCount, bufferManager);\r\n                    }\r\n                    // do we need to write ROTATION ?\r\n                    if (hasAnyInstanceWorldRotation) {\r\n                        // we decided to stay on FLOAT for now see https://github.com/BabylonJS/Babylon.js/pull/12495\r\n                        extension.attributes[\"ROTATION\"] = this._buildAccessor(rotationBuffer, AccessorType.VEC4, babylonNode.thinInstanceCount, bufferManager);\r\n                    }\r\n                    // do we need to write SCALE ?\r\n                    if (hasAnyInstanceWorldScale) {\r\n                        extension.attributes[\"SCALE\"] = this._buildAccessor(scaleBuffer, AccessorType.VEC3, babylonNode.thinInstanceCount, bufferManager);\r\n                    }\r\n\r\n                    /* eslint-enable @typescript-eslint/naming-convention*/\r\n                    node.extensions = node.extensions || {};\r\n                    node.extensions[NAME] = extension;\r\n                }\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n\r\n    private _buildAccessor(buffer: Float32Array, type: AccessorType, count: number, bufferManager: BufferManager): number {\r\n        // build the buffer view\r\n        const bv = bufferManager.createBufferView(buffer);\r\n\r\n        // finally build the accessor\r\n        const accessor = bufferManager.createAccessor(bv, type, AccessorComponentType.FLOAT, count);\r\n        this._exporter._accessors.push(accessor);\r\n        return this._exporter._accessors.length - 1;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new EXT_mesh_gpu_instancing(exporter));\r\n","import type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\nimport { GLTFExporter } from \"../glTFExporter\";\nimport { MeshPrimitiveMode } from \"babylonjs-gltf2interface\";\nimport type { IAccessor, IBufferView, IKHRDracoMeshCompression, IMeshPrimitive } from \"babylonjs-gltf2interface\";\nimport type { BufferManager } from \"../bufferManager\";\nimport { DracoEncoder } from \"core/Meshes/Compression/dracoEncoder\";\nimport { GetTypedArrayData, GetTypeByteLength } from \"core/Buffers/bufferUtils\";\nimport { GetAccessorElementCount } from \"../glTFUtilities\";\nimport type { DracoAttributeName, IDracoAttributeData, IDracoEncoderOptions } from \"core/Meshes/Compression/dracoEncoder.types\";\nimport { Logger } from \"core/Misc/logger\";\nimport type { Nullable } from \"core/types\";\n\nconst NAME = \"KHR_draco_mesh_compression\";\n\nfunction GetDracoAttributeName(glTFName: string): DracoAttributeName {\n    if (glTFName === \"POSITION\") {\n        return \"POSITION\";\n    } else if (glTFName === \"NORMAL\") {\n        return \"NORMAL\";\n    } else if (glTFName.startsWith(\"COLOR\")) {\n        return \"COLOR\";\n    } else if (glTFName.startsWith(\"TEXCOORD\")) {\n        return \"TEX_COORD\";\n    }\n    return \"GENERIC\";\n}\n\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_draco_mesh_compression implements IGLTFExporterExtensionV2 {\n    /** Name of this extension */\n    public readonly name = NAME;\n\n    /** Defines whether this extension is enabled */\n    public enabled;\n\n    /** KHR_draco_mesh_compression is required, as uncompressed fallback data is not yet implemented. */\n    public required = true;\n\n    /** BufferViews used for Draco data, which may be eligible for removal after Draco encoding */\n    private _bufferViewsUsed: Set<IBufferView> = new Set();\n\n    /** Accessors that were replaced with Draco data, which may be eligible for removal after Draco encoding */\n    private _accessorsUsed: Set<IAccessor> = new Set();\n\n    /** Promise pool for Draco encoding work */\n    private _encodePromises: Promise<void>[] = [];\n\n    private _wasUsed = false;\n\n    /** @internal */\n    public get wasUsed() {\n        return this._wasUsed;\n    }\n\n    /** @internal */\n    constructor(exporter: GLTFExporter) {\n        this.enabled = exporter.options.meshCompressionMethod === \"Draco\" && DracoEncoder.DefaultAvailable;\n    }\n\n    /** @internal */\n    public dispose() {}\n\n    /** @internal */\n    public postExportMeshPrimitive(primitive: IMeshPrimitive, bufferManager: BufferManager, accessors: IAccessor[]): void {\n        if (!this.enabled) {\n            return;\n        }\n\n        if (primitive.mode !== MeshPrimitiveMode.TRIANGLES && primitive.mode !== MeshPrimitiveMode.TRIANGLE_STRIP) {\n            Logger.Warn(\"Cannot compress primitive with mode \" + primitive.mode + \".\");\n            return;\n        }\n\n        // Collect bufferViews and accessors used by this primitive\n        const primitiveBufferViews: IBufferView[] = [];\n        const primitiveAccessors: IAccessor[] = [];\n\n        // Prepare indices for Draco encoding\n        let indices: Nullable<Uint32Array | Uint16Array> = null;\n        if (primitive.indices !== undefined) {\n            const accessor = accessors[primitive.indices];\n            const bufferView = bufferManager.getBufferView(accessor);\n            // Per exportIndices, indices must be either Uint16Array or Uint32Array\n            indices = bufferManager.getData(bufferView).slice() as Uint32Array | Uint16Array;\n\n            primitiveBufferViews.push(bufferView);\n            primitiveAccessors.push(accessor);\n        }\n\n        // Prepare attributes for Draco encoding\n        const attributes: IDracoAttributeData[] = [];\n        for (const [name, accessorIndex] of Object.entries(primitive.attributes)) {\n            const accessor = accessors[accessorIndex];\n            const bufferView = bufferManager.getBufferView(accessor);\n\n            const size = GetAccessorElementCount(accessor.type);\n            const data = GetTypedArrayData(\n                bufferManager.getData(bufferView),\n                size,\n                accessor.componentType,\n                accessor.byteOffset || 0,\n                bufferView.byteStride || GetTypeByteLength(accessor.componentType) * size,\n                accessor.normalized || false,\n                accessor.count,\n                true\n            );\n\n            attributes.push({ kind: name, dracoName: GetDracoAttributeName(name), size: GetAccessorElementCount(accessor.type), data: data });\n\n            primitiveBufferViews.push(bufferView);\n            primitiveAccessors.push(accessor);\n        }\n\n        // Use sequential encoding to preserve vertex order for cases like morph targets\n        const options: IDracoEncoderOptions = {\n            method: primitive.targets ? \"MESH_SEQUENTIAL_ENCODING\" : \"MESH_EDGEBREAKER_ENCODING\",\n        };\n\n        const promise = DracoEncoder.Default._encodeAsync(attributes, indices, options)\n            // eslint-disable-next-line github/no-then\n            .then((encodedData) => {\n                if (!encodedData) {\n                    Logger.Error(\"Draco encoding failed for primitive.\");\n                    return;\n                }\n\n                const dracoInfo: IKHRDracoMeshCompression = {\n                    bufferView: -1, // bufferView will be set to a real index later, when we write the binary and decide bufferView ordering\n                    attributes: encodedData.attributeIds,\n                };\n                const bufferView = bufferManager.createBufferView(encodedData.data);\n                bufferManager.setBufferView(dracoInfo, bufferView);\n\n                for (const bufferView of primitiveBufferViews) {\n                    this._bufferViewsUsed.add(bufferView);\n                }\n                for (const accessor of primitiveAccessors) {\n                    this._accessorsUsed.add(accessor);\n                }\n\n                primitive.extensions ||= {};\n                primitive.extensions[NAME] = dracoInfo;\n            })\n            // eslint-disable-next-line github/no-then\n            .catch((error) => {\n                Logger.Error(\"Draco encoding failed for primitive: \" + error);\n            });\n\n        this._encodePromises.push(promise);\n\n        this._wasUsed = true;\n    }\n\n    /** @internal */\n    public async preGenerateBinaryAsync(bufferManager: BufferManager): Promise<void> {\n        if (!this.enabled) {\n            return;\n        }\n\n        await Promise.all(this._encodePromises);\n\n        // Cull obsolete bufferViews that were replaced with Draco data\n        this._bufferViewsUsed.forEach((bufferView) => {\n            const references = bufferManager.getPropertiesWithBufferView(bufferView);\n            const onlyUsedByEncodedPrimitives = references.every((object) => {\n                return this._accessorsUsed.has(object as IAccessor); // has() can handle any object, but TS doesn't know that\n            });\n            if (onlyUsedByEncodedPrimitives) {\n                bufferManager.removeBufferView(bufferView);\n            }\n        });\n\n        this._bufferViewsUsed.clear();\n        this._accessorsUsed.clear();\n    }\n}\n\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_draco_mesh_compression(exporter));\n","import type { SpotLight } from \"core/Lights/spotLight\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3, Quaternion, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { Node } from \"core/node\";\r\nimport { ShadowLight } from \"core/Lights/shadowLight\";\r\nimport type { INode, IKHRLightsPunctual_LightReference, IKHRLightsPunctual_Light, IKHRLightsPunctual } from \"babylonjs-gltf2interface\";\r\nimport { KHRLightsPunctual_LightType } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport { ConvertToRightHandedPosition, OmitDefaultValues, CollapseChildIntoParent, IsChildCollapsible } from \"../glTFUtilities\";\r\n\r\nconst NAME = \"KHR_lights_punctual\";\r\nconst DEFAULTS: Omit<IKHRLightsPunctual_Light, \"type\"> = {\r\n    name: \"\",\r\n    color: [1, 1, 1],\r\n    intensity: 1,\r\n    range: Number.MAX_VALUE,\r\n};\r\nconst SPOTDEFAULTS: NonNullable<IKHRLightsPunctual_Light[\"spot\"]> = {\r\n    innerConeAngle: 0,\r\n    outerConeAngle: Math.PI / 4.0,\r\n};\r\nconst LIGHTDIRECTION = Vector3.Backward();\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_lights_punctual implements IGLTFExporterExtensionV2 {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    /** Reference to the glTF exporter */\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _lights: IKHRLightsPunctual;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._lights as any) = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return !!this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onExporting(): void {\r\n        this._exporter._glTF.extensions![NAME] = this._lights;\r\n    }\r\n    /**\r\n     * Define this method to modify the default behavior when exporting a node\r\n     * @param context The context when exporting the node\r\n     * @param node glTF node\r\n     * @param babylonNode BabylonJS node\r\n     * @param nodeMap Node mapping of babylon node to glTF node index\r\n     * @param convertToRightHanded Flag to convert the values to right-handed\r\n     * @returns nullable INode promise\r\n     */\r\n    public async postExportNodeAsync(context: string, node: INode, babylonNode: Node, nodeMap: Map<Node, number>, convertToRightHanded: boolean): Promise<Nullable<INode>> {\r\n        return await new Promise((resolve) => {\r\n            if (!(babylonNode instanceof Light)) {\r\n                resolve(node);\r\n                return;\r\n            }\r\n\r\n            const lightType =\r\n                babylonNode.getTypeID() == Light.LIGHTTYPEID_POINTLIGHT\r\n                    ? KHRLightsPunctual_LightType.POINT\r\n                    : babylonNode.getTypeID() == Light.LIGHTTYPEID_DIRECTIONALLIGHT\r\n                      ? KHRLightsPunctual_LightType.DIRECTIONAL\r\n                      : babylonNode.getTypeID() == Light.LIGHTTYPEID_SPOTLIGHT\r\n                        ? KHRLightsPunctual_LightType.SPOT\r\n                        : null;\r\n            if (!lightType || !(babylonNode instanceof ShadowLight)) {\r\n                Logger.Warn(`${context}: Light ${babylonNode.name} is not supported in ${NAME}`);\r\n                resolve(node);\r\n                return;\r\n            }\r\n\r\n            if (babylonNode.falloffType !== Light.FALLOFF_GLTF) {\r\n                Logger.Warn(`${context}: Light falloff for ${babylonNode.name} does not match the ${NAME} specification!`);\r\n            }\r\n\r\n            // Set the node's translation and rotation here, since lights are not handled in exportNodeAsync\r\n            if (!babylonNode.position.equalsToFloats(0, 0, 0)) {\r\n                const translation = TmpVectors.Vector3[0].copyFrom(babylonNode.position);\r\n                if (convertToRightHanded) {\r\n                    ConvertToRightHandedPosition(translation);\r\n                }\r\n                node.translation = translation.asArray();\r\n            }\r\n\r\n            // Represent the Babylon light's direction as a quaternion\r\n            // relative to glTF lights' forward direction, (0, 0, -1).\r\n            if (lightType !== KHRLightsPunctual_LightType.POINT) {\r\n                const direction = babylonNode.direction.normalizeToRef(TmpVectors.Vector3[0]);\r\n                if (convertToRightHanded) {\r\n                    ConvertToRightHandedPosition(direction);\r\n                }\r\n\r\n                const lightRotationQuaternion = Quaternion.FromUnitVectorsToRef(LIGHTDIRECTION, direction, TmpVectors.Quaternion[0]);\r\n                if (!Quaternion.IsIdentity(lightRotationQuaternion)) {\r\n                    node.rotation = lightRotationQuaternion.asArray();\r\n                }\r\n            }\r\n\r\n            const light: IKHRLightsPunctual_Light = {\r\n                type: lightType,\r\n                name: babylonNode.name,\r\n                color: babylonNode.diffuse.asArray(),\r\n                intensity: babylonNode.intensity,\r\n                range: babylonNode.range,\r\n            };\r\n            OmitDefaultValues(light, DEFAULTS);\r\n\r\n            // Separately handle the required 'spot' field for spot lights\r\n            if (lightType === KHRLightsPunctual_LightType.SPOT) {\r\n                const babylonSpotLight = babylonNode as SpotLight;\r\n                light.spot = {\r\n                    innerConeAngle: babylonSpotLight.innerAngle / 2.0,\r\n                    outerConeAngle: babylonSpotLight.angle / 2.0,\r\n                };\r\n                OmitDefaultValues(light.spot, SPOTDEFAULTS);\r\n            }\r\n\r\n            this._lights ||= {\r\n                lights: [],\r\n            };\r\n            this._lights.lights.push(light);\r\n\r\n            const lightReference: IKHRLightsPunctual_LightReference = {\r\n                light: this._lights.lights.length - 1,\r\n            };\r\n\r\n            // Assign the light to its parent node, if possible, to condense the glTF\r\n            // Why and when: the glTF loader generates a new parent TransformNode for each light node, which we should undo on export\r\n            const parentBabylonNode = babylonNode.parent;\r\n\r\n            if (parentBabylonNode && IsChildCollapsible(babylonNode, parentBabylonNode)) {\r\n                const parentNodeIndex = nodeMap.get(parentBabylonNode);\r\n                if (parentNodeIndex) {\r\n                    // Combine the light's transformation with the parent's\r\n                    const parentNode = this._exporter._nodes[parentNodeIndex];\r\n                    CollapseChildIntoParent(node, parentNode);\r\n                    parentNode.extensions ||= {};\r\n                    parentNode.extensions[NAME] = lightReference;\r\n\r\n                    // Do not export the original node\r\n                    resolve(null);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            node.extensions ||= {};\r\n            node.extensions[NAME] = lightReference;\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_lights_punctual(exporter));\r\n","import type { IMaterial, IKHRMaterialsAnisotropy } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_anisotropy\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_anisotropy implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n        if (babylonMaterial instanceof PBRBaseMaterial) {\r\n            if (babylonMaterial.anisotropy.isEnabled && !babylonMaterial.anisotropy.legacy) {\r\n                if (babylonMaterial.anisotropy.texture) {\r\n                    additionalTextures.push(babylonMaterial.anisotropy.texture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                if (!babylonMaterial.anisotropy.isEnabled || babylonMaterial.anisotropy.legacy) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const anisotropyTextureInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial.anisotropy.texture);\r\n\r\n                const anisotropyInfo: IKHRMaterialsAnisotropy = {\r\n                    anisotropyStrength: babylonMaterial.anisotropy.intensity,\r\n                    anisotropyRotation: babylonMaterial.anisotropy.angle,\r\n                    anisotropyTexture: anisotropyTextureInfo ?? undefined,\r\n                };\r\n\r\n                if (anisotropyInfo.anisotropyTexture !== null) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                node.extensions[NAME] = anisotropyInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_anisotropy(exporter));\r\n","import type { IMaterial, IKHRMaterialsClearcoat } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\nconst NAME = \"KHR_materials_clearcoat\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_clearcoat implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n        if (babylonMaterial instanceof PBRBaseMaterial) {\r\n            if (babylonMaterial.clearCoat.isEnabled) {\r\n                if (babylonMaterial.clearCoat.texture) {\r\n                    additionalTextures.push(babylonMaterial.clearCoat.texture);\r\n                }\r\n                if (!babylonMaterial.clearCoat.useRoughnessFromMainTexture && babylonMaterial.clearCoat.textureRoughness) {\r\n                    additionalTextures.push(babylonMaterial.clearCoat.textureRoughness);\r\n                }\r\n                if (babylonMaterial.clearCoat.bumpTexture) {\r\n                    additionalTextures.push(babylonMaterial.clearCoat.bumpTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                if (!babylonMaterial.clearCoat.isEnabled) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const clearCoatTextureInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial.clearCoat.texture);\r\n                let clearCoatTextureRoughnessInfo;\r\n                if (babylonMaterial.clearCoat.useRoughnessFromMainTexture) {\r\n                    clearCoatTextureRoughnessInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial.clearCoat.texture);\r\n                } else {\r\n                    clearCoatTextureRoughnessInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial.clearCoat.textureRoughness);\r\n                }\r\n\r\n                if (babylonMaterial.clearCoat.isTintEnabled) {\r\n                    Tools.Warn(`Clear Color tint is not supported for glTF export. Ignoring for: ${babylonMaterial.name}`);\r\n                }\r\n\r\n                if (babylonMaterial.clearCoat.remapF0OnInterfaceChange) {\r\n                    Tools.Warn(`Clear Color F0 remapping is not supported for glTF export. Ignoring for: ${babylonMaterial.name}`);\r\n                }\r\n\r\n                const clearCoatNormalTextureInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial.clearCoat.bumpTexture);\r\n\r\n                const clearCoatInfo: IKHRMaterialsClearcoat = {\r\n                    clearcoatFactor: babylonMaterial.clearCoat.intensity,\r\n                    clearcoatTexture: clearCoatTextureInfo ?? undefined,\r\n                    clearcoatRoughnessFactor: babylonMaterial.clearCoat.roughness,\r\n                    clearcoatRoughnessTexture: clearCoatTextureRoughnessInfo ?? undefined,\r\n                    clearcoatNormalTexture: clearCoatNormalTextureInfo ?? undefined,\r\n                };\r\n\r\n                if (clearCoatInfo.clearcoatTexture !== null || clearCoatInfo.clearcoatRoughnessTexture !== null || clearCoatInfo.clearcoatRoughnessTexture !== null) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                node.extensions[NAME] = clearCoatInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_clearcoat(exporter));\r\n","import type { IMaterial, IKHRMaterialsDiffuseTransmission } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\nconst NAME = \"KHR_materials_diffuse_transmission\";\r\n\r\n/**\r\n * Get the appropriate translucency intensity texture for the material.\r\n * @internal\r\n */\r\nfunction GetTranslucencyIntensityTexture(context: string, babylonMaterial: PBRMaterial): Nullable<BaseTexture> {\r\n    const subs = babylonMaterial.subSurface;\r\n    let texture = null;\r\n\r\n    // Check if translucency intensity texture is available or can be derived from thickness texture\r\n    if (subs.translucencyIntensityTexture) {\r\n        texture = subs.translucencyIntensityTexture;\r\n    } else if (subs.thicknessTexture && subs.useMaskFromThicknessTexture) {\r\n        texture = subs.thicknessTexture;\r\n    }\r\n\r\n    if (texture && !subs.useGltfStyleTextures) {\r\n        Logger.Warn(`${context}: Translucency intensity texture is not supported when useGltfStyleTextures = false. Ignoring for: ${babylonMaterial.name}`, 1);\r\n        return null;\r\n    }\r\n\r\n    return texture;\r\n}\r\n\r\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_diffuse_transmission implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material, deal with additional textures\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns array of additional textures to export\r\n     */\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n\r\n        if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n            const translucencyIntensityTexture = GetTranslucencyIntensityTexture(context, babylonMaterial);\r\n            if (translucencyIntensityTexture) {\r\n                additionalTextures.push(translucencyIntensityTexture);\r\n            }\r\n            if (babylonMaterial.subSurface.translucencyColorTexture) {\r\n                additionalTextures.push(babylonMaterial.subSurface.translucencyColorTexture);\r\n            }\r\n            return additionalTextures;\r\n        }\r\n\r\n        return additionalTextures;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        const subs = mat.subSurface;\r\n        if (!subs.isTranslucencyEnabled) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            !mat.unlit &&\r\n            !subs.useAlbedoToTintTranslucency &&\r\n            subs.useGltfStyleTextures &&\r\n            subs.volumeIndexOfRefraction === 1 &&\r\n            subs.minimumThickness === 0 &&\r\n            subs.maximumThickness === 0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise that resolves with the updated node\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const subs = babylonMaterial.subSurface;\r\n                const translucencyIntensityTexture = GetTranslucencyIntensityTexture(context, babylonMaterial);\r\n\r\n                const diffuseTransmissionFactor = subs.translucencyIntensity == 0 ? undefined : subs.translucencyIntensity;\r\n                const diffuseTransmissionTexture = this._exporter._materialExporter.getTextureInfo(translucencyIntensityTexture) ?? undefined;\r\n                const diffuseTransmissionColorFactor = !subs.translucencyColor || subs.translucencyColor.equalsFloats(1.0, 1.0, 1.0) ? undefined : subs.translucencyColor.asArray();\r\n                const diffuseTransmissionColorTexture = this._exporter._materialExporter.getTextureInfo(subs.translucencyColorTexture) ?? undefined;\r\n\r\n                const diffuseTransmissionInfo: IKHRMaterialsDiffuseTransmission = {\r\n                    diffuseTransmissionFactor,\r\n                    diffuseTransmissionTexture,\r\n                    diffuseTransmissionColorFactor,\r\n                    diffuseTransmissionColorTexture,\r\n                };\r\n\r\n                if (diffuseTransmissionTexture || diffuseTransmissionColorTexture) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = diffuseTransmissionInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_diffuse_transmission(exporter));\r\n","import type { IMaterial, IKHRMaterialsDispersion } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\nconst NAME = \"KHR_materials_dispersion\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/87bd64a7f5e23c84b6aef2e6082069583ed0ddb4/extensions/2.0/Khronos/KHR_materials_dispersion/README.md)\r\n * @experimental\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_dispersion implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    /** Constructor */\r\n    constructor() {}\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        const subs = mat.subSurface;\r\n        // this extension requires refraction to be enabled.\r\n        if (!subs.isRefractionEnabled && !subs.isDispersionEnabled) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const subs = babylonMaterial.subSurface;\r\n                const dispersion = subs.dispersion;\r\n\r\n                const dispersionInfo: IKHRMaterialsDispersion = {\r\n                    dispersion: dispersion,\r\n                };\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = dispersionInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, () => new KHR_materials_dispersion());\r\n","import type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { IMaterial, IKHRMaterialsEmissiveStrength } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_emissive_strength\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_emissive_strength implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    public async postExportMaterialAsync(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return await new Promise((resolve) => {\r\n            if (!(babylonMaterial instanceof PBRMaterial)) {\r\n                return resolve(node);\r\n            }\r\n\r\n            const emissiveColor = babylonMaterial.emissiveColor.asArray();\r\n            const tempEmissiveStrength = Math.max(...emissiveColor);\r\n\r\n            if (tempEmissiveStrength > 1) {\r\n                this._wasUsed = true;\r\n\r\n                node.extensions ||= {};\r\n\r\n                const emissiveStrengthInfo: IKHRMaterialsEmissiveStrength = {\r\n                    emissiveStrength: tempEmissiveStrength,\r\n                };\r\n\r\n                // Normalize each value of the emissive factor to have a max value of 1\r\n                const newEmissiveFactor = babylonMaterial.emissiveColor.scale(1 / emissiveStrengthInfo.emissiveStrength);\r\n\r\n                node.emissiveFactor = newEmissiveFactor.asArray();\r\n                node.extensions[NAME] = emissiveStrengthInfo;\r\n            }\r\n\r\n            return resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_emissive_strength());\r\n","import type { IMaterial, IKHRMaterialsIor } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\n\r\nconst NAME = \"KHR_materials_ior\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_ior/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_ior implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor() {}\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        return mat.indexOfRefraction != undefined && mat.indexOfRefraction != 1.5; // 1.5 is normative default value.\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const iorInfo: IKHRMaterialsIor = {\r\n                    ior: babylonMaterial.indexOfRefraction,\r\n                };\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = iorInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_ior());\r\n","import type { IMaterial, IKHRMaterialsIridescence } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_iridescence\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_iridescence implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n        if (babylonMaterial instanceof PBRBaseMaterial) {\r\n            if (babylonMaterial.iridescence.isEnabled) {\r\n                if (babylonMaterial.iridescence.texture) {\r\n                    additionalTextures.push(babylonMaterial.iridescence.texture);\r\n                }\r\n                if (babylonMaterial.iridescence.thicknessTexture && babylonMaterial.iridescence.thicknessTexture !== babylonMaterial.iridescence.texture) {\r\n                    additionalTextures.push(babylonMaterial.iridescence.thicknessTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                if (!babylonMaterial.iridescence.isEnabled) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const iridescenceTextureInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial.iridescence.texture);\r\n                const iridescenceThicknessTextureInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial.iridescence.thicknessTexture);\r\n\r\n                const iridescenceInfo: IKHRMaterialsIridescence = {\r\n                    iridescenceFactor: babylonMaterial.iridescence.intensity,\r\n                    iridescenceIor: babylonMaterial.iridescence.indexOfRefraction,\r\n                    iridescenceThicknessMinimum: babylonMaterial.iridescence.minimumThickness,\r\n                    iridescenceThicknessMaximum: babylonMaterial.iridescence.maximumThickness,\r\n\r\n                    iridescenceTexture: iridescenceTextureInfo ?? undefined,\r\n                    iridescenceThicknessTexture: iridescenceThicknessTextureInfo ?? undefined,\r\n                };\r\n\r\n                if (iridescenceInfo.iridescenceTexture !== null || iridescenceInfo.iridescenceThicknessTexture !== null) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                node.extensions[NAME] = iridescenceInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_iridescence(exporter));\r\n","import type { IMaterial, IKHRMaterialsSheen } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_sheen\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_sheen implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (babylonMaterial.sheen.isEnabled && babylonMaterial.sheen.texture) {\r\n                return [babylonMaterial.sheen.texture];\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public async postExportMaterialAsync(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return await new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial) {\r\n                if (!babylonMaterial.sheen.isEnabled) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                if (node.extensions == null) {\r\n                    node.extensions = {};\r\n                }\r\n                const sheenInfo: IKHRMaterialsSheen = {\r\n                    sheenColorFactor: babylonMaterial.sheen.color.asArray(),\r\n                    sheenRoughnessFactor: babylonMaterial.sheen.roughness ?? 0,\r\n                };\r\n\r\n                if (sheenInfo.sheenColorTexture !== null || sheenInfo.sheenRoughnessTexture !== null) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                if (babylonMaterial.sheen.texture) {\r\n                    sheenInfo.sheenColorTexture = this._exporter._materialExporter.getTextureInfo(babylonMaterial.sheen.texture) ?? undefined;\r\n                }\r\n\r\n                if (babylonMaterial.sheen.textureRoughness && !babylonMaterial.sheen.useRoughnessFromMainTexture) {\r\n                    sheenInfo.sheenRoughnessTexture = this._exporter._materialExporter.getTextureInfo(babylonMaterial.sheen.textureRoughness) ?? undefined;\r\n                } else if (babylonMaterial.sheen.texture && babylonMaterial.sheen.useRoughnessFromMainTexture) {\r\n                    sheenInfo.sheenRoughnessTexture = this._exporter._materialExporter.getTextureInfo(babylonMaterial.sheen.texture) ?? undefined;\r\n                }\r\n\r\n                node.extensions[NAME] = sheenInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_sheen(exporter));\r\n","import type { IMaterial, IKHRMaterialsSpecular } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"KHR_materials_specular\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_specular implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material, deal with the additional textures\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns array of additional textures to export\r\n     */\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (this._isExtensionEnabled(babylonMaterial)) {\r\n                if (babylonMaterial.metallicReflectanceTexture) {\r\n                    additionalTextures.push(babylonMaterial.metallicReflectanceTexture);\r\n                }\r\n                if (babylonMaterial.reflectanceTexture) {\r\n                    additionalTextures.push(babylonMaterial.reflectanceTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return additionalTextures;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        return (\r\n            (mat.metallicF0Factor != undefined && mat.metallicF0Factor != 1.0) ||\r\n            (mat.metallicReflectanceColor != undefined && !mat.metallicReflectanceColor.equalsFloats(1.0, 1.0, 1.0)) ||\r\n            this._hasTexturesExtension(mat)\r\n        );\r\n    }\r\n\r\n    private _hasTexturesExtension(mat: PBRMaterial): boolean {\r\n        return mat.metallicReflectanceTexture != null || mat.reflectanceTexture != null;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise, resolves with the material\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const metallicReflectanceTexture = this._exporter._materialExporter.getTextureInfo(babylonMaterial.metallicReflectanceTexture) ?? undefined;\r\n                const reflectanceTexture = this._exporter._materialExporter.getTextureInfo(babylonMaterial.reflectanceTexture) ?? undefined;\r\n                const metallicF0Factor = babylonMaterial.metallicF0Factor == 1.0 ? undefined : babylonMaterial.metallicF0Factor;\r\n                const metallicReflectanceColor = babylonMaterial.metallicReflectanceColor.equalsFloats(1.0, 1.0, 1.0)\r\n                    ? undefined\r\n                    : babylonMaterial.metallicReflectanceColor.asArray();\r\n\r\n                const specularInfo: IKHRMaterialsSpecular = {\r\n                    specularFactor: metallicF0Factor,\r\n                    specularTexture: metallicReflectanceTexture,\r\n                    specularColorFactor: metallicReflectanceColor,\r\n                    specularColorTexture: reflectanceTexture,\r\n                };\r\n\r\n                if (this._hasTexturesExtension(babylonMaterial)) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                node.extensions[NAME] = specularInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_specular(exporter));\r\n","import type { IMaterial, IKHRMaterialsTransmission } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\nconst NAME = \"KHR_materials_transmission\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_transmission/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_transmission implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    /** Dispose */\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material, deal with additional textures\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns array of additional textures to export\r\n     */\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (this._isExtensionEnabled(babylonMaterial)) {\r\n                if (babylonMaterial.subSurface.thicknessTexture) {\r\n                    additionalTextures.push(babylonMaterial.subSurface.thicknessTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return additionalTextures;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        const subs = mat.subSurface;\r\n        return (subs.isRefractionEnabled && subs.refractionIntensity != undefined && subs.refractionIntensity != 0) || this._hasTexturesExtension(mat);\r\n    }\r\n\r\n    private _hasTexturesExtension(mat: PBRMaterial): boolean {\r\n        return mat.subSurface.refractionIntensityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns true if successful\r\n     */\r\n    public async postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n            this._wasUsed = true;\r\n\r\n            const subSurface = babylonMaterial.subSurface;\r\n            const transmissionFactor = subSurface.refractionIntensity === 0 ? undefined : subSurface.refractionIntensity;\r\n\r\n            const volumeInfo: IKHRMaterialsTransmission = {\r\n                transmissionFactor: transmissionFactor,\r\n            };\r\n\r\n            if (this._hasTexturesExtension(babylonMaterial)) {\r\n                this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n            }\r\n\r\n            if (subSurface.refractionIntensityTexture) {\r\n                if (subSurface.useGltfStyleTextures) {\r\n                    const transmissionTexture = await this._exporter._materialExporter.exportTextureAsync(subSurface.refractionIntensityTexture);\r\n                    if (transmissionTexture) {\r\n                        volumeInfo.transmissionTexture = transmissionTexture;\r\n                    }\r\n                } else {\r\n                    Logger.Warn(`${context}: Exporting a subsurface refraction intensity texture without \\`useGltfStyleTextures\\` is not supported`);\r\n                }\r\n            }\r\n\r\n            node.extensions ||= {};\r\n            node.extensions[NAME] = volumeInfo;\r\n        }\r\n\r\n        return node;\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_transmission(exporter));\r\n","import type { IMaterial } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\nconst NAME = \"KHR_materials_unlit\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_unlit implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            let unlitMaterial = false;\r\n\r\n            if (babylonMaterial instanceof PBRMaterial) {\r\n                unlitMaterial = babylonMaterial.unlit;\r\n            } else if (babylonMaterial instanceof StandardMaterial) {\r\n                unlitMaterial = babylonMaterial.disableLighting;\r\n            }\r\n\r\n            if (unlitMaterial) {\r\n                this._wasUsed = true;\r\n\r\n                if (node.extensions == null) {\r\n                    node.extensions = {};\r\n                }\r\n\r\n                node.extensions[NAME] = {};\r\n            }\r\n\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, () => new KHR_materials_unlit());\r\n","import type { IMaterial, IKHRMaterialsVolume } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\nconst NAME = \"KHR_materials_volume\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_volume implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material, deal with additional textures\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns array of additional textures to export\r\n     */\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n\r\n        if (babylonMaterial instanceof PBRMaterial) {\r\n            if (this._isExtensionEnabled(babylonMaterial)) {\r\n                if (babylonMaterial.subSurface.thicknessTexture) {\r\n                    additionalTextures.push(babylonMaterial.subSurface.thicknessTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return additionalTextures;\r\n    }\r\n\r\n    private _isExtensionEnabled(mat: PBRMaterial): boolean {\r\n        // This extension must not be used on a material that also uses KHR_materials_unlit\r\n        if (mat.unlit) {\r\n            return false;\r\n        }\r\n        const subs = mat.subSurface;\r\n        // this extension requires either the KHR_materials_transmission or KHR_materials_diffuse_transmission extensions.\r\n        if (!subs.isRefractionEnabled && !subs.isTranslucencyEnabled) {\r\n            return false;\r\n        }\r\n        return (\r\n            (subs.maximumThickness != undefined && subs.maximumThickness != 0) ||\r\n            (subs.tintColorAtDistance != undefined && subs.tintColorAtDistance != Number.POSITIVE_INFINITY) ||\r\n            (subs.tintColor != undefined && subs.tintColor != Color3.White()) ||\r\n            this._hasTexturesExtension(mat)\r\n        );\r\n    }\r\n\r\n    private _hasTexturesExtension(mat: PBRMaterial): boolean {\r\n        return mat.subSurface.thicknessTexture != null;\r\n    }\r\n\r\n    /**\r\n     * After exporting a material\r\n     * @param context GLTF context of the material\r\n     * @param node exported GLTF node\r\n     * @param babylonMaterial corresponding babylon material\r\n     * @returns promise that resolves with the updated node\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRMaterial && this._isExtensionEnabled(babylonMaterial)) {\r\n                this._wasUsed = true;\r\n\r\n                const subs = babylonMaterial.subSurface;\r\n                const thicknessFactor = subs.maximumThickness == 0 ? undefined : subs.maximumThickness;\r\n                const thicknessTexture = this._exporter._materialExporter.getTextureInfo(subs.thicknessTexture) ?? undefined;\r\n                const attenuationDistance = subs.tintColorAtDistance == Number.POSITIVE_INFINITY ? undefined : subs.tintColorAtDistance;\r\n                const attenuationColor = subs.tintColor.equalsFloats(1.0, 1.0, 1.0) ? undefined : subs.tintColor.asArray();\r\n\r\n                const volumeInfo: IKHRMaterialsVolume = {\r\n                    thicknessFactor: thicknessFactor,\r\n                    thicknessTexture: thicknessTexture,\r\n                    attenuationDistance: attenuationDistance,\r\n                    attenuationColor: attenuationColor,\r\n                };\r\n\r\n                if (this._hasTexturesExtension(babylonMaterial)) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                node.extensions = node.extensions || {};\r\n                node.extensions[NAME] = volumeInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_volume(exporter));\r\n","import type { IMaterial, IEXTMaterialsDiffuseRoughness } from \"babylonjs-gltf2interface\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { PBRBaseMaterial } from \"core/Materials/PBR/pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\n\r\nconst NAME = \"EXT_materials_diffuse_roughness\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_materials_diffuse_roughness implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    private _exporter: GLTFExporter;\r\n\r\n    private _wasUsed = false;\r\n\r\n    constructor(exporter: GLTFExporter) {\r\n        this._exporter = exporter;\r\n    }\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportMaterialAdditionalTextures?(context: string, node: IMaterial, babylonMaterial: Material): BaseTexture[] {\r\n        const additionalTextures: BaseTexture[] = [];\r\n        if (babylonMaterial instanceof PBRBaseMaterial) {\r\n            if (babylonMaterial._baseDiffuseRoughness) {\r\n                if (babylonMaterial._baseDiffuseRoughnessTexture) {\r\n                    additionalTextures.push(babylonMaterial._baseDiffuseRoughnessTexture);\r\n                }\r\n                return additionalTextures;\r\n            }\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public postExportMaterialAsync?(context: string, node: IMaterial, babylonMaterial: Material): Promise<IMaterial> {\r\n        return new Promise((resolve) => {\r\n            if (babylonMaterial instanceof PBRBaseMaterial) {\r\n                if (!babylonMaterial._baseDiffuseRoughness) {\r\n                    resolve(node);\r\n                    return;\r\n                }\r\n\r\n                this._wasUsed = true;\r\n\r\n                node.extensions = node.extensions || {};\r\n\r\n                const diffuseRoughnessTextureInfo = this._exporter._materialExporter.getTextureInfo(babylonMaterial._baseDiffuseRoughnessTexture);\r\n\r\n                const diffuseRoughnessInfo: IEXTMaterialsDiffuseRoughness = {\r\n                    diffuseRoughnessFactor: babylonMaterial._baseDiffuseRoughness,\r\n                    diffuseRoughnessTexture: diffuseRoughnessTextureInfo ?? undefined,\r\n                };\r\n\r\n                if (diffuseRoughnessInfo.diffuseRoughnessTexture !== null) {\r\n                    this._exporter._materialNeedsUVsSet.add(babylonMaterial);\r\n                }\r\n\r\n                node.extensions[NAME] = diffuseRoughnessInfo;\r\n            }\r\n            resolve(node);\r\n        });\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, (exporter) => new EXT_materials_diffuse_roughness(exporter));\r\n","import type { ITextureInfo, IKHRTextureTransform } from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\r\nimport { GLTFExporter } from \"../glTFExporter\";\r\n\r\nconst NAME = \"KHR_texture_transform\";\r\n\r\n/**\r\n * Computes the adjusted offset for a rotation centered about the origin.\r\n * @internal\r\n */\r\nfunction AdjustOffsetForRotationCenter(babylonTexture: Texture): [number, number] {\r\n    const { uOffset, vOffset, uRotationCenter, vRotationCenter, uScale, vScale, wAng } = babylonTexture;\r\n    const cosAngle = Math.cos(wAng);\r\n    const sinAngle = Math.sin(wAng);\r\n    const scaledURotationCenter = uRotationCenter * uScale;\r\n    const scaledVRotationCenter = vRotationCenter * vScale;\r\n    const deltaU = scaledURotationCenter * (1 - cosAngle) + scaledVRotationCenter * sinAngle;\r\n    const deltaV = scaledVRotationCenter * (1 - cosAngle) - scaledURotationCenter * sinAngle;\r\n    return [uOffset + deltaU, vOffset + deltaV];\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_texture_transform implements IGLTFExporterExtensionV2 {\r\n    /** Name of this extension */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled */\r\n    public enabled = true;\r\n\r\n    /** Defines whether this extension is required */\r\n    public required = false;\r\n\r\n    /** Reference to the glTF exporter */\r\n    private _wasUsed = false;\r\n\r\n    constructor() {}\r\n\r\n    public dispose() {}\r\n\r\n    /** @internal */\r\n    public get wasUsed() {\r\n        return this._wasUsed;\r\n    }\r\n\r\n    public postExportTexture?(context: string, textureInfo: ITextureInfo, babylonTexture: Texture): void {\r\n        const scene = babylonTexture.getScene();\r\n        if (!scene) {\r\n            Tools.Warn(`${context}: \"scene\" is not defined for Babylon texture ${babylonTexture.name}!`);\r\n        }\r\n\r\n        /*\r\n         * The KHR_texture_transform schema only supports w rotation around the origin.\r\n         * See https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_texture_transform#gltf-schema-updates.\r\n         */\r\n        if (babylonTexture.uAng !== 0 || babylonTexture.vAng !== 0) {\r\n            Tools.Warn(`${context}: Texture ${babylonTexture.name} with rotation in the u or v axis is not supported in glTF.`);\r\n            // Usually, we'd always early return here if the texture uses an unsupported combination of transform properties,\r\n            // but we're making an exception here to maintain backwards compatibility.\r\n            if (babylonTexture.uRotationCenter !== 0 || babylonTexture.vRotationCenter !== 0) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const textureTransform: IKHRTextureTransform = {};\r\n        let transformIsRequired = false;\r\n\r\n        if (babylonTexture.uOffset !== 0 || babylonTexture.vOffset !== 0) {\r\n            textureTransform.offset = [babylonTexture.uOffset, babylonTexture.vOffset];\r\n            transformIsRequired = true;\r\n        }\r\n\r\n        if (babylonTexture.uScale !== 1 || babylonTexture.vScale !== 1) {\r\n            textureTransform.scale = [babylonTexture.uScale, babylonTexture.vScale];\r\n            transformIsRequired = true;\r\n        }\r\n\r\n        if (babylonTexture.wAng !== 0) {\r\n            if (babylonTexture.uRotationCenter !== 0 || babylonTexture.vRotationCenter !== 0) {\r\n                // See https://github.com/mrdoob/three.js/issues/15831 for more details.\r\n                if (babylonTexture.homogeneousRotationInUVTransform && babylonTexture.uScale !== babylonTexture.vScale) {\r\n                    Tools.Warn(\r\n                        `${context}: Texture ${babylonTexture.name} with homogenousRotationInUVTransform, non-uniform scaling, and non-zero rotation cannot be exported with ${NAME}.`\r\n                    );\r\n                    return;\r\n                }\r\n                Tools.Warn(`${context}: Texture ${babylonTexture.name} with non-origin rotation center will be exported using an adjusted offset with ${NAME}.`);\r\n                textureTransform.offset = AdjustOffsetForRotationCenter(babylonTexture);\r\n            }\r\n            textureTransform.rotation = -babylonTexture.wAng;\r\n            transformIsRequired = true;\r\n        }\r\n\r\n        if (babylonTexture.coordinatesIndex !== 0) {\r\n            textureTransform.texCoord = babylonTexture.coordinatesIndex;\r\n            transformIsRequired = true;\r\n        }\r\n\r\n        if (!transformIsRequired) {\r\n            return;\r\n        }\r\n\r\n        this._wasUsed = true;\r\n        if (!textureInfo.extensions) {\r\n            textureInfo.extensions = {};\r\n        }\r\n        textureInfo.extensions[NAME] = textureTransform;\r\n    }\r\n}\r\n\r\nGLTFExporter.RegisterExtension(NAME, () => new KHR_texture_transform());\r\n","/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable babylonjs/available */\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\nimport { GLTFExporter } from \"../glTFExporter\";\nimport { GetMimeType } from \"core/Misc/fileTools\";\nimport { ImageMimeType } from \"babylonjs-gltf2interface\";\n\nconst NAME = \"KHR_texture_basisu\";\n\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_basisu/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_texture_basisu implements IGLTFExporterExtensionV2 {\n    public readonly name = NAME;\n\n    public enabled = true;\n\n    public required = true;\n\n    private _wasUsed = false;\n\n    public get wasUsed() {\n        return this._wasUsed;\n    }\n\n    private _exporter: GLTFExporter;\n\n    constructor(exporter: GLTFExporter) {\n        this._exporter = exporter;\n    }\n\n    public dispose() {}\n\n    public postExportTexture(_: string, textureInfo: BABYLON.GLTF2.ITextureInfo): void {\n        const texture = this._exporter._textures[textureInfo.index];\n        const imageIndex = texture.source;\n        if (imageIndex === undefined) {\n            return;\n        }\n\n        const image = this._exporter._images[imageIndex];\n        const sourceMimeType = image.mimeType || GetMimeType(image.uri!);\n        if (sourceMimeType !== ImageMimeType.KTX2) {\n            return;\n        }\n\n        texture.source = undefined;\n        texture.extensions ||= {};\n        texture.extensions[NAME] = {\n            source: imageIndex,\n        };\n\n        this._wasUsed = true;\n    }\n}\n\nGLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_texture_basisu(exporter));\n","/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable babylonjs/available */\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\nimport { GLTFExporter } from \"../glTFExporter\";\nimport { GetMimeType } from \"core/Misc/fileTools\";\nimport { ImageMimeType } from \"babylonjs-gltf2interface\";\n\nconst NAME = \"EXT_texture_webp\";\n\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_texture_webp/README.md)\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class EXT_texture_webp implements IGLTFExporterExtensionV2 {\n    public readonly name = NAME;\n\n    public enabled = true;\n\n    public required = true;\n\n    private _wasUsed = false;\n\n    public get wasUsed() {\n        return this._wasUsed;\n    }\n\n    private _exporter: GLTFExporter;\n\n    constructor(exporter: GLTFExporter) {\n        this._exporter = exporter;\n    }\n\n    public dispose() {}\n\n    public postExportTexture(_: string, textureInfo: BABYLON.GLTF2.ITextureInfo): void {\n        const texture = this._exporter._textures[textureInfo.index];\n        const imageIndex = texture.source;\n        if (imageIndex === undefined) {\n            return;\n        }\n\n        const image = this._exporter._images[imageIndex];\n        const sourceMimeType = image.mimeType || GetMimeType(image.uri!);\n        if (sourceMimeType !== ImageMimeType.WEBP) {\n            return;\n        }\n\n        texture.source = undefined;\n        texture.extensions ||= {};\n        texture.extensions[NAME] = {\n            source: imageIndex,\n        };\n\n        this._wasUsed = true;\n    }\n}\n\nGLTFExporter.RegisterExtension(NAME, (exporter) => new EXT_texture_webp(exporter));\n","/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable babylonjs/available */\nimport type { IGLTFExporterExtensionV2 } from \"../glTFExporterExtension\";\nimport { GLTFExporter } from \"../glTFExporter\";\nimport { GetMimeType } from \"core/Misc/fileTools\";\nimport { ImageMimeType } from \"babylonjs-gltf2interface\";\n\nconst NAME = \"EXT_texture_avif\";\n\n/**\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/blob/5cb7518cf9a1bfb8268320026961b21caf5a4aac/extensions/2.0/Vendor/EXT_texture_avif/README.md)\n * @experimental\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class EXT_texture_avif implements IGLTFExporterExtensionV2 {\n    public readonly name = NAME;\n\n    public enabled = true;\n\n    public required = true;\n\n    private _wasUsed = false;\n\n    public get wasUsed() {\n        return this._wasUsed;\n    }\n\n    private _exporter: GLTFExporter;\n\n    constructor(exporter: GLTFExporter) {\n        this._exporter = exporter;\n    }\n\n    public dispose() {}\n\n    public postExportTexture(_: string, textureInfo: BABYLON.GLTF2.ITextureInfo): void {\n        const texture = this._exporter._textures[textureInfo.index];\n        const imageIndex = texture.source;\n        if (imageIndex === undefined) {\n            return;\n        }\n\n        const image = this._exporter._images[imageIndex];\n        const sourceMimeType = image.mimeType || GetMimeType(image.uri!);\n        if (sourceMimeType !== ImageMimeType.AVIF) {\n            return;\n        }\n\n        texture.source = undefined;\n        texture.extensions ||= {};\n        texture.extensions[NAME] = {\n            source: imageIndex,\n        };\n\n        this._wasUsed = true;\n    }\n}\n\nGLTFExporter.RegisterExtension(NAME, (exporter) => new EXT_texture_avif(exporter));\n","/* eslint-disable @typescript-eslint/no-restricted-imports */\r\nimport * as Exporters from \"serializers/glTF/glTFFileExporter\";\r\nimport * as Datas from \"serializers/glTF/2.0/glTFData\";\r\nimport * as Serializers from \"serializers/glTF/2.0/glTFSerializer\";\r\nimport * as Extensions from \"serializers/glTF/2.0/Extensions/index\";\r\nimport * as GLTF2 from \"serializers/glTF/2.0/index\";\r\n\r\n/**\r\n * This is the entry point for the UMD module.\r\n * The entry point for a future ESM package should be index.ts\r\n */\r\nconst globalObject = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : undefined;\r\nif (typeof globalObject !== \"undefined\") {\r\n    (<any>globalObject).BABYLON = (<any>globalObject).BABYLON || {};\r\n    const BABYLON = (<any>globalObject).BABYLON;\r\n    BABYLON.GLTF2 = BABYLON.GLTF2 || {};\r\n    BABYLON.GLTF2.Exporter = BABYLON.GLTF2.Exporter || {};\r\n    BABYLON.GLTF2.Exporter.Extensions = BABYLON.GLTF2.Exporter.Extensions || {};\r\n\r\n    const keys = [];\r\n    for (const key in Exporters) {\r\n        BABYLON[key] = (<any>Exporters)[key];\r\n        keys.push(key);\r\n    }\r\n    for (const key in Datas) {\r\n        BABYLON[key] = (<any>Datas)[key];\r\n        keys.push(key);\r\n    }\r\n    for (const key in Serializers) {\r\n        BABYLON[key] = (<any>Serializers)[key];\r\n        keys.push(key);\r\n    }\r\n\r\n    for (const key in Extensions) {\r\n        BABYLON.GLTF2.Exporter.Extensions[key] = (<any>Extensions)[key];\r\n        keys.push(key);\r\n    }\r\n\r\n    for (const key in GLTF2) {\r\n        // Prevent Reassignment.\r\n        if (keys.indexOf(key) > -1) {\r\n            continue;\r\n        }\r\n\r\n        BABYLON.GLTF2.Exporter[key] = (<any>GLTF2)[key];\r\n    }\r\n}\r\n\r\nexport * from \"serializers/glTF/glTFFileExporter\";\r\nexport * from \"serializers/glTF/2.0/index\";\r\n","import * as serializers from \"@lts/serializers/legacy/legacy-glTF2Serializer\";\r\nexport { serializers };\r\nexport default serializers;\r\n"],"names":["root","factory","exports","module","require","define","amd","self","global","this","__WEBPACK_EXTERNAL_MODULE__597__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","__IGLTFExporterExtension","files","downloadFiles","blob","Blob","type","GetMimeType","Tools","Download","__assign","assign","t","s","i","n","arguments","length","p","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","f","y","_","label","sent","trys","ops","create","Iterator","verb","iterator","v","op","TypeError","pop","push","__spreadArray","to","from","pack","ar","l","Array","slice","concat","SuppressedError","Epsilon","DielectricSpecular","Color3","MaxSpecularPower","White","Black","GetCachedImageAsync","babylonTexture","internalTexture","getInternalTexture","source","invertY","buffer","_buffer","mimeType","LoadFileAsync","url","data","ArrayBuffer","isView","byteOffset","byteLength","arrayBuffer","HTMLImageElement","src","_SolveMetallic","diffuse","specular","oneMinusSpecularStrength","a","b","Scalar","Clamp","Math","sqrt","_ConvertToGLTFPBRMetallicRoughness","babylonStandardMaterial","diffuseColor","toLinearSpace","getScene","getEngine","useExactSrgbConversions","scale","opacity","alpha","specularPower","roughness","SpecularPowerToRoughness","baseColorFactor","metallicFactor","roughnessFactor","SetAlphaMode","glTFMaterial","babylonMaterial","needAlphaBlending","alphaMode","needAlphaTesting","alphaCutoff","alphaCutOff","CreateWhiteTexture","width","height","scene","Uint8Array","RawTexture","CreateRGBATexture","ConvertPixelArrayToFloat32","pixels","Float32Array","Error","_exporter","_textureMap","Map","_internalTextureToImage","getTextureInfo","exportStandardMaterialAsync","hasUVs","pbrMetallicRoughness","material","name","backFaceCulling","twoSidedLighting","Warn","doubleSided","promises","diffuseTexture","exportTextureAsync","textureInfo","baseColorTexture","bumpTexture","normalTexture","level","emissiveTexture","emissiveFactor","ambientTexture","occlusionTexture","index","_materialNeedsUVsSet","add","all","opacityTexture","Constants","ALPHA_COMBINE","toString","emissiveColor","equalsWithEpsilon","asArray","_finishMaterialAsync","materials","_materials","textures","_extensionsPostExportMaterialAdditionalTextures","texture","_extensionsPostExportMaterialAsync","_getImageDataAsync","DumpTools","DumpDataAsync","_resizeTexturesToSameDimensions","texture1","texture2","resizedTexture1","resizedTexture2","texture1Size","getSize","texture2Size","Texture","TextureTools","CreateResizedCopy","_convertSpecularGlossinessTexturesToMetallicRoughnessAsync","specularGlossinessTexture","factors","resizedTextures","diffuseSize","diffuseBuffer","specularGlossinessBuffer","readPixels","diffusePixels","specularPixels","metallicRoughnessBuffer","baseColorBuffer","maxBaseColor","maxMetallic","maxRoughness","h","w","offset","multiply","specularColor","glossiness","specularGlossiness","metallicRoughness","_convertSpecularGlossinessToMetallicRoughness","max","baseColor","metallic","hasAlpha","writeOutMetallicRoughnessTexture","writeOutBaseColorTexture","destinationOffset","linearBaseColorPixel","FromInts","sRGBBaseColorPixel","toGammaSpace","metallicRoughnessTextureData","baseColorTextureData","diffusePerceivedBrightness","_getPerceivedBrightness","specularPerceivedBrightness","_getMaxComponent","baseColorFromDiffuse","baseColorFromSpecular","subtract","Lerp","clampToRef","color","_convertMetalRoughFactorsToMetallicRoughnessAsync","babylonPBRMaterial","glTFPbrMetallicRoughness","_albedoColor","_metallic","_roughness","albedoTexture","_albedoTexture","glTFTexture","metallicTexture","_metallicTexture","metallicRoughnessTexture","_getTextureSampler","sampler","wrapS","_getGLTFTextureWrapMode","wrapU","wrapT","wrapV","samplingMode","LINEAR_LINEAR","magFilter","minFilter","LINEAR_NEAREST","NEAREST_LINEAR","NEAREST_LINEAR_MIPLINEAR","NEAREST_NEAREST","NEAREST_LINEAR_MIPNEAREST","LINEAR_NEAREST_MIPNEAREST","LINEAR_NEAREST_MIPLINEAR","NEAREST_NEAREST_MIPLINEAR","LINEAR_LINEAR_MIPLINEAR","LINEAR_LINEAR_MIPNEAREST","NEAREST_NEAREST_MIPNEAREST","wrapMode","WRAP_ADDRESSMODE","CLAMP_ADDRESSMODE","MIRROR_ADDRESSMODE","_convertSpecGlossFactorsToMetallicRoughnessAsync","specGloss","_reflectivityColor","_microSurface","reflectivityTexture","_reflectivityTexture","useMicrosurfaceFromReflectivityMapAlpha","_useMicroSurfaceFromReflectivityMapAlpha","samplerIndex","_exportTextureSampler","metallicRoughnessFactors","_textures","imageIndex","_exportImage","_exportTextureInfo","coordinatesIndex","exportPBRMaterialAsync","useMetallicRoughness","isMetallicWorkflow","albedoColor","_setMetallicRoughnessPbrMaterialAsync","WithinEpsilon","_twoSidedLighting","_bumpTexture","_ambientTexture","texCoord","extensions","ambientTextureStrength","_ambientTextureStrength","strength","_emissiveTexture","_emissiveColor","_exportTextureImageAsync","set","_extensionsPostExportTextures","requestedMimeType","internalTextureToImage","internalTextureUniqueId","uniqueId","imageIndexPromise","cache","size","GetTextureDataAsync","image","images","_images","_shouldUseGlb","bufferView","_bufferManager","createBufferView","setBufferView","baseName","replace","extension","GetFileExtensionFromMimeType","some","uri","RandomId","_imageData","textureIndex","findIndex","samplers","_samplers","ConvertHandednessMatrix","Matrix","Compose","Vector3","Quaternion","Identity","Zero","IsNoopNode","node","useRightHandedSystem","TransformNode","getWorldMatrix","IdentityReadOnly","multiplyToRef","TmpVectors","AbstractMesh","geometry","DefaultTranslation","DefaultRotation","DefaultScale","One","DefaultLoaderCameraParentScaleLh","GetVertexBufferInfo","vertexBuffer","meshes","byteStride","normalized","componentCount","totalVertices","reduce","current","getTotalVertices","Number","MAX_VALUE","count","kind","getKind","GetAccessorElementCount","accessorType","IsStandardVertexAttribute","VertexBuffer","PositionKind","NormalKind","TangentKind","ColorKind","MatricesIndicesKind","MatricesIndicesExtraKind","MatricesWeightsKind","MatricesWeightsExtraKind","UVKind","UV2Kind","UV3Kind","UV4Kind","UV5Kind","UV6Kind","GetPrimitiveMode","fillMode","Material","TriangleFillMode","TriangleStripDrawMode","TriangleFanDrawMode","PointListDrawMode","PointFillMode","LineLoopDrawMode","LineListDrawMode","LineStripDrawMode","NormalizeTangent","tangent","x","z","ConvertToRightHandedPosition","ConvertToRightHandedRotation","absX","abs","absY","sign","absZ","absW","Rotate180Y","rotation","copyFromFloats","CollapseChildIntoParent","parentNode","parentTranslation","FromArrayToRef","translation","parentRotation","parentMatrix","ComposeToRef","matrix","decompose","IsChildCollapsible","babylonNode","parentBabylonNode","getChildren","parent","expectedScale","TargetCamera","scaling","Logger","OmitDefaultValues","object","defaultValues","entries","defaultValue","isArray","AreArraysEqual","array1","array2","every","val","TypedArrayToWriteMethod","Int8Array","setInt8","dv","bo","setUint8","Uint8ClampedArray","Int16Array","setInt16","Uint16Array","setUint16","Int32Array","setInt32","Uint32Array","setUint32","setFloat32","Float64Array","setFloat64","_data","_dataView","DataView","_byteOffset","writeTypedArray","_checkGrowBuffer","setMethod","constructor","BYTES_PER_ELEMENT","getOutputData","writeUInt8","writeInt8","writeInt16","entry","writeUInt16","writeInt32","writeUInt32","writeFloat32","writeFloat64","newByteLength","newData","GetHighestByteAlignment","_TangentType","_bufferViewToData","_bufferViewToProperties","_accessorToBufferView","generateBinary","bufferViews","totalByteLength","forEach","dataWriter","DataWriter","keys","sort","bufferViewIndex","getPropertiesWithBufferView","delete","createAccessor","componentType","minMax","_verifyBufferView","accessor","min","removeBufferView","bv","getBufferView","getData","has","_IsTransformable","Camera","Light","_CreateNodeAnimation","babylonTransformNode","animation","animationChannelTargetPath","useQuaternion","animationSampleRate","inputs","outputs","keyFrames","getKeys","minMaxKeyFrames","_GLTFAnimation","_CalculateMinMaxKeyFrames","interpolationOrBake","_DeduceInterpolation","interpolation","interpolationType","shouldBakeAnimation","_CreateBakedAnimation","framePerSecond","_CreateLinearOrStepAnimation","_CreateCubicSplineAnimation","samplerInterpolation","inputsMin","FloatRound","inputsMax","_DeduceAnimationInfo","dataAccessorType","property","targetProperty","split","_CreateNodeAnimationFromNodeAnimations","runtimeGLTFAnimation","idleGLTFAnimations","nodeMap","nodes","bufferManager","accessors","useRightHanded","shouldExportAnimation","glTFAnimation","animations","animationInfo","channels","_AddAnimation","hasRunningRuntimeAnimations","_CreateMorphTargetAnimationFromMorphTargetAnimations","Mesh","morphTargetManager","numTargets","getTarget","combinedAnimation","Animation","dataType","loopMode","enableBlending","combinedAnimationKeys","animationKeys","j","animationKey","k","frame","setKeys","_CreateNodeAndMorphAnimationFromAnimationGroups","babylonScene","glTFAnimations","leftHandedNodes","animationGroups","animationGroup","morphAnimations","sampleAnimations","morphAnimationMeshes","Set","animationGroupFrameDiff","targetAnimation","targetedAnimations","target","convertToRightHanded","MorphTarget","morphTargetManagers","find","babylonMesh","mesh","combinedAnimationGroup","sampleAnimationKeys","numAnimationKeys","morphTarget","animationsByMorphTarget","morphTargetAnimation","ANIMATIONTYPE_FLOAT","influence","inTangent","outTangent","morphAnimationChannels","keyframeAccessorIndex","dataAccessorIndex","animationSampler","animationChannel","animationData","currentInput","newInputs","shift","nodeIndex","inputData","output","outputToWrite","toArray","FromEulerVectorToRef","input","path","minFrame","maxFrame","fps","sampleRate","minMaxFrames","time","quaternionCache","previousTime","maxUsedFrame","currKeyFrame","nextKeyFrame","prevKeyFrame","endFrame","equals","state","repeatCount","_interpolate","_SetInterpolatedValue","_ConvertFactorToVector3OrQuaternion","factor","basePositionRotationOrScale","_GetBasePositionRotationOrScale","componentName","FromArray","normalize","cacheValue","RotationYawPitchRollToRef","keyFrame","_AddKeyframeValue","_AddSplineTangent","INTANGENT","OUTTANGENT","q","rotationQuaternion","position","newPositionRotationOrScale","animationType","ANIMATIONTYPE_VECTOR3","array","RotationYawPitchRoll","posRotScale","ANIMATIONTYPE_QUATERNION","tangentType","tangentValue","Infinity","BuildMorphTargetBuffers","attributes","flipX","difference","vertexCount","hasPositions","morphPositions","getPositions","originalPositions","getVerticesData","positionData","originalPosition","subtractToRef","floatSize","hasNormals","morphNormals","getNormals","originalNormals","normalData","originalNormal","hasTangents","morphTangents","getTangents","originalTangents","tangentData","originalTangent","morphTangent","hasColors","morphColors","getColors","originalColors","getVertexBuffer","componentSize","colorData","originalColor","difference4","Vector4","wasAddedByNoopNode","_indicesAccessorMap","_vertexBufferViewMap","_vertexAccessorMap","_remappedBufferView","_meshMorphTargetMap","_vertexMapColorAlpha","_exportedNodes","_meshMap","convertedToRightHandedBuffers","getIndicesAccessor","indices","start","flip","setIndicesAccessor","accessorIndex","map1","map2","map3","map4","pushExportedNode","getNodesSet","getVertexBufferView","setVertexBufferView","setRemappedBufferView","getRemappedBufferView","getVertexAccessor","setVertexAccessor","hasVertexColorAlpha","setHasVertexColorAlpha","getMesh","setMesh","meshIndex","bindMorphDataToMesh","morphData","morphTargets","indexOf","getMorphTargetsFromMesh","options","EngineStore","LastCreatedScene","_glTF","asset","Engine","Version","version","_animations","_accessors","_bufferViews","_cameras","_meshes","_nodes","_scenes","_skins","_materialExporter","GLTFMaterialExporter","_extensions","BufferManager","_shouldExportNodeMap","_nodeMap","_materialMap","_camerasMap","_nodesCameraMap","_skinMap","_nodesSkinMap","_babylonScene","_options","shouldExportNode","metadataSelector","metadata","gltf","extras","exportWithoutWaitingForScene","exportUnusedUVs","removeNoopRootNodes","includeCoordinateSystemConversionNodes","meshCompressionMethod","_loadExtensions","_ApplyExtension","actionAsync","currentPromise","newNode","_ApplyExtensions","GLTFExporter","_ExtensionNames","_extensionsPostExportNodeAsync","context","postExportNodeAsync","postExportMaterialAsync","postExportMaterialAdditionalTextures","postExportTexture","_extensionsPostExportMeshPrimitive","primitive","postExportMeshPrimitive","_extensionsPreGenerateBinaryAsync","preGenerateBinaryAsync","_forEachExtensions","action","enabled","_extensionsOnExporting","wasUsed","extensionsUsed","required","extensionsRequired","onExporting","_ExtensionFactories","dispose","RegisterExtension","UnregisterExtension","splice","_generateJSON","bufferByteLength","fileName","prettyPrint","buffers","scenes","cameras","skins","JSON","stringify","generateGLTFAsync","glTFPrefix","_generateBinaryAsync","binaryBuffer","jsonText","bin","glTFFileName","glTFBinFile","container","GLTFData","_exportSceneAsync","_getPadding","num","remainder","generateGLBAsync","glbFileName","jsonLength","TextEncoder","encoder","encodedJsonText","encode","jsonPadding","binPadding","headerLength","blankCharCode","charCodeAt","charCode","codePointAt","_setNodeTransformation","getPivotPoint","copyFrom","clone","FromEulerAngles","_setCameraTransformation","babylonCamera","_listAvailableCameras","camera","glTFCamera","mode","PERSPECTIVE_CAMERA","perspective","aspectRatio","getAspectRatio","yfov","fovMode","FOVMODE_VERTICAL_FIXED","fov","znear","minZ","zfar","maxZ","halfWidth","orthoLeft","orthoRight","getRenderWidth","halfHeight","orthoBottom","orthoTop","getRenderHeight","orthographic","xmag","ymag","_exportAndAssignCameras","values","gltfCamera","usedNodes","_listAvailableSkeletons","skeletons","skeleton","bones","joints","_exportAndAssignSkeletons","leftHandNodes","skin","boneIndexMap","maxBoneIndex","bone","boneIndex","getIndex","inverseBindMatrices","transformNode","getTransformNode","boneMatrix","getAbsoluteInverseBindMatrix","invertToRef","skinnedNodes","mat","m","skinIndex","rootNodesRH","rootNodesLH","rootNoopNodesRH","rootNodes","rootNode","stateLH","ExporterState","_exportNodesAsync","stateRH","noopRH","_animationSampleRate","_shouldExportNode","babylonRootNodes","_exportBuffers","_exportNodeAsync","_collectBuffers","bufferToVertexBuffersMap","vertexBufferToMeshesMap","morphTargetsToMeshesMap","vertexBuffers","getVertexBuffers","hasVertexAlpha","vertexBufferArray","morphIndex","babylonChildNode","morphTargetsMeshesMap","bytes","floatData","DataArrayToUint8Array","EnumerateFloatValues","invLength","stdMaterialCount","filter","StandardMaterial","UNSIGNED_BYTE","Color4","fromArray","toLinearSpaceToRef","floatMatricesIndices","FLOAT","getFloatData","is16Bit","newArray","glTFMorphTarget","parentNodeChildren","includes","_createNodeAsync","idleGLTFAnimation","children","InstancedMesh","sourceMesh","subMeshes","_exportMeshAsync","parentNodeIndex","_exportIndices","is32Bits","sideOrientation","indicesToExport","CounterClockWiseSideOrientation","IsTriangleFillMode","newIndices","subarray","IndicesArrayToTypedArray","_exportVertexBuffer","startsWith","fill","GetMinMax","isFloatMatricesIndices","vertexBufferType","vertexBufferNormalized","GetAccessorType","GetAttributeType","_exportMaterialAsync","subMesh","materialIndex","MultiMaterial","subMaterials","PBRBaseMaterial","getClassName","primitives","isUnIndexed","getIndices","isLinesMesh","LinesMesh","isGreasedLineMesh","GreasedLineBaseMesh","getMaterial","defaultMaterial","babylonLinesMesh","colorWhite","greasedLineMaterial","overrideRenderingFillMode","_getEffectiveOrientation","ClockWiseSideOrientation","AreIndices32Bits","indexCount","indexStart","verticesStart","verticesCount","targets","gltfMorphTarget","weights","targetNames","GLTFAsync","whenReadyAsync","exporter","GLBAsync","NAME","_wasUsed","hasThinInstances","noTranslation","noRotation","noScale","thinInstanceGetWorldMatrices","iwt","iwr","iws","hasAnyInstanceWorldTranslation","hasAnyInstanceWorldRotation","hasAnyInstanceWorldScale","translationBuffer","thinInstanceCount","rotationBuffer","scaleBuffer","_buildAccessor","EXT_mesh_gpu_instancing","_bufferViewsUsed","_accessorsUsed","_encodePromises","DracoEncoder","DefaultAvailable","primitiveBufferViews","primitiveAccessors","glTFName","GetTypedArrayData","GetTypeByteLength","dracoName","method","promise","Default","_encodeAsync","encodedData","dracoInfo","attributeIds","catch","error","clear","KHR_draco_mesh_compression","DEFAULTS","intensity","range","SPOTDEFAULTS","innerConeAngle","outerConeAngle","PI","LIGHTDIRECTION","Backward","_lights","lightType","getTypeID","LIGHTTYPEID_POINTLIGHT","LIGHTTYPEID_DIRECTIONALLIGHT","LIGHTTYPEID_SPOTLIGHT","ShadowLight","falloffType","FALLOFF_GLTF","equalsToFloats","direction","normalizeToRef","lightRotationQuaternion","FromUnitVectorsToRef","IsIdentity","light","babylonSpotLight","spot","innerAngle","angle","lights","lightReference","KHR_lights_punctual","additionalTextures","anisotropy","isEnabled","legacy","anisotropyTextureInfo","anisotropyInfo","anisotropyStrength","anisotropyRotation","anisotropyTexture","KHR_materials_anisotropy","clearCoat","useRoughnessFromMainTexture","textureRoughness","clearCoatTextureRoughnessInfo","clearCoatTextureInfo","isTintEnabled","remapF0OnInterfaceChange","clearCoatNormalTextureInfo","clearCoatInfo","clearcoatFactor","clearcoatTexture","clearcoatRoughnessFactor","clearcoatRoughnessTexture","clearcoatNormalTexture","KHR_materials_clearcoat","GetTranslucencyIntensityTexture","subs","subSurface","translucencyIntensityTexture","thicknessTexture","useMaskFromThicknessTexture","useGltfStyleTextures","PBRMaterial","_isExtensionEnabled","translucencyColorTexture","unlit","isTranslucencyEnabled","useAlbedoToTintTranslucency","volumeIndexOfRefraction","minimumThickness","maximumThickness","diffuseTransmissionFactor","translucencyIntensity","diffuseTransmissionTexture","diffuseTransmissionColorFactor","translucencyColor","equalsFloats","diffuseTransmissionColorTexture","diffuseTransmissionInfo","KHR_materials_diffuse_transmission","isRefractionEnabled","isDispersionEnabled","dispersionInfo","dispersion","KHR_materials_dispersion","tempEmissiveStrength","emissiveStrengthInfo","emissiveStrength","newEmissiveFactor","KHR_materials_emissive_strength","indexOfRefraction","iorInfo","ior","KHR_materials_ior","iridescence","iridescenceTextureInfo","iridescenceThicknessTextureInfo","iridescenceInfo","iridescenceFactor","iridescenceIor","iridescenceThicknessMinimum","iridescenceThicknessMaximum","iridescenceTexture","iridescenceThicknessTexture","KHR_materials_iridescence","sheen","sheenInfo","sheenColorFactor","sheenRoughnessFactor","sheenColorTexture","sheenRoughnessTexture","KHR_materials_sheen","metallicReflectanceTexture","reflectanceTexture","metallicF0Factor","metallicReflectanceColor","_hasTexturesExtension","specularInfo","specularFactor","specularTexture","specularColorFactor","specularColorTexture","KHR_materials_specular","refractionIntensity","refractionIntensityTexture","transmissionFactor","volumeInfo","transmissionTexture","KHR_materials_transmission","unlitMaterial","disableLighting","KHR_materials_unlit","tintColorAtDistance","POSITIVE_INFINITY","tintColor","thicknessFactor","attenuationDistance","attenuationColor","KHR_materials_volume","_baseDiffuseRoughness","_baseDiffuseRoughnessTexture","diffuseRoughnessTextureInfo","diffuseRoughnessInfo","diffuseRoughnessFactor","diffuseRoughnessTexture","EXT_materials_diffuse_roughness","uAng","vAng","uRotationCenter","vRotationCenter","textureTransform","transformIsRequired","uOffset","vOffset","uScale","vScale","wAng","homogeneousRotationInUVTransform","cosAngle","cos","sinAngle","sin","scaledURotationCenter","scaledVRotationCenter","AdjustOffsetForRotationCenter","KHR_texture_transform","KHR_texture_basisu","EXT_texture_webp","EXT_texture_avif","globalObject","BABYLON","GLTF2","Exporter","Extensions"],"sourceRoot":""}